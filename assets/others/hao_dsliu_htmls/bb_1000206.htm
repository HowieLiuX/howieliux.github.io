<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转]数组大小为0的应用</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转]数组大小为0的应用</h2>
<p align="right">发布时间：2011-7-6 11:04
<br>分类名称：C++</p><br>
<p><span style="font-family:宋体; font-size:12pt;">在linuxforum上看见有人讨论数组大小为0的理解，觉得不错，特摘录下来，以备参考：<br>Q： 数组大小为0应该怎么理解？ <br>比如： <br>struct page *page[0]; <br>unsigned long private[0] ____cacheline_aligned;<br><br>A： 一个很好的例子就是 <br>struct unix_address <br>{ <br>atomic_t refcnt; <br>int len; <br>unsigned hash; <br>struct sockaddr_un name[0]; <br>}; <br><br>#define UNIX_PATH_MAX 108 <br><br>struct sockaddr_un { <br>sa_family_t sun_family; /* AF_UNIX */ <br>char sun_path[UNIX_PATH_MAX]; /* pathname */ <br>}; <br><br>其中name实际上指向unix_address结构之后的空间。 <br>好处就是sockaddr_un是变长的，为了不浪费空间，就这样定义。到实际分配unix_address结构的时候按实际的地址大小一并分配空间，那样就可以通过unix_address-&gt;name来访问实际的地址。<br><br>这样做的具体的优点：<br>struct unix_address <br>{ <br>atomic_t refcnt; <br>int len; <br>unsigned hash; <br>void *name; <br>}; <br><br>1。name占用空间(4字节) <br>2。分配空间的时候可以一起分配，但是需要把p-&gt;name设置为=p++,访问name的值时需要指针中<br>转一下 <br><br>而 <br>struct unix_address <br>{ <br>atomic_t refcnt; <br>int len; <br>unsigned hash; <br>struct sockaddr_un name[0]; <br>}; <br>没有上面两个缺点 <br>1。它不占用结构的空间 <br>2。如果访问某个p-&gt;name,却可以访问紧接p的内存空间 <br>利用上面两个特性，就可以根据实际的unix域地址大小来一起分配空间，通过p-&gt;name访问地址 </span></p><p><span style="font-family:宋体; font-size:12pt;"><br>-------------------------------------------------------------------<br>|                 |实际地址|          <br>-------------------------------------------------------------------<br>^                 ^<br>|                 |<br>p                name  </span></p><p><span style="font-family:宋体; font-size:12pt;">它可以用来定义一个变长的结构体，比如你可以动态分配这个结构体，并把分配的长度等于sizeof(struct) + len,这样len这么长的内存就可以直接用最后的那个没有实际空间的指针来引用了。 </span></p><p> &nbsp;</p><p><span style="font-family:宋体; font-size:12pt;">下面是自己写的例子：=======================================================</span>  </p><p>#include &lt;iostream&gt;<br>using namespace std;<br><br>#define UNIX_PATH_MAX 108<br><br>struct sockaddr_un {<br>&nbsp;&nbsp;&nbsp;&nbsp;int sun_family; <br>&nbsp;&nbsp;&nbsp;&nbsp;char sun_path[UNIX_PATH_MAX]; <br>}; <br><br>struct unix_address<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;int refcnt;<br>&nbsp;&nbsp;&nbsp;&nbsp;int len;<br>&nbsp;&nbsp;&nbsp;&nbsp;unsigned hash;<br>&nbsp;&nbsp;&nbsp;&nbsp;struct sockaddr_un name[0];<br>};<br><br>struct unix_address2<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;int refcnt;<br>&nbsp;&nbsp;&nbsp;&nbsp;int len;<br>&nbsp;&nbsp;&nbsp;&nbsp;unsigned hash;<br>&nbsp;&nbsp;&nbsp;&nbsp;struct sockaddr_un *name;<br>};<br><br>struct unix_address3<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;int refcnt;<br>&nbsp;&nbsp;&nbsp;&nbsp;int len;<br>&nbsp;&nbsp;&nbsp;&nbsp;unsigned hash;<br>&nbsp;&nbsp;&nbsp;&nbsp;void *name;<br>};<br><br>int main(int argc, char* argv[])<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;cout &lt;&lt; sizeof(unix_address) &lt;&lt; endl;<br>&nbsp;&nbsp;&nbsp;&nbsp;cout &lt;&lt; sizeof(unix_address2) &lt;&lt; endl;<br>&nbsp;&nbsp;&nbsp;&nbsp;cout &lt;&lt; sizeof(unix_address3) &lt;&lt; endl;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;unix_address *p = (unix_address *)malloc(sizeof(unix_address) + sizeof(sockaddr_un));<br>&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;name-&gt;sun_family = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;memset(p-&gt;name-&gt;sun_path, 0, UNIX_PATH_MAX);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;unix_address2 *p2 = (unix_address2 *)malloc(sizeof(unix_address2) + sizeof(sockaddr_un));<br>&nbsp;&nbsp;&nbsp;&nbsp;p2-&gt;name = (sockaddr_un *)(void *)(p2+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;p2-&gt;name-&gt;sun_family = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;memset(p2-&gt;name-&gt;sun_path, 0, UNIX_PATH_MAX);<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;unix_address3 *p3 = (unix_address3 *)malloc(sizeof(unix_address3) + sizeof(sockaddr_un));<br>&nbsp;&nbsp;&nbsp;&nbsp;p3-&gt;name = p3+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;((sockaddr_un *)(p3-&gt;name))-&gt;sun_family = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;memset(((sockaddr_un *)(p3-&gt;name))-&gt;sun_path, 0, UNIX_PATH_MAX);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;free(p);<br>&nbsp;&nbsp;&nbsp;&nbsp;free(p2);<br>&nbsp;&nbsp;&nbsp;&nbsp;free(p3);<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br></p>
</body></html>