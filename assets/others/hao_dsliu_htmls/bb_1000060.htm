<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转] C++调用约定和名字约定</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转] C++调用约定和名字约定</h2>
<p align="right">发布时间：2014-3-26 11:28
<br>分类名称：C++</p><br>
<P><WBR>From:http://www.cppblog.com/mzty/archive/2007/04/20/22349.html</P>
<P style="TEXT-INDENT: 2em;"   >调用约定：<BR>__cdecl __fastcall与 __stdcall，三者都是调用约定(Calling convention)，它决定以下内容：1)函数参数的压栈顺序，2)由调用者还是被调用者把参数弹出栈，3)以及产生函数修饰名的方法。</P>
<P style="TEXT-INDENT: 2em;"   >1、__stdcall调用约定：函数的参数自右向左通过栈传递，被调用的函数在返回前清理传送参数的内存栈，</P>
<P style="TEXT-INDENT: 2em;"   >2、_cdecl是C和C＋＋程序的缺省调用方式。每一个调用它的函数都包含清空堆栈的代码，所以产生的可执行文件大小会比调用_stdcall函数的大。函数采用从右到左的压栈方式。注意：对于可变参数的成员函数，始终使用__cdecl的转换方式。</P>
<P style="TEXT-INDENT: 2em;"   >3、__fastcall调用约定：它是通过寄存器来传送参数的（实际上，它用ECX和EDX传送前两个双字（DWORD）或更小的参数，剩下的参数仍旧自右向左压栈传送，被调用的函数在返回前清理传送参数的内存栈）。</P>
<P style="TEXT-INDENT: 2em;"   >4、thiscall仅仅应用于"C++"成员函数。this指针存放于CX寄存器，参数从右到左压。thiscall不是关键词，因此不能被程序员指定。</P>
<P style="TEXT-INDENT: 2em;"   >5、naked call采用1-4的调用约定时，如果必要的话，进入函数时编译器会产生代码来保存ESI，EDI，EBX，EBP寄存器，退出函数时则产生代码恢复这些寄存器的内容。naked call不产生这样的代码。naked call不是类型修饰符，故必须和_declspec共同使用。</P>
<P style="TEXT-INDENT: 2em;"   >调用约定可以通过工程设置：Setting...\C/C++ \Code Generation项进行选择，缺省状态为__cdecl。</P>
<P style="TEXT-INDENT: 2em;"   >名字修饰约定：</P>
<P style="TEXT-INDENT: 2em;"   >1、修饰名(Decoration name)："C"或者"C++"函数在内部（编译和链接）通过修饰名识别<BR>2、C编译时函数名修饰约定规则：<BR>__stdcall调用约定在输出函数名前加上一个下划线前缀，后面加上一个"@"符号和其参数的字节数，格式为<A rel="nofollow" href="mailto:_functionname@number"   >_functionname@number</A>,例如：function(int a, int b)，其修饰名为：<A rel="nofollow" href="mailto:_function@8"   >_function@8</A><BR>__cdecl调用约定仅在输出函数名前加上一个下划线前缀，格式为_functionname。<BR>__fastcall调用约定在输出函数名前加上一个"@"符号，后面也是一个"@"符号和其参数的字节数，格式为@functionname@number。</P>
<P style="TEXT-INDENT: 2em;"   >3、C++编译时函数名修饰约定规则：<BR>__stdcall调用约定：<BR>1)、以"?"标识函数名的开始，后跟函数名；<BR>2)、函数名后面以"@@YG"标识参数表的开始，后跟参数表；<BR>3)、参数表以代号表示：<BR>X--void ，<BR>D--char，<BR>E--unsigned char，<BR>F--short，<BR>H--int，<BR>I--unsigned int，<BR>J--long，<BR>K--unsigned long，<BR>M--float，<BR>N--double，<BR>_N--bool，<BR>PA--表示指针，后面的代号表明指针类型，如果相同类型的指针连续出现，以"0"代替，一个"0"代表一次重复；<BR>4)、参数表的第一项为该函数的返回值类型，其后依次为参数的数据类型,指针标识在其所指数据类型前；<BR>5)、参数表后以"@Z"标识整个名字的结束，如果该函数无参数，则以"Z"标识结束。<BR>其格式为"<A rel="nofollow" href="mailto:?functionname@@YG*****@Z"   >?functionname@@YG*****@Z</A>"或"<A rel="nofollow" href="mailto:?functionname@@YG*XZ"   >?functionname@@YG*XZ</A>"，例如<BR>&nbsp;&nbsp; int Test1(char *var1,unsigned long)----"?Test1@@YGHPADK@Z"</P>
<P style="TEXT-INDENT: 2em;"   >&nbsp;&nbsp; void Test2()<A rel="nofollow" href="mailto:-----%C2%A1%C2%B0?Test2@@YGXXZ"   >-----“?Test2@@YGXXZ</A>”</P>
<P style="TEXT-INDENT: 2em;"   >__cdecl调用约定：<BR>规则同上面的_stdcall调用约定，只是参数表的开始标识由上面的"@@YG"变为"@@YA"。<BR>__fastcall调用约定：<BR>规则同上面的_stdcall调用约定，只是参数表的开始标识由上面的"@@YG"变为"@@YI"。<BR>VC++对函数的省缺声明是"__cedcl",将只能被C/C++调用.</P>
<P style="TEXT-INDENT: 2em;"   ><BR>注意：<BR>1、_beginthread需要__cdecl的线程函数地址，_beginthreadex和CreateThread需要__stdcall的线程函数地址。</P>
<P style="TEXT-INDENT: 2em;"   >2、一般WIN32的函数都是__stdcall。而且在Windef.h中有如下的定义：<BR>#define CALLBACK __stdcall<BR>#define WINAPI　 __stdcall<BR>C++和C的缺省约定是__cdecl。</P>
<P style="TEXT-INDENT: 2em;"   >3、extern "C" _declspec(dllexport) int __cdecl Add(int a, int b);<BR>&nbsp;&nbsp;&nbsp; typedef int (__cdecl*FunPointer)(int a, int b);<BR>&nbsp;&nbsp;&nbsp; 修饰符的书写顺序如上。</P>
<P style="TEXT-INDENT: 2em;"   >4、extern "C"的作用：如果Add(int a, int b)是在c语言编译器编译，而在c++文件使用，则需要在c++文件中声明：extern "C" Add(int a, int b)，因为c编译器和c++编译器对函数名的解释不一样（c++编译器解释函数名的时候要考虑函数参数，这样是了方便函数重载，而在c语言中不存在函数重载的问题），使用extern "C"，实质就是告诉c++编译器，该函数是c库里面的函数。如果不使用extern "C"则会出现链接错误。<BR>一般象如下使用：<BR>#ifdef _cplusplus<BR>#define EXTERN_C extern "C"<BR>#else<BR>#define EXTERN_C extern<BR>#endif</P>
<P style="TEXT-INDENT: 2em;"   >#ifdef _cplusplus<BR>extern "C"{<BR>#endif<BR>EXTERN_C int func(int a, int b);<BR>#ifdef _cplusplus<BR>}<BR>#endif</P>
<P style="TEXT-INDENT: 2em;"   >5、MFC提供了一些宏，可以使用AFX_EXT_CLASS来代替__declspec(DLLexport)，并修饰类名，从而导出类，AFX_API_EXPORT来修饰函数，AFX_DATA_EXPORT来修饰变量<BR>AFX_CLASS_IMPORT：__declspec(DLLexport)<BR>AFX_API_IMPORT：__declspec(DLLexport)<BR>AFX_DATA_IMPORT：__declspec(DLLexport)<BR>AFX_CLASS_EXPORT：__declspec(DLLexport)<BR>AFX_API_EXPORT：__declspec(DLLexport)<BR>AFX_DATA_EXPORT：__declspec(DLLexport)<BR>AFX_EXT_CLASS：#ifdef _AFXEXT<BR>&nbsp;&nbsp;&nbsp; AFX_CLASS_EXPORT<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #else<BR>&nbsp;&nbsp;&nbsp; AFX_CLASS_IMPORT</P>
<P style="TEXT-INDENT: 2em;"   >6、DLLMain负责初始化(Initialization)和结束(Termination)工作，每当一个新的进程或者该进程的新的线程访问DLL时，或者访问DLL的每一个进程或者线程不再使用DLL或者结束时，都会调用DLLMain。但是，使用TerminateProcess或TerminateThread结束进程或者线程，不会调用DLLMain。</P>
<P style="TEXT-INDENT: 2em;"   >7、一个DLL在内存中只有一个实例<BR>DLL程序和调用其输出函数的程序的关系：<BR>1)、DLL与进程、线程之间的关系<BR>DLL模块被映射到调用它的进程的虚拟地址空间。<BR>DLL使用的内存从调用进程的虚拟地址空间分配，只能被该进程的线程所访问。<BR>DLL的句柄可以被调用进程使用；调用进程的句柄可以被DLL使用。<BR>DLLDLL可以有自己的数据段，但没有自己的堆栈，使用调用进程的栈，与调用它的应用程序相同的堆栈模式。</P>
<P style="TEXT-INDENT: 2em;"   >2)、关于共享数据段<BR>DLL定义的全局变量可以被调用进程访问；DLL可以访问调用进程的全局数据。使用同一DLL的每一个进程都有自己的DLL全局变量实例。如果多个线程并发访问同一变量，则需要使用同步机制；对一个DLL的变量，如果希望每个使用DLL的线程都有自己的值，则应该使用线程局部存储(TLS，Thread Local Strorage)。</P>
</body></html>