<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转] (7) Openssl 之BIO</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转] (7) Openssl 之BIO</h2>
<p align="right">发布时间：2010-4-5 11:57
<br>分类名称：OpenSSL</p><br>
抽象IO<br>openssl抽象IO<br>openssl抽象IO(I/O abstraction，即BIO)是openssl对于io类型的抽象封装，包括：内存、文件、日志、标准输入输出、socket（TCP/UDP）、加/解密、摘要和ssl通道等。Openssl BIO通过回调函数为用户隐藏了底层实现细节，所有类型的bio的调用大体上是类似的。Bio中的数据能从一个BIO传送到另外一个BIO或者是应用程序。<br>数据结构<br>BIO数据结构主要有2个，在crypto/bio.h中定义如下：<br>1) BIO_METHOD<br>typedef struct bio_method_st<br>{<br> int type;<br> const char *name;<br> int (*bwrite)(BIO *, const char *, int);<br> int (*bread)(BIO *, char *, int);<br> int (*bputs)(BIO *, const char *);<br> int (*bgets)(BIO *, char *, int);<br> long (*ctrl)(BIO *, int, long, void *);<br> int (*create)(BIO *);<br> int (*destroy)(BIO *);<br> long (*callback_ctrl)(BIO *, int, bio_info_cb *);<br>} BIO_METHOD;<br>该结构定义了IO操作的各种回调函数，根据需要，具体的bio类型必须实现其中的一种或多种回调函数，各项意义如下：<br>type：具体BIO类型；<br>name：具体BIO的名字；<br>bwrite：具体BIO写操作回调函数；<br>bread：具体BIO读操作回调函数；<br>bputs：具体BIO中写入字符串回调函数；<br>bgets：具体BIO中读取字符串函数；<br>ctrl：具体BIO的控制回调函数；<br>create：生成具体BIO回调函数；<br>destroy：销毁具体BIO回调函数；<br>callback_ctrl：具体BIO控制回调函数，与ctrl回调函数不一样，该函数可由调用者（而不是实现者）来实现，然后通过BIO_set_callback等函数来设置。<br><br>2) BIO<br>struct bio_st<br>{<br> BIO_METHOD *method;<br> /* bio, mode, argp, argi, argl, ret */<br> long (*callback)(struct bio_st *,int,const char *,int, long,long);<br> char *cb_arg; /* first argument for the callback */<br> int init;<br> int shutdown;<br> int flags; /* extra storage */<br> int retry_reason;<br> int num;<br> void *ptr;<br> struct bio_st *next_bio; /* used by filter BIOs */<br> struct bio_st *prev_bio; /* used by filter BIOs */<br> int references;<br> nsigned long num_read;<br> unsigned long num_write;<br> CRYPTO_EX_DA<wbr>TA ex_da<wbr>ta;<br>}；<br>主要项含义：<br>init：具体句柄初始化标记，初始化后为1。比如文件BIO中，通过BIO_set_fp关联一个文件指针时，该标记则置1；socket BIO中通过BIO_set_fd关联一个链接时设置该标记为1。<br>shutdown：BIO关闭标记，当该值不为0时，释放资源；改值可以通过控制函数来设置。<br>flags：有些BIO实现需要它来控制各个函数的行为。比如文件BIO默认该值为BIO_FLAGS_UPLINK，这时文件读操作调用UP_fread函数而不是调用fread函数。<br>retry_reason：重试原因，主要用在socket和ssl BIO 的异步阻塞。比如socket bio中，遇到WSAEWOULDBLOCK错误时，openssl告诉用户的操作需要重试。<br>num：该值因具体BIO而异，比如socket BIO中num用来存放链接字。<br>ptr：指针，具体bio有不同含义。比如文件BIO中它用来存放文件句柄；mem bio中它用来存放内存地址；connect bio中它用来存放BIO_CONNECT数据，accept bio中它用来存放BIO_ACCEPT数据。<br>next_bio：下一个BIO地址，BIO数据可以从一个BIO传送到另一个BIO，该值指明了下一个BIO的地址。<br>references：被引用数量。<br>num_read：BIO中已读取的字节数。<br>num_write：BIO中已写入的字节数。<br>ex_da<wbr>ta：用于存放额外数据。<br><br>BIO 函数<br>BIO各个函数定义在crypto/bio.h中。所有的函数都由BIO_METHOD中的回调函数来实现。函数主要分为几类：<br>1) 具体BIO相关函数<br>比如：BIO_new_file（生成新文件）和BIO_get_fd（设置网络链接）等。<br>2) 通用抽象函数<br>比如BIO_read和BIO_write等。<br><p>另外，有很多函数是由宏定义通过控制函数BIO_ctrl实现，比如BIO_set_nbio、BIO_get_fd和BIO_eof等等。<br></p><p>编程示例<br>1) mem bio<br>#include &lt;stdio.h&gt;<br>#include &lt;openssl/bio.h&gt;<br><br>int main()<br>{<br> BIO *b=NULL;<br> int len=0;<br> char *out=NULL;<br><br> b=BIO_new(BIO_s_mem());<br> len=BIO_write(b,"openssl",4);<br> len=BIO_printf(b,"%s","zcp");<br> len=BIO_ctrl_pending(b);<br> out=(char *)OPENSSL_malloc(len);<br> len=BIO_read(b,out,len);<br> OPENSSL_free(out);<br> BIO_free(b);<br> return 0;<br>}<br><br>说明：<br> b=BIO_new(BIO_s_mem());生成一个mem类型的BIO。<br> len=BIO_write(b,"openssl",7);将字符串"openssl"写入bio。<br> len=BIO_printf(b,"bio test",8);将字符串"bio test"写入bio。<br> len=BIO_ctrl_pending(b);得到缓冲区中待读取大小。<br> len=BIO_read(b,out,50);将bio中的内容写入out缓冲区。<br> <br>2)file bio<br>#include &lt;stdio.h&gt;<br>#include &lt;openssl/bio.h&gt;<br><br>int main()<br>{<br> BIO *b=NULL;<br> int len=0,outlen=0;<br> char *out=NULL;<br><br> b=BIO_new_file("bf.txt","w");<br> len=BIO_write(b,"openssl",4);<br> len=BIO_printf(b,"%s","zcp");<br> BIO_free(b); <br> b=BIO_new_file("bf.txt","r");<br> len=BIO_pending(b);<br> len=50;<br> out=(char *)OPENSSL_malloc(len);<br> len=1;<br> while(len&gt;0)<br> { <br> len=BIO_read(b,out+outlen,1);<br> outlen+=len;<br> }<br> BIO_free(b);<br> free(out);<br> return 0;<br>}<br><br>3)socket bio<br>服务端：<br>#include &lt;stdio.h&gt;<br>#include &lt;openssl/bio.h&gt;<br>#include &lt;string.h&gt;<br><br>int main()<br>{<br> BIO *b=NULL,*c=NULL;<br> int sock,ret,len;<br> char *addr=NULL;<br> char out[80];<br><br> sock=BIO_get_accept_socket("2323",0);<br> b=BIO_new_socket(sock, BIO_NOCLOSE);<br> ret=BIO_accept(sock,&amp;addr);<br> BIO_set_fd(b,ret,BIO_NOCLOSE);<br> while(1)<br> {<br> memset(out,0,80);<br> len=BIO_read(b,out,80);<br> <br> break;<br> printf("%s",out);<br> }<br> BIO_free(b);<br> return 0;<br>}<br>客户端telnet此端口成功后，输入字符，服务端会显示出来(linux下需要输入回车)。<br><br>客户端：<br>#include &lt;openssl/bio.h&gt;<br>int main()<br>{<br> BIO *cbio, *out;<br> int len;<br> char tmpbuf[1024];<br><br> cbio = BIO_new_connect("localhost:http");<br> out = BIO_new_fp(stdout, BIO_NOCLOSE);<br>  &lt;= 0) <br> {<br> fprintf(stderr, "Error connecting to server\n");<br> }<br> BIO_puts(cbio, "GET / HTTP/1.0\n\n");<br> for(;;) <br> {<br> len = BIO_read(cbio, tmpbuf, 1024);<br>  break;<br> BIO_write(out, tmpbuf, len);<br> }<br> BIO_free(cbio);<br> BIO_free(out);<br> return 0;<br>}<br>说明：本示例用来获取本机的web服务信息。<br> cbio = BIO_new_connect("localhost:http");用来生成建立连接到本地web服务的BIO。<br> out = BIO_new_fp(stdout, BIO_NOCLOSE);生成一个输出到屏幕的BIO。<br> BIO_puts(cbio, "GET / HTTP/1.0\n\n");通过BIO发送数据。<br> len = BIO_read(cbio, tmpbuf, 1024);将web服务响应的数据写入缓存,此函数循环调用<br> 直到无数据。<br> BIO_write(out, tmpbuf, len);通过BIO打印收到的数据。<br><br>4) md BIO<br>#include &lt;openssl/bio.h&gt;<br>#include &lt;openssl/evp.h&gt;<br><br>int main()<br>{<br> BIO *bmd=NULL,*b=NULL;<br> const EVP_MD *md=EVP_md5();<br> int len;<br> char tmp[1024];<br><br> bmd=BIO_new(BIO_f_md());<br> BIO_set_md(bmd,md);<br> b= BIO_new(BIO_s_null());<br> b=BIO_push(bmd,b);<br> len=BIO_write(b,"openssl",7);<br> len=BIO_gets(b,tmp,1024);<br> BIO_free(b);<br> return 0;<br>}<br>说明：本示例用md BIO对字符串"opessl"进行md5摘要。<br> bmd=BIO_new(BIO_f_md());生成一个md BIO。<br> BIO_set_md(bmd,md);设置md BIO 为md5 BIO。<br> b= BIO_new(BIO_s_null());生成一个null BIO。<br> b=BIO_push(bmd,b);构造BIO 链,md5 BIO在顶部。<br> len=BIO_write(b,"openssl",7);将字符串送入BIO做摘要。<br> len=BIO_gets(b,tmp,1024);将摘要结果写入tmp缓冲区。<br><br>5)cipher BIO<br>#include &lt;string.h&gt;<br>#include &lt;openssl/bio.h&gt;<br>#include &lt;openssl/evp.h&gt;<br><br>int main()<br>{<br> /* 加密 */<br> BIO *bc=NULL,*b=NULL;<br> const EVP_CIPHER *c=EVP_des_ecb();<br> int len,i;<br> char tmp[1024];<br> unsigned char key[8],iv[8];<br><br> for(i=0;i&lt;8;i++)<br> {<br> memset(&amp;key[i],i+1,1);<br> memset(&amp;iv[i],i+1,1);<br> }<br><br> bc=BIO_new(BIO_f_cipher());<br> BIO_set_cipher(bc,c,key,iv,1);<br> b= BIO_new(BIO_s_null());<br> b=BIO_push(bc,b);<br> len=BIO_write(b,"openssl",7);<br> len=BIO_read(b,tmp,1024);<br> BIO_free(b);<br><br> /* 解密 */<br> BIO *bdec=NULL,*bd=NULL;<br> const EVP_CIPHER *cd=EVP_des_ecb();<br><br> bdec=BIO_new(BIO_f_cipher());<br> BIO_set_cipher(bdec,cd,key,iv,0);<br> bd= BIO_new(BIO_s_null());<br> bd=BIO_push(bdec,bd);<br> len=BIO_write(bdec,tmp,len);<br> len=BIO_read(bdec,tmp,1024);<br> BIO_free(bdec);<br> return 0;<br>}<br>说明：本示例采用cipher BIO对字符串"openssl"进行加密和解密,本示例编译需要用c++编译器;<br>关键说明:<br> BIO_set_cipher(bc,c,key,iv,1);设置加密BI。<br> BIO_set_cipher(bdec,cd,key,iv,0);设置解密BIO。<br> 其中key为对称密钥,iv为初始化向量。<br> 加/解密结果通过BIO_read获取。<br><br>6) ssl BIO<br>#include &lt;openssl/bio.h&gt;<br>#include &lt;openssl/ssl.h&gt;<br><br> int main()<br>{<br> BIO *sbio, *out;<br> int len;<br> char tmpbuf[1024];<br> SSL_CTX *ctx;<br> SSL *ssl;<br><br> SSLeay_add_ssl_algorithms();<br> OpenSSL_add_all_algorithms();<br> ctx = SSL_CTX_new(SSLv3_client_method());<br> sbio = BIO_new_ssl_connect(ctx);<br> BIO_get_ssl(sbio, &amp;ssl);<br> <br> {<br> fprintf(stderr, "Can not locate SSL pointer\n");<br> return 0;<br> }<br> SSL_set_mode(ssl, SSL_MODE_AUTO_RETRY);<br> BIO_set_conn_hostname(sbio, "mybank.icbc.com.cn:https");<br> out = BIO_new_fp(stdout, BIO_NOCLOSE);<br> BIO_printf(out,”链接中….\n”);<br>  &lt;= 0)<br> {<br> fprintf(stderr, "Error connecting to server\n");<br> return 0;<br> }<br>  &lt;= 0)<br> {<br> fprintf(stderr, "Error establishing SSL connection\n");<br> return 0;<br> }<br> BIO_puts(sbio, "GET / HTTP/1.0\n\n");<br> for(;;) <br> {<br> len = BIO_read(sbio, tmpbuf, 1024);<br>  break;<br> BIO_write(out, tmpbuf, len);<br> }<br> BIO_free_all(sbio);<br> BIO_free(out);<br> return 0;<br>}<br>本函数用ssl bio来链接mybank.icbc.com.cn的https服务，并请求首页文件。其中SSLeay_add_ssl_algorithms和OpenSSL_add_all_algorithms函数必不可少，否则不能找到ssl加密套件并且不能找到各种算法。<br><br>7) 其他示例<br>#include &lt;openssl/bio.h&gt;<br>#include &lt;openssl/asn1.h&gt;<br> int main()<br>{<br> int ret,len,indent;<br> BIO *bp;<br> char *pp,buf[5000];<br> FILE *fp;<br><br> bp=BIO_new(BIO_s_file());<br> BIO_set_fp(bp,stdout,BIO_NOCLOSE);<br> fp=fopen("der.cer","rb");<br> len=fread(buf,1,5000,fp);<br> fclose(fp);<br> pp=buf;<br> indent=5;<br> ret=BIO_dump_indent(bp,pp,len,indent);<br> BIO_free(bp);<br> return 0;<br>}<br><br></p>
</body></html>