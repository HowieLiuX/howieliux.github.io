<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：一.保护方式简介</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>一.保护方式简介</h2>
<p align="right">发布时间：2012-5-20 16:43
<br>分类名称：80x86保护模式</p><br>
<p><span style="color:black; font-size:9pt;"  ><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >有三种工作方式</span><span style="font-family:Times New Roman;"  >:</span><span style="font-family:宋体;"  >实模式</span><span style="font-family:Times New Roman;"  >,</span><span style="font-family:宋体;"  >保护模式和虚拟</span><span style="font-family:Times New Roman;"  >8086</span><span style="font-family:宋体;"  >模式。本文介绍保护方式下的</span><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >及相关的程序设计</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >内容。实模式下的</span><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >寄存器，寻址方式和指令等基本概念，除特别说明外在保护方式下仍然保持。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >尽管实方式下</span><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >的功能要大大超过其先前的处理器</span><span style="font-family:Times New Roman;"  >(8086/8088,80186,80286)</span><span style="font-family:宋体;"  >，但只有在保护方式下，</span><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >才能真正发挥更大的作用。在保护方式下，全部</span><span style="font-family:Times New Roman;"  >32</span><span style="font-family:宋体;"  >条地址线有效，可寻址高达</span><span style="font-family:Times New Roman;"  >4G</span><span style="font-family:宋体;"  >字节的物理地址空</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >间</span><span style="font-family:Times New Roman;"  >;</span><span style="font-family:宋体;"  >扩充的存储器分段管理机制和可选的存储器分页管理机制，不仅为存储器共享和保护提供了硬件支持</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >，而且为实现虚拟存储器提供了硬件支持</span><span style="font-family:Times New Roman;"  >;</span><span style="font-family:宋体;"  >支持多任务，能够快速地进行任务切换和保护任务环境</span><span style="font-family:Times New Roman;"  >;4</span><span style="font-family:宋体;"  >个特</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >权级和完善的特权检查机制，既能实现资源共享又能保证代码和数据的安全和保密及任务的隔离</span><span style="font-family:Times New Roman;"  >;</span><span style="font-family:宋体;"  >支持虚</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >拟</span><span style="font-family:Times New Roman;"  >8086</span><span style="font-family:宋体;"  >方式，便于执行</span><span style="font-family:Times New Roman;"  >8086</span><span style="font-family:宋体;"  >程序。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:red; font-family:Batang; font-size:18pt;"  ><strong>&lt;一&gt;存储管理机制 </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >为了对存储器中的程序及数据实现保护和共享提供硬件支持，为了对实现虚拟存储器提供硬件支持，在</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >保护方式下</span><span style="font-family:Times New Roman;"  >,80386</span><span style="font-family:宋体;"  >不仅采用扩充的存储器分段管理机制，而且提供可选的存储器分页管理机制。这些存</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >储管理机制由</span><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >存储管理部件</span><span style="font-family:Times New Roman;"  >MMU</span><span style="font-family:宋体;"  >实现。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:red; font-family:Batang; font-size:13pt;"  ><strong>1.目标 </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >有</span><span style="font-family:Times New Roman;"  >32</span><span style="font-family:宋体;"  >根地址线，在保护方式下，它们都能发挥作用，所以可寻址的物理地址空间高达</span><span style="font-family:Times New Roman;"  >4G</span><span style="font-family:宋体;"  >字节。在</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >以</span><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >及其以上处理器为</span><span style="font-family:Times New Roman;"  >CPU</span><span style="font-family:宋体;"  >的</span><span style="font-family:Times New Roman;"  >PC</span><span style="font-family:宋体;"  >兼容机系统中，把地址在</span><span style="font-family:Times New Roman;"  >1M</span><span style="font-family:宋体;"  >以下的内存称为常规内存，把地址在</span><span style="font-family:Times New Roman;"  >1M</span><span style="font-family:宋体;"  >以上的内存称为扩展内存。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >还要对实现虚拟存储器提供支持。虽然与</span><span style="font-family:Times New Roman;"  >8086</span><span style="font-family:宋体;"  >可寻址的</span><span style="font-family:Times New Roman;"  >1M</span><span style="font-family:宋体;"  >字节物理地址空间相比，</span><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >可寻址的</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >物理地址空间可谓很大，但实际的微机系统不可能安装如此达的物理内存。所以，为了运行大型程序和</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >真正实现多任务，必须采用虚拟存储器。虚拟存储器是一种软硬件结合的技术，用于提供比在计算机系</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >统中实际可以使用的物理主存储器大得多的存储空间。这样，程序员在编写程序时不用考虑计算机中物</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >理存储器的实际容量。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >还要对存放在存储器中的代码及数据的共享和保护提供支持。任务甲和任务乙并存，任务甲和任务</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >乙必须隔离，以免相互影响。但它们又可能要共享部分代码和数据。所以，</span><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >既要支持任务隔离，又</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >要支持可共享代码和数据的共享，还要支持特权保护。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:red; font-family:Batang; font-size:13pt;"  ><strong>2.地址空间和地址转换 </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >保护方式下的虚拟存储器由大小可变的存储块构成，这样的存储块称为段。</span><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >采用称为描述符的数据</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >来描述段的位置、大小和使用情况。虚拟存储器的地址</span><span style="font-family:Times New Roman;"  >(</span><span style="font-family:宋体;"  >逻辑地址</span><span style="font-family:Times New Roman;"  >)</span><span style="font-family:宋体;"  >由指示描述符的选择子和段内偏移两部</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >分构成，这样的地址集合称为虚拟地址空间。</span><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >支持的虚拟地址空间可达</span><span style="font-family:Times New Roman;"  >64T</span><span style="font-family:宋体;"  >字节。程序员编写程序时</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >使用的存储地址空间是虚拟地址空间，所以，他们可认为有足够大的存储空间可供使用。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >显然，只有在物理存储器中的程序才能运行，只有在物理存储器中的数据才能访问。因此，虚拟地址空间</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >必须映射到物理地址空间，二维的虚拟地址必须转化成一维的物理地址。由于物理地址空间远小于虚拟地</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >址空间，所以只有虚拟地址空间中的部分可以映射到物理地址空间。由于物理存储器的大小要远小于物理</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >地址空间，所以只有上述部分中的部分才能真正映射到物理存储器。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >每一个任务有一个虚拟地址空间。为了避免多个并行任务的多个虚拟地址空间直接映射到同一个物理地址</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >空间，采用线性地址空间隔离虚拟地址空间和物理地址空间。线性地址空间由一维的线性地址构成，线性</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >地址空间和物理地址空间对等。线性地址</span><span style="font-family:Times New Roman;"  >32</span><span style="font-family:宋体;"  >位长，线性地址空间容量为</span><span style="font-family:Times New Roman;"  >4G</span><span style="font-family:宋体;"  >字节。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >分两步实现虚拟地址空间到物理地址空间到物理地址空间的映射，也就是分两步实现虚拟地址到物</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >理地址的转换，但第二步是可选的。下图是地址映射转换的示意图。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p style="text-align: center;"  ><img title="一.保护方式简介 - Howie - Dspace"  src="pic/img4.ph.126.net_2tDxl6ablUCS2R036Yrwyw==_2799550118381702784.jpg"  alt=""  /><span style="color:black; font-family:Times New Roman; font-size:9pt;"  >   </span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >通过描述符表和描述符，分段管理机制实现虚拟地址空间到线性地址空间的映射，实现把二维的虚拟地</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >址转换为一维的线性地址。这一步总是存在的。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >分页管理机制把线性地址空间和物理地址空间分别划分为大小相同的块，这样的块称为页。通过在线性地</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >址空间的页与物理地址空间的页建立之间建立的映射表，分页管理机制实现线性地址空间到物理地址空间</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >的映射，实现线性地址到物理地址的转换。分页管理机制是可选的，在不采用分页管理机制时，线性地址</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >空间就等同于物理地址空间，线性地址就等于物理地址。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >分段管理机制所使用的可变大小的块，时分段管理机制比较适宜处理复杂系统的逻辑分段。存储块的大小</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >可以根据适当的逻辑含义进行定义，而不用考虑固定大小的页所强加的人为限制。每个段可作为独立的单</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >位处理，以简化段的保护及共享。分页机制使用的固定大小的块最适合于管理物理存储器，无论是管理内</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >存还是外存都同样有效。分页管理机制能够有效地支持实现虚拟存储器。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >段及分页这两种机制是两种不同的转换机制，是整个地址转换函数的不同的转换级。虽然两种机制都利用</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >存储在主存储器中的转换表，但这些表具有独立的结构。事实上，段表存储在线性地址空间，而页表存储</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >在物理地址空间。因此，段转换表可由分页机制重新进行定位而不需段机制的参与。段转换机制把虚拟地</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >址转换为线性地址，并在线性地址中访问段转换机制的表格，而不会觉察分页机制已把线性地址转换为物</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >理地址。类似地，分页机制对于程序产生的地址所使用的虚拟地址空间一无所知。分页机制只是直接地把</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >线性地址转换为物理地址，并且在物理地址中访问转换表格，并不知道虚拟地址空间的存在，甚至不知道</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >段转换机制的存在。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:red; font-family:Batang; font-size:13pt;"  ><strong>3.虚拟存储器概念 </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >虚拟存储器是一种设计技术，用于提供比在计算机系统中实际可以使用的物理主存储器大得多的存储空</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >间。使用者会产生一种错觉，好象在程序中可以使用非常大的物理存储空间。使用虚拟存储器的好处是：</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >一个程序可以很容易地在物理存储器容量大不一样的、配置范围很广的计算机上运行；编程人员使用虚拟</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >存储器可以写出比任何实际配置的物理存储器都大得多的程序。虚拟存储器由存储管理机制及一个大容量</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >的快速硬盘存储器支持。在程序运行的任何时刻，只把虚拟地址空间的一小部分映射到主存储器，其余部</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >分则存储在磁盘上。因为只有存储在主存储器中的部分虚拟存储器可由处理器使用，这种虚拟存储技术将</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >依赖程序内部访问存储器的局部化特性，在程序执行中只需整个虚拟存储器中的少量存储内容在主存储器</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >中驻留。而当访问存储器的范围发生变化时，有必要把虚拟存储器的某些部分从磁盘调入主存储器，虚拟</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >存储器的另外的部分，也能从主存储器传送回磁盘上。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >地址转换机制以两种方式支持虚拟存储器。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >第一，把实际驻留在主存储器中的那部分虚拟存储器标记为无效，并建立起虚拟存储器驻留部分的虚拟</span><span style="font-family:Times New Roman;"  >--</span><span style="font-family:宋体;"  >物理映射关系，把驻留部分的相应虚拟存储器地址，转换为对应物理存储器的地址。如果程序访问的虚拟</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >地址对应于虚拟存储器未驻留的部分，将由于无效映射信息而引起异常。操作系统通过把未驻留部分从磁</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >盘上读入到主存储器中，来处理这种异常，并根据需要更新地址转换表。在引起异常的原因排除以后，异</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >常处理程序完成异常事件的处理，并返回原来的程序恢复执行。在后面的文章中将会看到，从异常处理程</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >序返回后，这时要重新执行一次原来引起异常的指令，而该指令在后一次执行时自然会成功地完成。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >第二，地址转换机制通过收集驻留在主存储器中的虚拟存储器部分的使用统计信息来支持虚拟存储器，这</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >些使用统计信息，在主存储器空间紧缺时，帮助操作系统决定可以将哪些部分传送回磁盘。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:red; font-family:Batang; font-size:18pt;"  ><strong>&lt;二&gt;保护机制 </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >为了支持多任务，对各任务实施保护是必需的。从</span><span style="font-family:Times New Roman;"  >80286</span><span style="font-family:宋体;"  >开始，处理器就具备了保护机制。保护机制能有</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >效地实现不同任务之间的保护和同一任务内的保护。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:red; font-family:Batang; font-size:13pt;"  ><strong>1.不同任务之间的保护 </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >保护的一个重要方面是应用程序之间的保护。通过把每个任务放置在不同的虚拟地址空间的方法来实现任</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >务与任务的隔离，达到应用程序之间保护的目的。虚拟地址到物理地址的映射函数在每个任务中进行定</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >义，随着任务切换，映射函数也切换。任务</span><span style="font-family:Times New Roman;"  >A</span><span style="font-family:宋体;"  >的虚拟地址空间映射到物理地址空间的某个区域，而任务</span><span style="font-family:Times New Roman;"  >B</span><span style="font-family:宋体;"  >的</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >虚拟地址空间映射到物理地址空间的另外区域，彼此独立，互不相干。因此，两个不同的任务，尽管虚拟</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >存储单元地址相同，但实际的物理存储单元地址可以不同。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >每个任务各有一组独立的映射表，即具有不同的地址转换函数。在</span><span style="font-family:Times New Roman;"  >80386</span><span style="font-family:宋体;"  >上，每个任务都有自己的段表及</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >页表。当处理器进行切换并执行新的任务时，这种任务切换的一个重要部分，就是为新任务切换任务的转</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >换表。为了使操作系统与所有的应用程序相隔离，可以把操作系统存储在一个单一的任务中。然而，我们</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >即将看到，在一个任务内操作的保护机制，更适合于保护操作系统，使其不被应用程序破坏。这种机制，</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >使操作系统由所有任务共享，并且可在每一任务中对其进行访问，而且仍然保护了操作系统，使其不被应</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >用程序破坏。这种保护操作系统的方法，是把操作系统存储在虚拟地址空间的一个公共区域，然后，再使</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >每一任务按此区域分配一个同样的虚拟地址空间，并进行同样的虚拟</span><span style="font-family:Times New Roman;"  >--</span><span style="font-family:宋体;"  >物理地址映射。各个任务公用的这</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >部分虚拟地址空间，被称为全局地址空间。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >仅由一个任务占有的虚拟地址空间部分，即不被任何其它任务共享的虚拟地址部分，称为局部地址空间。</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >局部地址空间包含的代码和数据，是任务私有的，需要与系统中的其它任务相隔离。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >再每个任务中有不同的局部地址空间。因此，两个不同的任务中，对同一虚拟地址的访问，实际上转换为</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >不同的物理地址。这就使操作系统对每个任务的存储器，可以赋予相同的虚拟地址，仍然保证任务的隔</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >离。另一方面，对全局地址空间中同一虚拟地址的访问，在所有任务中都转换为同样的物理地址，从而支</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >持公共的代码及数据的共享，例如对操作系统的共享。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:red; font-family:Batang; font-size:13pt;"  ><strong>2.同一任务内的保护 </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >在一个任务之内，定义有四种执行特权级别，用于限制对任务中的段进行访问。按照包含在段中的数据的</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >重要性和代码的可信程度，给段指定特权级别。把最高的特权级别分配给最重要的数据段和最可信任的代</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >码段。具有最高特权级别的数据，只能由最可信任的代码访问。给不重要的数据段和一般代码段分配较低</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >的特权级别。具有最低特权级别的数据，可被具有任何特权级别的代码访问。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >特权级别用数字</span><span style="font-family:Times New Roman;"  >0</span><span style="font-family:宋体;"  >、</span><span style="font-family:Times New Roman;"  >1</span><span style="font-family:宋体;"  >、</span><span style="font-family:Times New Roman;"  >2</span><span style="font-family:宋体;"  >和</span><span style="font-family:Times New Roman;"  >3</span><span style="font-family:宋体;"  >表示，数字</span><span style="font-family:Times New Roman;"  >0</span><span style="font-family:宋体;"  >表示最高特权级别，而数字</span><span style="font-family:Times New Roman;"  >3</span><span style="font-family:宋体;"  >表示最低特权级别，即数字较大的级</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >别具有较低的特权。为了避免模糊和混淆，在比较特权级别时，不使用</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >大于</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >或</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >小于</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >这样的术语，</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >而使用</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >里面</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >或</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >内层</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >这样的术语表示较高特权级，级别的数字较小；使用</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >外面</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >或</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >外层</span><span style="font-family:Times New Roman;"  >"</span><span style="font-family:宋体;"  >这样</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >的术语表示较低特权级别，级别的数字较大。</span><span style="font-family:Times New Roman;"  >0</span><span style="font-family:宋体;"  >级为最内层的特权级别，</span><span style="font-family:Times New Roman;"  >3</span><span style="font-family:宋体;"  >级为最外层的特权级别，按这样</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >的表示方法，四种特权级的层次关系如下图</span><span style="font-family:Times New Roman;"  >(</span><span style="font-family:宋体;"  >图中右边的数字为特权级</span><span style="font-family:Times New Roman;"  >)</span><span style="font-family:宋体;"  >所示。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p style="text-align: center;"  ><img title="一.保护方式简介 - Howie - Dspace"  src="pic/img6.ph.126.net_uyl76chQ7yo0tm4El2ONbQ==_1007117466688267286.jpg"  alt=""  /><span style="color:black; font-family:Times New Roman; font-size:9pt;"  >   </span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >每一特权级都有各自独立的程序堆栈，以避免与共享栈区有关的保护问题。当一个程序从一个特权级切换</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >到另一个特权级执行时，程序使用的堆栈，从原特权级的栈段改变为新特权级的栈段。对于堆栈段寄存器</span><span style="font-family:Times New Roman;"  >SS</span><span style="font-family:宋体;"  >来说，描述符特权级</span><span style="font-family:Times New Roman;"  >(DPL)</span><span style="font-family:宋体;"  >必须等于当前代码段的特权级</span><span style="font-family:Times New Roman;"  >(CPL)</span><span style="font-family:宋体;"  >。从一个特权级切换到另一特权级的方法</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >将在控制转移方法一文中描述。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >每个存储器段都与一个特权级别相联系。特权级别限制是指，只有足够级别的程序，才可对相应的段进行</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >访问。在任何时候，一个任务总是在四个特权级之一下运行，任务在特定时刻的特权级称为当前特权级</span><span style="font-family:Times New Roman;"  >(Current Privilege level)</span><span style="font-family:宋体;"  >，标记为</span><span style="font-family:Times New Roman;"  >CPL</span><span style="font-family:宋体;"  >，即当前运行程序的特权级。每当一个程序试图访问一个段时，</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >就把</span><span style="font-family:Times New Roman;"  >CPL</span><span style="font-family:宋体;"  >与要访问的段的特权级进行比较，以决定是否允许这一访问。对给定</span><span style="font-family:Times New Roman;"  >CPL</span><span style="font-family:宋体;"  >执行的程序，允许访问同</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >一级别或外层级别的数据段。如上图所示，</span><span style="font-family:Times New Roman;"  >CodeK</span><span style="font-family:宋体;"  >可访问同级的数据段</span><span style="font-family:Times New Roman;"  >DataK</span><span style="font-family:宋体;"  >，也可访问外层的</span><span style="font-family:Times New Roman;"  >DataOS</span><span style="font-family:宋体;"  >、</span><span style="font-family:Times New Roman;"  >DataAP1</span><span style="font-family:宋体;"  >及</span><span style="font-family:Times New Roman;"  >DataAP2</span><span style="font-family:宋体;"  >等。如果试图访问内层级别的数据段则是非法的，并引起异常。如上图所示，</span><span style="font-family:Times New Roman;"  >CodeOS</span><span style="font-family:宋体;"  >可</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >访问同级的</span><span style="font-family:Times New Roman;"  >DataOS</span><span style="font-family:宋体;"  >，也可访问外层的</span><span style="font-family:Times New Roman;"  >DataAP1</span><span style="font-family:宋体;"  >和</span><span style="font-family:Times New Roman;"  >DataAP2</span><span style="font-family:宋体;"  >等，但不能访问内层的</span><span style="font-family:Times New Roman;"  >DataK</span><span style="font-family:宋体;"  >。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >虽然应用程序都在最外层，但由于各个不同的应用程序存储在不同的虚拟地址空间中，所以各应用程序被</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >隔离保护。如上图所示，最外层的</span><span style="font-family:Times New Roman;"  >CodeAP1</span><span style="font-family:宋体;"  >只能访问</span><span style="font-family:Times New Roman;"  >DataAP1</span><span style="font-family:宋体;"  >，不可能访问同级的另一应用程序的</span><span style="font-family:Times New Roman;"  >DataAP2</span><span style="font-family:宋体;"  >；同样，</span><span style="font-family:Times New Roman;"  >CodeAP2</span><span style="font-family:宋体;"  >只能访问</span><span style="font-family:Times New Roman;"  >DataAP2</span><span style="font-family:宋体;"  >，不可能访问</span><span style="font-family:Times New Roman;"  >DataAP1</span><span style="font-family:宋体;"  >。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >这实际上是组合保护。应用程序</span><span style="font-family:Times New Roman;"  >1</span><span style="font-family:宋体;"  >和操作系统构成任务</span><span style="font-family:Times New Roman;"  >A</span><span style="font-family:宋体;"  >，应用程序</span><span style="font-family:Times New Roman;"  >2</span><span style="font-family:宋体;"  >和操作系统构成任务</span><span style="font-family:Times New Roman;"  >B</span><span style="font-family:宋体;"  >。操作系统被任</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >务</span><span style="font-family:Times New Roman;"  >A</span><span style="font-family:宋体;"  >和任务</span><span style="font-family:Times New Roman;"  >B</span><span style="font-family:宋体;"  >共享，在任务</span><span style="font-family:Times New Roman;"  >A</span><span style="font-family:宋体;"  >和任务</span><span style="font-family:Times New Roman;"  >B</span><span style="font-family:宋体;"  >的两个不同的虚拟地址空间中，操作系统占用虚拟地址空间相同的部分。</span><span style="font-family:Times New Roman;"  >    </span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:宋体;"  >特权级的典型用法是，把操作系统的核心部分放在</span><span style="font-family:Times New Roman;"  >0</span><span style="font-family:宋体;"  >级，操作系统的其余部分放在</span><span style="font-family:Times New Roman;"  >1</span><span style="font-family:宋体;"  >级，而应用程序放在</span><span style="font-family:Times New Roman;"  >3</span><span style="font-family:宋体;"  >级，留下的</span><span style="font-family:Times New Roman;"  >2</span><span style="font-family:宋体;"  >级供中间软件使用。对特权级进行这样的安排，使得在</span><span style="font-family:Times New Roman;"  >0</span><span style="font-family:宋体;"  >级的操作系统核心有权访问任务中的</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >所有存储段；而在</span><span style="font-family:Times New Roman;"  >3</span><span style="font-family:宋体;"  >级的应用程序只能访问程序本身的存储段，这些存储段也是在</span><span style="font-family:Times New Roman;"  >3</span><span style="font-family:宋体;"  >级</span><span style="font-family:Times New Roman;"  >(</span><span style="font-family:宋体;"  >注意，</span><span style="font-family:Times New Roman;"  >Windows 9X</span><span style="font-family:宋体;"  >操作系统只使用了</span><span style="font-family:Times New Roman;"  >0</span><span style="font-family:宋体;"  >级和</span><span style="font-family:Times New Roman;"  >3</span><span style="font-family:宋体;"  >级，以便于移植到精简指令集的计算机上，如</span><span style="font-family:Times New Roman;"  >RS4000</span><span style="font-family:宋体;"  >等，这些处理器一般只有两</span><span style="font-family:Times New Roman;"  >    </span><span style="font-family:宋体;"  >个特权级，即系统级和用户级</span><span style="font-family:Times New Roman;"  >)</span><span style="font-family:宋体;"  >。</span></span></p>
</body></html>