<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：Scheduling, Thread Context and IRQL</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>Scheduling, Thread Context and IRQL</h2>
<p align="right">发布时间：2014-5-23 13:13
<br>分类名称：Driver</p><br>
<p>名词解释：
</p><p><strong>Schedule</strong><br>调度，线程被内核的调度器所调度，就是停止一个线程，运行另一个线程的过程。
</p><p><strong>Scheduler<br></strong>调度器，线程被来回切换，就是由调度器实现的，调度器运行在DISPATCH_LEVEL中断级别。<strong>
</strong></p><p><strong>Priority</strong><br>优先权，线程被内核的调度器调度时，会选择高具有优先权的线程，先让它运行。此属性针对的是某个线程。
</p><p><strong>pre-empted/preempt</strong><br>抢占，当前线程运行过程中，会被一个高优先级的线程抢占，高优先级的线程会获得更多的时间片。
</p><p><strong>Interrupt</strong><br>中断，中断是针对CPU（Processsor）的。
</p><p><strong>Suspend</strong><br>挂起，挂起某个线程，如果不调用恢复函数，线程无法继续运行。挂起的原理为给线程排队一个APC，在此APC上等待（KeWaitForSingleObject）一个信号量，进入Wait State。
</p><p><strong>Wait State</strong><br>等待状态，线程调用调用WaitForSingleObject，KeWaitForSingleObject等类型的函数，是自己变为等待状态。
</p><p><strong>调度，优先权，抢占</strong>是针对某个线程而已，而<strong>中断</strong>针对的是当前的CPU。
</p><p> 
&nbsp;</p><p>以下是微软的经典文章，在重要的地方，我用中文做了解释。
</p><p>A <strong>thread's scheduling priority</strong> and the <strong>processor's current IRQL</strong> determine whether a running thread can be <strong>pre-empted</strong> or <strong>interrupted</strong>. 
</p><p>下面说明了抢占和中断的区别之一：<br>抢占的表现形式为挂起一个线程，运行另一个线程，由于线程被切换，所以线程的上下文（Context）也随之切换。<br>而中断表现形式则是还是当前线程，不会切换线程，在此线程上下文中暂时运行一个高级别中断处理程序 ，就如同在线程运行过程中，突然插入了一个调用函数，当中断程序处理完成后，当前线程继续运行。中断不受调度器影响。
</p><p>In <em>thread pre-emption</em>, the operating system replaces the running thread with another thread, usually of higher thread priority, on the same processor. The effect of pre-emption on an individual thread is to make the processor unavailable for a while. In <em>thread interruption</em>, the operating system forces the current thread to temporarily run code at a higher interrupt level. The effect of interruption on an individual thread is similar to that of a forced procedure call.
</p><h1>Thread Scheduling
</h1><p>The Microsoft? Windows? operating system schedules individual threads, not entire processes, for execution. Every thread has a scheduling priority (its <em>thread priority</em>), which is a value from 0 to 31, inclusive. Higher numbers indicate higher priority threads.
</p><p>Each thread is scheduled for a <strong>quantum<span style="font-family:宋体;"   >（</span><span style="font-family:微软雅黑;"   >时间片）</span></strong>, which defines the maximum amount of CPU time for which the thread can run before the kernel looks for other threads at the same priority to run. The exact duration of a quantum varies depending on what version of Windows is installed, the type of processor on which Windows is running, and the performance settings that have been established by a system administrator. (For more details, see <em>Inside Windows 2000</em>.)
</p><p>After a thread is scheduled, it runs until one of the following occurs:
</p><ul><li><span style="color:black; font-size:10pt;"   ><span style="font-family:Arial;"   >Its quantum expires.&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-family:微软雅黑;"   >时间片用完，会发生时钟中断，中断程序最终会调用调度器来调度线程。</span><span style="font-family:Arial;"   >
</span></span></li><li><span style="color:black; font-size:10pt;"   ><span style="font-family:Arial;"   >It enters a wait state.&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-family:微软雅黑;"   >进入等待（如调用KeWaitForSingleObject等），自己主动放弃。</span><span style="font-family:Arial;"   >
</span></span></li><li><span style="color:black; font-size:10pt;"   ><span style="font-family:Arial;"   >A higher-priority thread becomes ready to run.&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-family:宋体;"   >当一个高优先级的线程准备好时，相当于应线程"中断"了另一个线程，加引号是因为不是真正的中断。因为这个"中断"并不是立即执行，而是等到下一个时钟中断到来，调度器运行的时候，来选择高优先级的线程运行。</span><span style="font-family:Arial;"   >
</span></span></li></ul><p>
&nbsp;</p><p>Kernel-mode threads do not have priority over user-mode threads. A kernel-mode thread can be pre-empted by a user-mode thread that has a higher scheduling priority.
</p><p>Thread priorities in the range <strong>1-15</strong> are called <strong><em>dynamic</em> priorities.</strong> Thread priorities in the range from <strong>16-31</strong> are called <strong><em>real-time</em> priorities</strong>. Thread <strong>priority zero</strong> is reserved for the <strong>zero-page thread</strong>, which zeroes free pages for use by the memory manager.
</p><p>Every thread has a <strong><em>base priority</em></strong> and a <strong><em>current priority</em></strong>. The base priority is usually inherited from the base priority for the thread's process. The current priority is the thread's priority at any given time. For kernel-mode driver code that runs in the context of a user thread, the base priority is the priority of the user process that originally requested the I/O operation. For kernel-mode driver code that runs in the context of a system worker thread, such as a work item, the base priority is the priority of the system worker threads that service its queue.
</p><p>To improve system throughput, the operating system sometimes <strong>adjusts thread priorities</strong>. If a thread's base priority is in the d<em>ynamic range</em>, the operating system can <strong>temporarily increase ("boost") or decrease </strong>its<strong>
</strong>priority, thus making its current priority different from its base priority. If a thread's base priority is in the <em>real-time range</em>, its current priority and base priority are always the same; <strong>threads running at real-time priorities never receive a priority boost. In addition, a thread that is running at a dynamic priority can never be boosted to a real-time priority. </strong>Therefore, applications that create threads with base priorities in the real-time range can be confident that these threads always have a higher priority than those in the dynamic range.
</p><p>The system boosts a thread's priority when the thread completes an I/O request, when it stops waiting for an event or semaphore, or when it has not been run for some time despite being ready to run (called "CPU starvation"). Threads involved in the Graphical User Interface (GUI) and the user's foreground process also receive a priority boost in some situations. The amount of the increase depends on the reason for the boost and, for I/O operations, on the type of device involved. Drivers can affect the boost their code receives by:
</p><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Specifying a priority boost in the call to <strong>IoCompleteRequest</strong>.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Specifying a priority increment in the call to <strong>KeSetEvent</strong>, <strong>KePulseEvent</strong>, <strong>KeReleaseSemaphore</strong>.
</span></li></ul><p>
&nbsp;</p><p>Constants defined in ntddk.h and wdm.h indicate the appropriate priority boost for each device, event, and semaphore.
</p><p>A thread's scheduling priority is not the same as the interrupt request level (IRQL) at which the processor operates.
</p><h1>Thread Context and Driver Routines
</h1><p>Most Windows drivers do not create threads; instead, a driver consists of a group of routines that are called in an existing thread that was created by an application or system component.
</p><p>Kernel-mode software developers use the term "thread context" in two slightly different ways. In its narrowest meaning, thread context is the value of the thread's CONTEXT structure. The CONTEXT structure contains the values of the hardware registers, the stacks, and the thread's private storage areas. The exact contents and layout of this structure will vary according to the hardware platform. When Windows schedules a user thread, it loads information from the thread's CONTEXT structure into the user-mode address space.
</p><p>From a driver developer's perspective, however, "thread context" has a broader meaning. For a driver, the thread context includes not only the values stored in the CONTEXT structure, but also the operating environment they define—particularly, the security rights of the calling application. For example, a driver routine might be called in the context of a user-mode application, but it can in turn call a <strong>Zw<em>Xxx</em></strong> routine to perform an operation in the context of the operating system kernel. This paper uses "thread context" in this broader meaning.
</p><p>The thread context in which driver routines are called depends on the type of device, on the driver's position in the device stack, and on the other activities currently in progress on the system. When a driver routine is called to perform an I/O operation, the thread context might contain the user-mode address space and security rights of the process that requested the I/O. However, if the calling process was performing an operation on behalf of another user or application, the thread context might contain the user-mode address space and security rights of a different process. In other words, the user-mode address space might contain information that pertains to the process that requested the I/O, or it might instead contain information that pertains to a different process.
</p><p>一般情况下<span style="font-family:宋体;"   >，</span>最高层的<span style="font-family:微软雅黑;"   >驱动，都运行在一个确定的线程上下文中，此上下文就是发起IO请求的线程上下文。</span>
</p><p>The dispatch routines of file system drivers (FSDs), file system (FS) filter drivers, and other highest-level drivers normally receive I/O requests in the context of the thread that initiated the request. These routines can access data in the user-mode address space of the requesting process, provided that they validate pointers and protect themselves against user-mode errors.
</p><p>Most other routines in FSDs, FS filters, and highest-level drivers—and most routines in lower-level drivers—are called in an arbitrary thread context. Although the highest-level drivers receive I/O requests in the context of the requesting thread, they often forward those requests to their lower level drivers on different threads. Consequently, you can make no assumptions about the contents of the user-mode address space at the time such routines are called.
</p><p>For example, when a user-mode application requests a synchronous I/O operation, the highest-level driver's I/O dispatch routine is called in the context of the thread that requested the operation. The dispatch routine queues the I/O request for processing by lower-level drivers. The requesting thread then enters a wait state until the I/O is complete. A different thread de-queues the request, which is handled by lower-level drivers that run in the context of whatever thread happens to be executing at the time they are called.
</p><p>A few driver routines run in the context of a system thread. System threads have the address space of the system process and the security rights of the operating system itself. Work items queued with the <strong>IoXxxWorkItem</strong> routines run in a system thread context, and so do all <strong>DriverEntry</strong> and <strong>AddDevice</strong> routines. No user-mode requests arrive in a system thread context.
</p><h1>Driver Threads
</h1><p>Although a driver can create a new, driver-dedicated thread by calling <strong>PsCreateSystemThread</strong>, drivers rarely do so. Switching thread context is a relatively time-consuming operation that can degrade driver performance if it occurs often. Therefore, drivers should create dedicated threads only to perform continually repeated or long-term activities, such as polling a device or managing multiple data streams, as a network driver might do.
</p><p>To perform a short-term, finite task, a driver should not create its own thread; instead, it can temporarily "borrow" a system thread by queuing a work item. The system maintains a pool of dedicated threads that all drivers share. When a driver queues a work item, the system dispatches it to one of these threads for execution. Drivers use work items to run code in the kernel address space and security context or to call functions that are available only at IRQL PASSIVE_LEVEL. For example, a driver's <em>IoCompletion</em> routine (which can run at IRQL DISPATCH_LEVEL) should use a work item to call a routine that runs at IRQL PASSIVE_LEVEL.
</p><p>To queue a work item, a driver allocates an object of type IO_WORKITEM and calls the <strong>IoQueueWorkItem</strong> routine, specifying the callback routine to perform the task and the queue in which to place the work item. The kernel maintains three queues for work items:
</p><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Delayed work queue. Items in this queue are processed by a system worker thread that has a variable, dynamic thread priority. Drivers should use this queue.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Critical work queue. Items in this queue are processed by a system worker thread at a higher thread priority than the items in the delayed work queue.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Hypercritical work queue. Items in this queue are processed by a system worker thread at a higher priority than items in the critical work queue. This work queue is reserved for use by the operating system and must not be used by drivers.
</span></li></ul><p>
&nbsp;</p><p>A system worker thread removes the work item from the queue and runs the driver-specified callback routine in a system thread context at IRQL PASSIVE_LEVEL. The operating system ensures that the driver is not unloaded while the callback routine is running. To synchronize the actions of the callback routine with other driver routines, the driver can use one of the Windows synchronization mechanisms. For more information about synchronization, see the companion white paper, "Locks, Deadlocks, and Synchronization."
</p><p>Because the system has a limited supply of dedicated worker threads, the tasks assigned to them should be completed quickly. For example, a driver should not have a work item that runs continuously until the driver is unloaded. Instead, the driver should queue a work item only when it is needed, and the work item routine should exit when it has completed its work. For the same reasons, drivers should never include an infinite loop (such as might occur in a file system driver) in a work item. Drivers should also avoid queuing excessive numbers of work items, because tying up the system worker threads can deadlock the system. Instead of queuing a separate work item routine for each individual operation, the driver should have a single work item routine that performs any outstanding work and then exits when there is no more immediate work to perform.
</p><h1>Interrupt Request Levels
</h1><p>An <strong><em>interrupt request level (IRQL)</em></strong> defines the <strong>hardware priority</strong> at which a <strong>processor</strong> operates at any given time. In the Windows Driver Model, <strong>a thread running at a low IRQL can be interrupted to run code at a higher IRQL</strong>. 
</p><p>The number of IRQLs and their specific values are <strong>processor-dependent</strong>. The IA64 and AMD64 architectures have 16 IRQLs and the x86-based processors have 32. (The difference is due primarily to the types of interrupt controllers that are used with each architecture.) Table 1 is a list of the IRQLs for x86, IA64, and AMD64 processors.
</p><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><strong>Table 1. Interrupt Request Levels
</strong></span></p><div><table style="border-collapse:collapse;"   border="0"   ><colgroup><col style="width:128px;"   /><col style="width:59px;"   /><col style="width:60px;"   /><col style="width:60px;"   /><col style="width:203px;"   /><tbody valign="top"   ><tr style="height: 17px; background: #d9e3ed;"   ><td rowspan="2"   style="padding-left: 7px; padding-right: 7px; border-top:  solid 0.25pt; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   ><strong>IRQL</strong></span></p></td><td colspan="3"   style="padding-left: 7px; padding-right: 7px; border-top:  solid 0.25pt; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   ><strong>IRQL value</strong></span></p></td><td rowspan="2"   style="padding-left: 7px; padding-right: 7px; border-top:  solid 0.25pt; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   ><strong>Description</strong></span></p></td></tr><tr style="height: 17px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >x86 </span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >IA64</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >AMD64</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >0</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >0</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >0</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >User threads and most kernel-mode operations</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >APC_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >1</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >1</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >1</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Asynchronous procedure calls and page faults</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >2</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >2</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >2</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Thread scheduler and deferred procedure calls (DPCs)</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >CMC_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >N/A</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >3</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >N/A</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Correctable machine-check level (IA64 platforms only)</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Device interrupt levels (DIRQL)</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >3-26</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >4-11</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >3-11</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Device interrupts</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PC_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >N/A</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >12</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >N/A</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Performance counter (IA64 platforms only)</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PROFILE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >27</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >15</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >15</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Profiling timer for releases earlier than Windows&nbsp;2000</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >SYNCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >27</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >13</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >13</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Synchronization of code and instruction streams across processors</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >CLOCK_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >N/A</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >13</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >13</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Clock timer</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >CLOCK2_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >28</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >N/A</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >N/A</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Clock timer for x86 hardware</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >IPI_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >29</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >14</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >14</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Interprocessor interrupt for enforcing cache consistency</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >POWER_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >30</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >15</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >14</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Power failure</span></p></td></tr><tr style="height: 34px;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >HIGH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >31</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >15</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >15</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Machine checks and catastrophic errors; profiling timer for Windows&nbsp;XP and later releases</span></p></td></tr></table></div><p>
&nbsp;</p><p>When a processor is running at a given IRQL, interrupts at that IRQL and lower are masked off (blocked) on the processor. For example, a processor that is running at IRQL=DISPATCH_LEVEL can be interrupted only by a request at an IRQL greater than DISPATCH_LEVEL.
</p><p><strong>The system schedules all threads to run at IRQLs below DISPATCH_LEVEL, and the system's thread scheduler itself (also called "the dispatcher") runs at IRQL=DISPATCH_LEVEL. </strong>Consequently, a thread that is running at or above DISPATCH_LEVEL has, in effect, exclusive use of the current processor. Because DISPATCH_LEVEL interrupts are masked off on the processor, the thread scheduler cannot run on that processor and thus cannot schedule any other thread.
</p><p><strong>On a multiprocessor system, each processor can be running at a different IRQL.</strong> Therefore, one processor could run a driver's <em>InterruptService</em> routine at DIRQL while a second processor runs driver code in a worker thread at PASSIVE_LEVEL. Because more than one thread could thus attempt to access shared data simultaneously, drivers must protect shared data by using an appropriate synchronization method. Drivers should use a lock that raises the IRQL to the highest level at which any code that accesses the data can run. For example, a driver <strong>uses a spin lock to protect data that can be accessed at IRQL=DISPATCH_LEVEL</strong>. For more information about synchronization mechanisms, see the companion white paper, "Locks, Deadlocks, and Synchronization."
</p><p><strong>On a single-processor system, raising the IRQL to DISPATCH_LEVEL or higher has the same effect as using a spin lock because raising the IRQL can prevent the pre-emption or interruption of the currently executing code.</strong> For example, when a driver's <em>StartIo</em> routine is running at DISPATCH_LEVEL on a single-processor system, other driver code that runs at APC_LEVEL or PASSIVE_LEVEL cannot run until the IRQL drops. Similarly, when a driver's <em>InterruptService</em> routine is running at DIRQL, the DPC queued by that routine cannot run until the <em>InterruptService</em> routine exits. In fact, the operating system's spin lock acquisition and release routines raise the IRQL on single-processor systems; they do not actually manipulate a lock object. On multiprocessor machines, however, spin lock acquisition routines raise the IRQL on the current processor while other processors spin on the lock.
</p><p>For detailed information about locking, see the companion white paper, "Locks, Deadlocks, and Synchronization."
</p><h2>Processor-specific and Thread-specific IRQLs
</h2><p>As previously mentioned, the system's thread scheduler runs at IRQL=DISPATCH_LEVEL. <strong>IRQLs at or above DISPATCH_LEVEL are processor specific</strong>. Hardware and software interrupts at these levels are targeted at individual processors. The following processor-specific IRQLs are commonly used by drivers:
</p><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >DISPATCH_LEVEL
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >DIRQL
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >HIGHEST_LEVEL
</span></li></ul><p>
&nbsp;</p><p><strong>IRQLs below DISPATCH_LEVEL are thread specific.</strong> Software interrupts at these levels are <strong>targeted at individual threads</strong>. Drivers use the following thread-specific IRQLs:
</p><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >PASSIVE_LEVEL
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >APC_LEVEL
</span></li></ul><p><span style="color:black; font-size:10pt;"   ><span style="font-family:Arial;"   >IRQL</span><span style="font-family:MS Mincho;"   >被分为两种</span><span style="font-family:宋体;"   >，</span><span style="font-family:MS Mincho;"   >一种</span><span style="font-family:微软雅黑;"   >为针对单独的CPU：</span><span style="font-family:Arial;"   >Processor-specific</span><span style="font-family:宋体;"   >，</span><span style="font-family:MS Mincho;"   >一种是</span><span style="font-family:微软雅黑;"   >针对单独的线程：</span><span style="font-family:Arial;"   >Thread-specific</span><span style="font-family:宋体;"   >。</span><span style="font-family:微软雅黑;"   >针对单独的线程时，可以将线程想象为一个"伪CPU"，它只有俩个中断，APC和PASSIVE，而且这俩个中断的处理方式和真CPU中断处理方式不同，例如一个APC中断有时候并不会立即执行。见下文解释。而且在这俩个级别上，线程受到调度器调度，调度器只考虑优先级，不考虑当前的LEVEL，所以会导致一个运行在PASSIVE的高优先级线程抢占一个运行在APC_LEVEL相对较低优先级的线程。
</span></span></p><p><span style="color:black; font-size:10pt;"   ><span style="font-family:微软雅黑;"   >APC_LEVEL是个比较复杂的"中断级别"。</span><span style="font-family:Arial;"   >
</span></span></p><p>
&nbsp;</p><p>The thread scheduler considers only thread priority, and not IRQL, when preempting a thread. If a thread running at IRQL=APC_LEVEL blocks, the scheduler might select a new thread for the processor that was previously running at PASSIVE_LEVEL.
</p><p><span style="font-family:微软雅黑;"   >实际上，还有个中间件级：</span>intermediate level<span style="font-family:宋体;"   >。</span>相当于运行在PASSIVE_LEVEL<span style="font-family:宋体;"   >，</span>当禁止了部分APC中断<span style="font-family:宋体;"   >（如没有禁止：</span>special kernel-mode APC<span style="font-family:宋体;"   >）。</span><strong>
</strong></p><p>Although only two thread-specific IRQL values are defined, the system actually implements three levels. The system implements an <strong>intermediate level</strong> between PASSIVE_LEVEL and APC_LEVEL. Code running at this level is said to be in a <em>critical region</em>. Code that is running at IRQL=PASSIVE_LEVEL calls <strong>KeEnterCriticalRegion</strong> to raise the IRQL to this level and calls <strong>KeLeaveCriticalRegion</strong> to return the IRQL to PASSIVE_LEVEL.
</p><p>The following sections provide more information about the operating environment for driver code at each of these levels.
</p><h3>IRQL PASSIVE_LEVEL
</h3><p>While the processor is operating at PASSIVE_LEVEL, the operating system uses the scheduling priorities of the current threads to determine which thread to run. PASSIVE_LEVEL is the processor's normal operating state, at which any interrupt can occur. Any thread that is running at PASSIVE_LEVEL is considered preemptible because it can be replaced by a thread that has a higher scheduling priority. A thread that is running at PASSIVE_LEVEL is also considered interruptible because it can be interrupted by a request at a higher IRQL.
</p><p>Occasionally, driver code that is running at IRQL PASSIVE_LEVEL must call a system service routine or perform some other action that requires running at a higher IRQL (usually DISPATCH_LEVEL). Before making the call or performing the action, the driver must raise its IRQL to the required level; immediately after completing the action, the driver must lower the IRQL.
</p><p><strong>Code that is running at PASSIVE_LEVEL is considered to be working on behalf of the current thread</strong>. An application that creates a thread can <strong>suspend</strong> that thread while the thread is running kernel-mode code at PASSIVE_LEVEL. Therefore, driver code that acquires a lock at IRQL=PASSIVE_LEVEL must ensure that the thread in which it is running cannot be suspended while it holds the lock; thread suspension would disable access the to driver's device. This problem is usually resolved by using locks that raise the IRQL. Another solution is to enter a critical region whenever it tries to acquire such a lock. This issue is covered in greater detail in the companion paper, "Locks, Deadlocks, and Synchronization."
</p><p><span style="font-family:微软雅黑;"   >这里说了下<strong>suspend</strong>，suspend会导致线程无法访问device，为了防止访问异常，驱动需要上锁，或者提升IRQL。为什么？ Suspend为挂起的意思，相当于停止了某个线程，使得线程处于等待（wait）状态（等待某个信号量上），如果不Resume的话，是不会运行的。在WRK源码中，函数 KeSuspendThread实现了挂起操作，其调用KiInsertQueueApc排队了一个APC到要挂起的线程上，在APC中等待一个信号量。排队一个APC相当于发生了一个APC_LEVEL"中断"，所以禁用挂起的方式通过获取spin lock（DISPATCH_LEVEL）或者提升IRQL（大于</span>PASSIVE_LEVEL<span style="font-family:微软雅黑;"   >），这样在解锁或降低IRQL之前，APC得不到响应。</span>
</p><h3>IRQL PASSIVE_LEVEL in a critical region
</h3><p>Code that is running at PASSIVE_LEVEL in a critical region is effectively running at an intermediate level between PASSIVE_LEVEL and APC_LEVEL. Calls to <strong>KeGetCurrentIrql</strong> return PASSIVE_LEVEL. Driver code can determine whether it is operating in a critical region by calling the function <strong>KeAreApcsDisabled</strong> (available in Windows&nbsp;XP and later releases).
</p><p><strong>Driver code that is running above PASSIVE_LEVEL (either at PASSIVE_LEVEL in a critical region or at APC_LEVEL or higher) cannot be suspended</strong>. <span style="font-family:宋体;"   >（</span><span style="font-family:微软雅黑;"   >为甚不能挂起？）</span>Almost every operation that a driver can perform at PASSIVE_LEVEL can also be performed in a critical region. Two notable exceptions are raising hard errors and opening a file on storage media.
</p><p><span style="font-family:微软雅黑;"   >为何在</span><strong>intermediate level</strong>也不能挂起一个<span style="font-family:微软雅黑;"   >线程？因为在此级别上，禁止了部分APC排队。只有Special kernel-mode APC无法禁止。但KeSuspendThread排队的是一个Normal </span>kernel<span style="font-family:宋体;"   >-</span>mode <span style="font-family:微软雅黑;"   >APC，所以也能禁止挂起操作。APC有三个分类，下文会有解释。</span>
</p><h3>IRQL APC_LEVEL
</h3><p>APC_LEVEL is a thread-specific IRQL that is most commonly associated with paging I/O.<strong> Applications cannot suspend code that is running at IRQL=APC_LEVEL.</strong> The system implements<strong> fast mutexes</strong> (a type of synchronization mechanism) at APC_LEVEL. The <strong>KeAcquireFastMutex</strong> routine raises the IRQL to APC_LEVEL, and <strong>KeReleaseFastMutex</strong> returns the IRQL to its original value.  <span style="font-family:宋体;"   >注意</span>fast mutex<span style="font-family:宋体;"   >，</span>只能用在2003server以后的系统中。
</p><p>The only difference between a thread that is running at PASSIVE_LEVEL with APCs disabled and a thread that is running at APC_LEVEL is that while running at APC_LEVEL, the thread cannot be interrupted to deliver a special kernel-mode APC.
</p><h4><strong>Asynchronous Procedure Calls (APCs)
</strong></h4><p>Asynchronous procedure calls (APCs) are software interrupts that are targeted at a specific thread. The system uses APCs to perform work in the context of a particular thread, such as writing back the status of an I/O operation to the requesting application.
</p><p><strong>How a target thread responds to APCs depends on the thread's state and the type of APC. </strong>The following briefly summarizes the actions; for a complete description, see "Do Waiting Threads Receive Alerts and APCs" under "Synchronization" in the "Kernel-Mode Drivers Architecture Design Guide" of the Windows Driver Development Kit (DDK).
</p><p>APC的排队<span style="font-family:微软雅黑;"   >细则在WRK中的KeInsertQueueApc函数中，首先通过KeInitializeApc初始化一个APC，然后调用KeInsertQueueApc-&gt;KiInsertQueueApc将APC排队，如何排队，就是下面说的细则。一个APC在内核中，表示为：KAPC结构体，如下：
</span></p><p>typedef struct _KAPC {<br>    UCHAR Type;<br>    UCHAR SpareByte0;<br>    UCHAR Size;<br>    UCHAR SpareByte1;<br>    ULONG SpareLong0;<br>    struct _KTHREAD *Thread;<br>    LIST_ENTRY ApcListEntry;<br>    PKKERNEL_ROUTINE KernelRoutine;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Kernel APC<br>    PKRUNDOWN_ROUTINE RundownRoutine;<br>    PKNORMAL_ROUTINE NormalRoutine;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Normal APC<br>    PVOID NormalContext;<br><br>    //<br>    // N.B. The following two members MUST be together.<br>    //<br><br>    PVOID SystemArgument1;<br>    PVOID SystemArgument2;<br>    CCHAR ApcStateIndex;<br>    KPROCESSOR_MODE ApcMode;&nbsp;&nbsp;&nbsp;&nbsp;//usermode or kernel mode<br>    BOOLEAN Inserted;<br>} KAPC, *PKAPC, *PRKAPC;
</p><p>下面<span style="font-family:微软雅黑;"   >阐述的就是KiInsertQueueApc代码中的细则：</span><br>Every thread has two kernel-mode APC queues, <strong>one for APC_LEVEL callbacks and another for critical region callbacks.</strong> Each time the system adds an APC to a queue, it checks to see whether the target thread is currently running. If so, the system requests an interrupt on the appropriate processor. If the thread is still running when the system services the interrupt, the APC runs immediately, if appropriate. If the target thread is not running, the APC is added to the queue and runs the next time the thread is scheduled; the interrupt does not cause the target thread to run immediately. If the current IRQL is too high to run the APC, the APC runs the next time the IRQL is lowered below the level of the APC. If the thread is waiting at a lower IRQL, the system wakes the thread temporarily to deliver the APC, and then the thread resumes waiting.
</p><p>如果排队APC的线程处于运行的状态，此线程就相当于一个伪CPU，给线程排队APC会发送一个APC软中断，如果目前线程不是在APC_LEVEL，发送完后还在继续执行，那么此线程会被"中断"，去执行相应的APC回调函数。如果目前的线程运行在APC_LEVEL或者APC_LEVEL以上，那么中断无法响应，只是将APC排队到线程中，等到降到APC_LEVEL一下后，再次调度此线程时，调用排队的APC。
</p><p>如果排队的APC处于等待状态，如调用KeWaitXXX进入等待状态，要看其传入的参数：Alertable和WaitMode，还有APC的类型。
</p><p>如果APC的类型为special kernel-mode APC，无论这两个参数是什么，只要当前线程的IRQL&lt;APC_LEVEL，线程会被被暂时唤醒，去执行对应的APC，然后线程继续恢复等待状态。唤醒的目的只是去执行APC，原线程仍然没有执行一行代码。所以看起来等待并没有被结束。
</p><p>如果APC的类型为Normal kernel-mode APC，无论这两个参数是什么，只要当前线程的IRQL&lt;APC_LEVEL且线程不在一个APC中或者不在<strong>intermediate level</strong>，线程会被被暂时唤醒，去执行对应的APC，然后线程继续恢复等待状态。唤醒的目的只是去执行APC，原线程仍然没有执行一行代码。所以看起来等待并没有被结束。
</p><p>如果APC的类型为Normal use-mode APC，只有Alertable参数为TRUE，而且WaitMode为UserMode的时候，会停止线程等待，线程重新回到调度状态，调度器会调度其APC。
</p><p>The <em>Alertable</em> and <em>WaitMode</em> parameters to <strong>KeWaitForSingleObject</strong> and <strong>KeWaitForMultipleObjects</strong> determine how the system handles user-mode APCs while the thread is waiting. Table 8 is a summary of the effects of these parameters on APC delivery.
</p><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><strong>Table 8. Effects of the Alertable and WaitMode Parameters on APC Delivery
</strong></span></p><div><table style="border-collapse:collapse;"   border="0"   ><colgroup><col style="width:84px;"   /><col style="width:71px;"   /><col style="width:71px;"   /><col style="width:81px;"   /><col style="width:74px;"   /><col style="width:71px;"   /><col style="width:82px;"   /><tbody valign="top"   ><tr style="background: #d9e3ed;"   ><td rowspan="2"   style="padding-left: 7px; padding-right: 7px; border-top:  solid 0.25pt; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><strong>Value of <em>Alertable</em> and <em>WaitMode</em> parameters</strong></span></p></td><td colspan="2"   style="padding-left: 7px; padding-right: 7px; border-top:  solid 0.25pt; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><strong>Special <br>kernel-mode APC</strong></span></p></td><td colspan="2"   style="padding-left: 7px; padding-right: 7px; border-top:  solid 0.25pt; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><strong>Normal <br>kernel-mode APC</strong></span></p></td><td colspan="2"   style="padding-left: 7px; padding-right: 7px; border-top:  solid 0.25pt; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><strong><br>User-mode APC</strong></span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >Terminate wait?</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >Deliver and run APC?</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >Terminate wait?</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >Deliver and run APC?</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >Terminate wait?</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >Deliver and run APC?</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>Alertable</em> = TRUE
</span></p><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>WaitMode</em> = <strong>UserMode</strong></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >If (A*), then Yes</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >If (B**), then Yes</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >Yes</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >Yes, after thread returns to user mode</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>Alertable</em> = TRUE
</span></p><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>WaitMode</em> = <strong>KernelMode</strong></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No
</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >If (A), then Yes</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >If (B), then Yes</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>Alertable</em> = FALSE
</span></p><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>WaitMode</em> = <strong>UserMode</strong></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >If (A), then Yes</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >If (B), then Yes</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No (with exceptions, such as CTRL+C to terminate)</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>Alertable</em> = FALSE
</span></p><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>WaitMode</em> = <strong>KernelMode</strong></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >If (A), then Yes</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >If (B), then Yes</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >No</span></p></td></tr></table></div><p>
&nbsp;</p><p><span style="font-size:9pt;"   >  *A: IRQL &lt; APC_LEVEL.
</span></p><p><span style="font-size:9pt;"   >**B: IRQL &lt; APC_LEVEL, thread not already in an APC, and thread not in a critical region.</span>
</p><p>Both user-mode code and kernel-mode code can issue APCs. The system defines three types of APCs:
</p><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >User-mode APCs
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Normal kernel-mode APCs
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Special kernel-mode APCs
</span></li></ul><p>
&nbsp;</p><p><strong><em>User-mode APCs</em>
</strong>are primarily used in completing I/O operations. Win32? APIs such as <strong>ReadFileEx</strong> and <strong>WriteFileEx</strong><em>
</em>allow the caller to specify an I/O completion callback routine. To run the callback routine, the system queues a user-mode APC to the thread that requested the I/O. A user-mode application can queue a user-mode APC directly by calling the Win32 API <strong>QueueUserAPC</strong>. User-mode APCs are beyond the scope of this document.
</p><p><strong><em>Normal kernel-mode APCs</em> are delivered at the intermediate level </strong>that corresponds to PASSIVE_LEVEL in a critical region. The system delivers a normal kernel-mode APC when the target thread is already running at PASSIVE_LEVEL or when the thread is returning to PASSIVE_LEVEL after exiting from a critical region or after lowering the IRQL. <strong>Normal kernel-mode APCs have two routines, a <em>Special Routine </em>that runs at APC_LEVEL, and a<em> Normal</em>
<em>Routine</em> that subsequently runs at PASSIVE_LEVEL in a critical region.</strong> The special routine typically frees the APC structure.
</p><p><strong><em>Special kernel-mode APCs</em> are delivered at APC_LEVEL</strong>. The system delivers them if the target thread is running at an IRQL below APC_LEVEL or if the target thread is returning to an IRQL below APC_LEVEL.
</p><p>Normal kernel-mode APCs and special kernel-mode APCs are queued when kernel-mode operating system code calls an undocumented internal routine; drivers cannot queue kernel-mode APCs directly.
</p><p>The I/O manager queues the special kernel-mode APC for I/O completion whenever an I/O request completes. When a device's drivers complete a buffered I/O request, the I/O Manager queues this APC to the user-mode thread that originated the I/O request. When the APC runs, the operating system restores the thread's context and the I/O manager copies data from the driver's kernel-space output buffer to the requesting thread's user-space buffer.
</p><h3>IRQL DISPATCH_LEVEL
</h3><p>DISPATCH_LEVEL is the highest software interrupt level and the first processor-specific level. <strong>The Windows thread scheduling and dispatching components (collectively called "the dispatcher") run at IRQL DISPATCH_LEVEL.</strong> Some other kernel-mode support routines, some driver routines, and all deferred procedure calls (DPCs) also run at IRQL DISPATCH_LEVEL. While the processor operates at this level, one thread cannot pre-empt another; only a hardware interrupt can interrupt the running thread. To maximize overall system throughput, driver code that runs at DISPATCH_LEVEL should perform only the minimum amount of required processing.
</p><p>Because code that is running at DISPATCH_LEVEL cannot be pre-empted, the operations that a driver can perform at DISPATCH_LEVEL are restricted. Any code that must wait for an object that another thread sets or signals asynchronously—such as an event, semaphore, mutex, or timer—cannot run at DISPATCH_LEVEL because the waiting thread cannot block while waiting for the other thread to perform the action. Waiting for a nonzero period on such an object while at DISPATCH_LEVEL causes the system to deadlock and eventually to crash.
</p><p>Deferred procedure calls (DPCs) are, in effect, software interrupts targeted at processors. DPCs (including <em>DpcForIsr</em>, <em>CustomDpc</em>, and <em>CustomTimerDpc</em> routines) are always called at IRQL DISPATCH_LEVEL in an arbitrary thread context. Drivers usually use DPCs for the following:
</p><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >To perform additional processing after a device interrupts. Such DPCs are either <em>DpcForIsr</em> or <em>CustomDpc</em> routines that are queued by the driver's <em>InterruptService</em> routine.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >To handle device time-outs. Such a DPC is a <em>CustomTimerDpc</em> routine that is queued when the timer expires by the <strong>KeSetTimer</strong> or <strong>KeSetTimerEx</strong> routine.
</span></li></ul><p>
&nbsp;</p><p>The kernel maintains a queue of DPCs for each processor and runs DPCs from this queue just before the processor's IRQL drops below DISPATCH_LEVEL.
</p><p>Each DPC is assigned to the queue for the same processor on which the code that queues it is running. The kernel removes DPC objects from the head of the queue and adds them to its tail. A driver can change the processor for which a DPC object is queued by calling <strong>KeSetTargetProcessorDpc</strong>. A driver can also change the DPC's relative location in the queue by calling <strong>KeSetImportanceDpc</strong>. However, drivers rarely need to change either of these characteristics.
</p><p>If a device interrupts while either its <em>DpcForIsr</em> or <em>CustomDpc</em> routine is running, its <em>InterruptService</em> routine pre-empts the DPC and queues a DPC object as it normally would. In a single-processor system, the DPC object is placed at the end of the single DPC queue, where it runs in sequence with any other DPCs in the queue after the <em>InterruptService</em> routine and the current DPC complete. In a multi-processor system, however, the second interrupt could occur on a different processor.
</p><p>For example, assume a device interrupts on Processor 1 while its <em>DpcForIsr</em> routine is running on Processor 0. The system runs the <em>InterruptService</em> routine on Processor 1 to handle the interrupt. When the <em>InterruptService</em> routine queues its <em>DpcForIsr</em> routine, the system places the DPC object into the DPC queue of Processor 1. Thus, a driver's <em>InterruptService</em> routine can run at the same time as its DPC routine, and the same DPC routine can run on two or more processors at the same time. If both routines attempt to access the same data simultaneously, serious errors can occur. Drivers must use spin locks to protect shared data in these scenarios.
</p><h3>IRQL DIRQL
</h3><p>DIRQL describes the range of IRQLs that physical devices can generate. Each processor architecture has a range of DIRQLs, as shown in Table 1, "Interrupt Request Levels." The DIRQL for each device instance is available to its driver in the CM_RESOURCE_LIST structure passed by the PnP manager as part of the IRP_MN_START_DEVICE request. The driver, in turn, passes this IRQL to the I/O manager when it calls <strong>IoConnectInterrupt</strong> to connect its interrupt object. Multiple devices can interrupt at the same DIRQL.
</p><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><strong>Note
</strong></span></p><p><span style="color:black; font-family:Arial; font-size:10pt;"   >Microsoft has made several enhancements to the interrupt architecture in the next release of Windows, codenamed "Longhorn." For information about these pending changes, see the white paper "Interrupt Architecture Enhancements in Microsoft Windows, Codenamed Longhorn," which is available at http://www.microsoft.com/whdc/hwdev/bus/pci/MSI.mspx.
</span></p><p>
&nbsp;</p><p>Two types of driver routines run at DIRQL:
</p><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   ><strong><em>InterruptService</em> routines
</strong></span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   ><strong><em>SynchCritSection</em> routines
</strong></span></li></ul><p>
&nbsp;</p><p>Function drivers for physical devices usually include these routines; filter and file system drivers never do.
</p><p><em>InterruptService</em> routines must run at DIRQL so that they can handle the current interrupt without receiving further interrupts from the interrupt controller. A driver's <em>InterruptService</em> routine should first determine whether its device is the source of the interrupt. If so, the routine stops the device from generating further interrupts, saves any necessary context information, and queues a deferred procedure call (DPC) to run later at DISPATCH_LEVEL. If the interrupt was generated by some other device, the routine should simply return FALSE.
</p><p>A driver's <em>InterruptService</em> routine runs on the same processor on which its device interrupted; in turn, its <em>DpcForIsr</em> (or <em>CustomDpc</em>) routine runs on the same processor as the <em>InterruptService</em> routine that queued it.
</p><p><em>InterruptService</em> routines must follow these important rules:
</p><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >The <em>InterruptService</em> routine must not return FALSE if its device generated the interrupt. Such "unclaimed" interrupts can eventually hang or crash the system.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >The <em>InterruptService</em> routine must not access the device hardware when the device is in a low power state that does not support such access. To prevent such problems, drivers should disconnect interrupts when transitioning their devices out of the D0 power state.
</span></li></ul><p>
&nbsp;</p><p><em>InterruptService</em> routines should perform only the tasks that cannot be deferred until the processor is at a lower IRQL. <em>InterruptService</em> routines that run for longer than a minimal time can reduce performance across the operating system.
</p><p><em>SynchCritSection</em> routines also run at DIRQL. A driver uses a <em>SynchCritSection</em> routine to access data that is shared with an <em>InterruptService</em> routine. Like <em>InterruptService</em> routines, <em>SynchCritSection</em> routines should perform only the minimum set of required tasks: accessing hardware registers, writing data that is shared with the <em>InterruptService</em> routine, and so forth. For example, a driver might need a <em>SynchCritSection</em> routine to re-enable device interrupts from its <em>DpcForIsr</em> routine.
</p><p>A driver cannot call a <em>SynchCritSection</em> routine directly. Instead, the driver calls <strong>KeSynchronizeExecution</strong>, passing a pointer to the <em>SynchCritSection</em> routine. <strong>KeSynchronizeExecution</strong> raises the IRQL on the processor to DIRQL for the device, acquires the device's interrupt spin lock, and then starts the routine. Before returning to the caller, <strong>KeSynchronizeExecution</strong> releases the interrupt spin lock and lowers the IRQL on the current processor to its previous value.
</p><p>While running at DIRQL, driver code must conform to the guidelines described in the section "Guidelines for Running at IRQL DISPATCH_LEVEL or Higher."
</p><h3>IRQL HIGH_LEVEL
</h3><p>Certain bug-check and non-maskable interrupt (NMI) callback routines run at IRQL HIGH_LEVEL. Because no interrupts can occur at IRQL HIGH_LEVEL, these routines are guaranteed to run without interruption.
</p><p>The lack of interrupts, however, means that actions of the callback routines are severely restricted. In addition to the restrictions listed in the section "Guidelines for Running at IRQL DISPATCH_LEVEL or Higher," the following rules apply to code that runs at HIGH_LEVEL:
</p><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >The code must not allocate memory.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >The code must not use any synchronization mechanisms.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >The code must not call any routines that run at IRQL&lt;= DISPATCH_LEVEL.
</span></li></ul><h2>Guidelines for Running at IRQL DISPATCH_LEVEL or Higher
</h2><p>Driver code that runs at IRQL DISPATCH_LEVEL or above must conform to the following guidelines:
</p><ul><li><div><span style="color:black; font-family:Arial; font-size:10pt;"   >Use only nonpageable data and code; do not perform any actions that require paging. The operating system must wait for paging I/O operations to complete, and such waits cannot be performed at DISPATCH_LEVEL or higher. (For the same reason, any driver routine that obtains a spin lock must not be pageable.) A driver can store data that it will access at IRQL&gt;=DISPATCH_LEVEL in the following locations:
</span></div><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >The device object, usually in the device extension.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >The kernel stack, for small amounts of data that do not need to persist beyond the lifetime of the function.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Nonpaged memory allocated by the driver. For large amounts of data, such as that required for I/O buffers, drivers should use the <strong>ExAllocate<em>Xxx</em></strong> or <strong>MmAllocate<em>Xxx</em></strong> routines, as appropriate.
</span></li></ul></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Never wait for a nonzero period on a kernel dispatcher object (an event, semaphore, timer, kernel mutex, thread, process, or file object).
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Do not call routines that convert strings from ANSI to UNICODE, or vice versa. These routines are in pageable code. Furthermore, most of the <strong>Rtl<em>Xxx</em>String</strong> routines can be called only from PASSIVE_LEVEL. Check the Windows DDK documentation before calling such routines at or above DISPATCH_LEVEL.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Never call <strong>KeReleaseSpinLock</strong> unless you have previously called <strong>KeAcquireSpinLock</strong>. Similarly, never call <strong>KeReleaseSpinLockFromDpcLevel</strong> unless you have previously called <strong>KeAcquireSpinLockAtDpcLevel</strong>. You cannot mix these two types of spin lock calls.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Never call <strong>KeAcquireSpinLock</strong> from code that is running at IRQL = DISPATCH_LEVEL because <strong>KeAcquireSpinLock</strong> raises the current IRQL to DISPATCH_LEVEL. Instead, use <strong>KeAcquireSpinLockAtDpcLevel</strong>, which does not change the current IRQL.
</span></li></ul><h2>Changing the IRQL at which Driver Code Runs
</h2><p>In general, the IRQL at which the operating system calls a driver routine is appropriate for the tasks that such a routine must perform. For example, a <em>DpcForIsr</em> routine usually must call <strong>IoStartNextPacket</strong>, which in turn calls the driver's <em>StartIo</em> routine. The <em>DpcForIsr</em>, <strong>IoStartNextPacket</strong>, and <em>StartIo</em> routines must all be called at DISPATCH_LEVEL to ensure that the I/O operations they perform complete without pre-emption by other user threads.
</p><p>In some situations, however, driver code must raise the IRQL so that the driver can call a routine at DISPATCH_LEVEL. For example, if a driver calls <strong>KeGetCurrentProcessorNumber</strong> at IRQL&lt; DISPATCH_LEVEL, a processor switch could occur between instructions, thus returning the incorrect value to the caller. Therefore, drivers sometimes must call <strong>KeRaiseIrql</strong> before calling <strong>KeGetCurrentProcessorNumber</strong>.
</p><p>Although a driver can safely raise the IRQL when necessary, a driver must NEVER lower the IRQL without first raising it. Furthermore, a driver routine must never lower the IRQL below the setting at which it was called. Doing so can disrupt operations that the caller of the driver routine was relying on to complete atomically; such a disruption usually causes the system to crash.
</p><p>Occasionally, however, driver code that runs at IRQL&gt;=DISPATCH_LEVEL must communicate with code at a lower IRQL. For example, a driver might need to issue a synchronous device control request to its device after completion of an I/O operation. <em>IoCompletion</em> routines can be called at IRQL = DISPATCH_LEVEL, but <strong>IoBuildDeviceIoControlRequest</strong> must be called at PASSIVE_LEVEL. In this situation, the driver should use the <strong>IoAllocateWorkItem</strong> and <strong>IoQueueWorkItem</strong> routines (which can be called at IRQL = DISPATCH_LEVEL) to allocate and queue a work item routine that builds and sends the device control request. The work item routine will be called in the context of a system thread at IRQL = PASSIVE_LEVEL.
</p><p>The following are guidelines for changing IRQL:
</p><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Never call <strong>KeRaiseIrql</strong> with an IRQL that is lower than the current IRQL.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Never call <strong>KeLowerIrql</strong> unless you have previously called <strong>KeRaiseIrql</strong>. The two calls must occur within the same function. A function must always return at the same IRQL at which it was called.
</span></li></ul><p>Never call <strong>KeLowerIrql</strong> with an IRQL lower than the IRQL at which you called <strong>KeRaiseIrql</strong>.
</p><h2>Standard Driver Routines, IRQL, and Thread Context
</h2><p>Table 2 is a list of the standard driver routines, the IRQL at which each routine is called, and the thread context in which the routine runs. In addition to the routines that are listed here, there are many device-type-specific driver routines that are called at DISPATCH_LEVEL. For details, see the device-specific documentation in the Windows DDK.
</p><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><strong>Table 2. IRQL and Thread Context for Standard Driver Routines
</strong></span></p><div><table style="border-collapse:collapse;"   border="0"   ><colgroup><col style="width:235px;"   /><col style="width:144px;"   /><col style="width:131px;"   /><tbody valign="top"   ><tr style="background: #d9e3ed;"   ><td style="padding-left: 7px; padding-right: 7px; border-top:  solid 0.25pt; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   ><strong>Routine</strong></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  solid 0.25pt; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   ><strong>Caller's IRQL</strong></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  solid 0.25pt; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   ><strong>Thread context</strong></span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>AdapterControl</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>AdapterListControl</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>AddDevice</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >System</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>BugCheckCallback</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >HIGH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary: depends on state of operating system when the bug check occurred</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>BugCheckDumpIoCallback</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >HIGH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary: depends on state of operating system when the bug check occurred</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>BugCheckSecondaryDumpDataCallback</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >HIGH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary: depends on state of operating system when the bug check occurred</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>Cancel </em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>ControllerControl</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>CsqAcquireLock</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >IRQL of the routine that called IoCsqXxx. Usually &lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>CsqCompleteCanceledIrp</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >&lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>CsqInsertIrp</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >IRQL of the lock acquired by CsqAcquireLock. Usually &lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>CsqInsertIrpEx</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >IRQL of the lock acquired by CsqAcquireLock. Usually &lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>CsqPeekNextIrp</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >IRQL of the lock acquired by CsqAcquireLock. Usually &lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>CsqReleaseLock</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >IRQL of the lock acquired by CsqAcquireLock. Usually &lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>CsqRemoveIrp</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   >IRQL of the lock acquired by CsqAcquireLock. Usually &lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>CustomDpc</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>CustomTimerDpc</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchCleanup </em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Non-arbitrary for FSD, FS filter, and other highest-level drivers; arbitrary for other drivers</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchClose</em> (for FSD, FS filters, and other highest-level drivers)</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >APC_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchClose</em> (for all other drivers)</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchCreate</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Non-arbitrary for FSD, FS filter, and other highest-level drivers; arbitrary for other drivers</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchCreateClose</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Non-arbitrary for FSD, FS filter, and other highest-level drivers; arbitrary for other drivers</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchDeviceControl</em> (for devices not in paging path)</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Non-arbitrary for FSD and FS filters; arbitrary for other drivers</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchDeviceControl</em> (for devices in paging path)</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >&lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchFlushBuffers</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Non-arbitrary for FSD, FS filter, and other highest-level drivers; arbitrary for other drivers</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchInternalDeviceControl</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Depends on the device type, but always &lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchPnp</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchPower</em> (if the DO_POWER_PAGABLE flag is not set in the device object)</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >&lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial;"   ><span style="font-size:10pt;"   ><em>DispatchPower</em> (if the DO_POWER_PAGABLE flag</span><span style="color:blue;"   ><span style="font-size:8pt;"   ><strong>
</strong></span>is set in the device object)</span></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchQueryInformation</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Non-arbitrary for FSD, FS filter, and other highest-level drivers; arbitrary for other drivers</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>DispatchRead</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Non-arbitrary for FSD, FS filter, and other highest-level drivers; arbitrary for other drivers</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchRead</em> (for devices in paging path)</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >APC_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchRead</em> and <em>DispatchWrite</em> routines of drivers in the storage stack</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >&lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>DispatchReadWrite</em> (for devices not in paging path)</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Non-arbitrary for FSD, FS filter, and other highest-level drivers; arbitrary for other drivers</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchReadWrite</em> (for devices in paging path)</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >APC_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchSetInformation</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Non-arbitrary for FSD, FS filter, and other highest-level drivers; arbitrary for other drivers</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>DispatchShutdown </em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Non-arbitrary for FSD, FS filter, and other highest-level drivers; arbitrary for other drivers</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchSystemControl</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchWrite</em> (for devices in paging path)</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >APC_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DispatchWrite </em>(for devices not in paging path)</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Non-arbitrary for FSD, FS filter, and other highest-level drivers; arbitrary for other drivers</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DllInitialize</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >System or arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DllUnload</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>DpcForIsr</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><strong>DriverEntry</strong></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   >System</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>InterruptService</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DIRQL for the associated interrupt object</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>IoCompletion</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >&lt;= DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>IoTimer</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>Reinitialize</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >System</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>StartIo</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DISPATCH_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:10pt;"   ><em>SynchCritSection</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >DIRQL for the associated interrupt object</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >Arbitrary</span></p></td></tr><tr><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  solid 0.25pt; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><em>Unload</em></span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >PASSIVE_LEVEL</span></p></td><td style="padding-left: 7px; padding-right: 7px; border-top:  none; border-left:  none; border-bottom:  solid 0.25pt; border-right:  solid 0.25pt;"   ><p><span style="font-family:Arial; font-size:9pt;"   >System</span></p></td></tr></table></div><h1>Interrupting a Thread: Examples
</h1><p>Some simple examples can show what happens when a thread is pre-empted or interrupted. This section presents a single-processor example and a dual-processor example.
</p><h2>Single-Processor Example
</h2><p>Figure 1 shows a hypothetical example of thread interruption on a single-processor system. For the sake of simplicity, the example omits the thread scheduler, clock interrupts, and so forth.
</p><p><img title="Scheduling, Thread Context and IRQL - Howie - Dspace"   src="pic/img1.ph.126.net_fXYm0z1-qqZW2f3iguO7CA==_6608484896375627953.jpg"   alt=""   />
</p><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><strong>Figure 1. Thread Interruption on a Single-Processor System
</strong></span></p><p>The figure shows how thread execution proceeds over time, as follows:
</p><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Thread A is running at IRQL PASSIVE_LEVEL.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Device 1 interrupts at DIRQL. Thread A is interrupted, even though its quantum has not yet expired. The system suspends Thread A and runs the <em>InterruptService</em> (ISR) routine for Device 1. The <em>InterruptService</em> routine stops Device 1 from interrupting, saves any data it requires for further processing, queues a <em>DpcForISR</em> routine, and exits.
</span></li><li><div><span style="color:black; font-family:Arial; font-size:10pt;"   >No additional interrupts are pending at DIRQL for any device. Because deferred procedure calls (DPCs) run at IRQL DISPATCH_LEVEL, any entries in the system's queue of DPC routines will run before Thread A can resume.
</span></div><p style="margin-left: 4pt;"   >In this case, the queue contains the <em>DpcForIsr</em> routine that was queued by the Device 1 <em>InterruptService</em> routine. Because no further interrupts occur at IRQL&gt;DISPATCH_LEVEL, the <em>DpcForIsr</em> routine runs to completion.
</p></li><li><div><span style="color:black; font-family:Arial; font-size:10pt;"   >After the <em>DpcForIsr</em> routine exits, the DPC queue is empty and no other higher-priority threads are ready to run. Therefore, the system resumes running Thread A, which continues until one of the following occurs:
</span></div><ul><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Its quantum expires.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >It enters a wait state.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >It exits.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >A higher-priority thread becomes ready to run.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >A hardware interrupt occurs.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >The thread queues a DPC or an APC.
</span></li></ul></li></ul><p>There is no guarantee that Thread A will exhaust its quantum. A thread can be interrupted or pre-empted any number of times during its quantum.
</p><h2>Multiprocessor Example
</h2><p>Figure 2 shows a hypothetical example of thread interruption on a multiprocessor system. This example omits clock interrupts and so forth, but it shows the system's thread scheduler.
</p><p><img title="Scheduling, Thread Context and IRQL - Howie - Dspace"   src="pic/img2.ph.126.net_b_6fRmKFQKvFSq9ctP6Qcg==_6608256197957920997.jpg"   alt=""   />
</p><p><span style="color:black; font-family:Arial; font-size:9pt;"   ><strong>Figure 2. Thread Interruption on a Multiprocessor System
</strong></span></p><p>The figure shows thread execution on two processors, starting at the same time, as follows:
</p><ol><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Processor 0 is running Thread A, while Processor 1 is running Thread B. Both threads run at IRQL=PASSIVE_LEVEL.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Device 1 interrupts on Processor 0, so the system raises IRQL on Processor 0 to DIRQL for Device 1 and runs the Device 1 <em>InterruptService</em> (ISR) routine. The Device 1 <em>InterruptService</em> routine queues a <em>DpcForIsr</em> routine. By default, the <em>DpcForIsr</em> routine is added to the queue for the same processor (Processor 0) on which the <em>InterruptService</em> routine is running.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Because the <em>DpcForIsr</em> routine runs on the same processor as the <em>InterruptService</em> routine, but at a lower IRQL, it does not start until after the <em>InterruptService</em> routine exits.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >Device 1 interrupts again—this time on Processor 1—so the system raises IRQL on Processor 1 to DIRQL for Device 1 and runs the Device 1 <em>InterruptService</em> (ISR) routine on Processor 1. The Device 1 <em>InterruptService</em> routine queues a <em>DpcForIsr</em> routine to Processor 1 (the default behavior). The <em>DpcForIsr</em> routine starts on Processor 1 after the <em>InterruptService</em> routine exits.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >The same <em>DpcForIsr</em> routine is now running on two processors at the same time, in response to two different interrupts from the same device. The driver must use spin locks to protect shared memory that the routines might access. In this case, the <em>DpcForIsr</em> routine on Processor 0 acquires the lock first, so Processor 1 spins while waiting for the lock.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >The <em>DpcForIsr</em> routine on Processor 0 releases the lock, completes its work, and exits. The system now runs the next ready thread on Processor&nbsp;0—in this case, Thread A.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >After the <em>DpcForIsr</em> routine on Processor 0 releases the lock, the <em>DpcForIsr</em> routine on Processor 1 acquires the lock and performs its tasks. After it exits, the system's thread scheduling code runs to determine which thread to run next.
</span></li><li><span style="color:black; font-family:Arial; font-size:10pt;"   >When the thread scheduler exits, no additional DPCs have been queued, so the highest-priority ready thread (Thread C) runs on Processor 1.
</span></li></ol><p>
&nbsp;</p>
</body></html>