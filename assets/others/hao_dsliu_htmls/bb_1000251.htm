<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：Understanding The COM Single-Threaded Apartment （1）</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>Understanding The COM Single-Threaded Apartment （1）</h2>
<p align="right">发布时间：2011-3-12 11:43
<br>分类名称：COM</p><br>
  <p style="text-align: left; line-height: 14.4pt; background: none repeat scroll 0% 0% white;"   align="left"   ><b><span style="font-size: 14pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familycolorffmso-font-kerningpt=""   lang="EN-US"   >原文出自CodeProject，网上有人翻译过来，不过我觉得看原文会更加准确的了解概念。毕竟翻译是掺杂了一些译者的错误理解，而且和个人的汉语水平有些关系。<br></span></b></p><p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 2;background:white;"   align="left"   ><b><span style="font-size:14.0pt;mso-bidi-font-size: 13.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familycolorffmso-font-kerningpt=""   lang="EN-US"   >Introduction</span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Advanced COM-based projects often require the passing of objects across threads. Besides the requirement to invoke the methods of these objects from various threads, there is sometimes even the need to fire the <b>events</b> of these objects from more than one thread. This two-part article is aimed at the beginner level COM developer who has just crossed the initial hurdles of understanding the basics of </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   courier=""   newmso-fareast-font-familycolor=""   mso-font-kerningpt=""   lang="EN-US"   >IUnknown</span><span style="mso-bidi-font-size: 10.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >IDispatch</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > and is now considering the use of objects in multiple threads. This is where the need to understand COM Apartments come in.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >I aim to explain in as much detail as possible the fundamental principles of how COM object methods may be invoked from multiple threads. We shall explore <b>COM Apartments</b> in general and the <b>Single Threaded Apartment</b> (STA) Model in particular in an attempt to demystify both what they are designed to achieve and how they achieve their design.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >COM Apartments form a topic worthy of close study of its own. It is not possible to cover in detail everything that pertains to this subject in one single article. Instead of doing that, I will focus on Single-Threaded Apartments for now and will return to the other Apartment Models in later articles. In fact, I have found quite a lot of ground to cover on STAs alone and thus the need to split up this article into two parts.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >This first part will concentrate on theory and understanding of the general architecture of STAs. The second part will focus on solidifying the foundations built up in part one by looking at more sophisticated examples.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >I will present several illustrative test programs as well as a custom-developed C++ class named </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   courier=""   newmso-fareast-font-familycolor=""   mso-font-kerningpt=""   lang="EN-US"   >CComThread</span><span style="mso-bidi-font-size: 10.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > which is a wrapper/manager for a Win32 thread that contains COM objects or references to COM objects. </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >CComThread</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > also provides useful utilities that help in inter-thread COM method calls.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >I will show how to invoke an object's methods from across different threads. I will also invoke an event of an object from another thread. Throughout this article, I will concentrate my explanations on Single Threaded Apartment COM objects and threads with some mention of other Apartment Models for comparison purposes. I chose to expound on the STA because this is the Apartment Model most frequently recommended by Wizards. The default model set by the ATL wizard is the STA. This model is useful in ensuring thread-safety in objects without the need to implement a sophisticated thread-synchronization infrastructure.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 2;background:white;"   align="left"   ><b><span style="font-size:14.0pt;mso-bidi-font-size: 13.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familycolorffmso-font-kerningpt=""   lang="EN-US"   >Synopsis</span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Listed below are the main sections of this article together with general outlines of each of their contents:</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 4;background:white;"   align="left"   ><b><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   colorcdmso-font-kerningpt=""   lang="EN-US"   >COM Apartments</span></b><b><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   ></span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >This section gives a general introduction to COM Apartments. We explore what they are, what they are designed for, and why the need for them. We also discuss the relationship between apartments, threads and COM objects and learn how threads and objects are taught to live with each other in apartments.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 4;background:white;"   align="left"   ><b><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   colorcdmso-font-kerningpt=""   lang="EN-US"   >The Single-Threaded Apartment</span></b><b><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   ></span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >This section begins our in-depth study of the Single-Threaded Apartments and serves as a "warm-up" to the heavy-going sections that follow. We layout clearly the thread access rules of an STA. We also see how COM makes such effective use of the good old message loop. We then touch on the advantages and disadvantages of STAs in general before proceeding to discuss implementation issues behind the development of STA COM objects and STA threads.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 4;background:white;"   align="left"   ><b><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   colorcdmso-font-kerningpt=""   lang="EN-US"   >Demonstrating The STA</span></b><b><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   ></span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >This section and the next ("EXE COM Servers And Apartments") are filled with detailed descriptions of several test programs. This is the main aim of this article: to show concepts by clear examples. In this section, each test program is aimed at demonstrating one particular type of STA (beginners may be surprised to learn that there are actually three types of STAs !). The reader will note that our approach to demonstrating STAs is very simple. The challenge for me is to demonstrate clearly the different types of STAs using this simple test principle.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 4;background:white;"   align="left"   ><b><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   colorcdmso-font-kerningpt=""   lang="EN-US"   >EXE COM Servers And Apartments</span></b><b><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   ></span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >The last major section of this article explores EXE COM Servers and their relationship with Apartments. Some of the important differences between a DLL Server and an EXE Server are listed. From this section, I hope the reader gets to understand the important role that Class Factories play. I have deliberately written by hand the source codes used for the demonstration program in order to illustrate some concepts. The use of ATL Wizards will have made this more troublesome.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Without further ado, let us begin by exploring the principles behind the COM Apartments in general.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 2;background:white;"   align="left"   ><a name="COM_APARTMENTS" rel="nofollow"   ></a><b><span style="font-size:14.0pt;mso-bidi-font-size:13.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familycolorffmso-font-kerning=""   pt=""   lang="EN-US"   >COM Apartments</span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >To understand how COM deals with threads, we need to understand the concept of an <b><i>apartment</i></b>. An apartment is a logical container inside an application for COM objects which share the same thread access rules (i.e., regulations governing how the methods and properties of an object are invoked from threads within and without the apartment in which the object belongs).</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >It is conceptual in nature and does not present itself as an object with properties or methods. There is no handle type that can be used to reference it nor are there APIs that can be called to manage it in any way.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >This is perhaps one of the most important reasons why it is so difficult for newbies to understand COM Apartments. It is so abstract in nature.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Apartments may have been much easier to understand and learn if there was an API named </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >CoCreateApartment()</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > (with a parameter that indicates the apartment type), and some other supporting APIs like </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   newmso-fareast-font-familycolormso-font-kerning=""   pt=""   lang="EN-US"   >CoEnterApartment()</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >. It would have been even better still if there was a Microsoft supplied coclass with an interface like </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >IApartment</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > with methods that manage the threads and objects inside an apartment. Programmatically, there seem to be no tangible way to look at apartments.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >To help the newbie cope with the initial learning curve, I have the following advise on the way to perceive apartments:</span></p>  <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >They      are created by <i>implication</i>. There are no direct function calls to      create them or to detect their presence. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Threads      and objects enter apartments and engage in apartment-related activities      also by <i>implication</i>. There are also no direct function calls to do      so. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Apartment      Models are more like <i>protocols</i>, or a set of rules to follow. </span></li></ol>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familycolorffmso-font-kerningpt=""   lang="EN-US"   >What Do COM Apartments Aim To Achieve?</span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >In an operating environment in which multiple-threads can have legitimate access to various COM objects, how can we be sure that the results we expect from invoking the methods or properties of an object in one thread will not be inadvertently undone by the invocation of methods or properties of the same object from another thread?</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >It is towards resolving this issue that COM Apartments are created. COM Apartments exist for the purpose of ensuring something known as <b><i>thread-safety</i></b>. By this, we mean the safe-guarding of the internal state of objects from uncontrolled modification via equally uncontrolled access of the objects' public properties and methods running from different threads.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >There are three types of Apartment Models in the COM world: <b>Single-Threaded Apartment (STA)</b>, <b>Multi-Threaded Apartment (MTA)</b>, and <b>Neutral Apartment</b>. Each apartment represents one mechanism whereby an object's internal state may be synchronized across multiple threads.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Apartments stipulate the following general guidelines for participating threads and objects:</span></p>  <ul type="disc"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Each      COM object is assigned to live in one and only one apartment. This is      decided at the time the object is created at runtime. After this initial      setup, the object remains in that apartment throughout its lifetime. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >A      COM thread (i.e., a thread in which COM objects are created or COM method      calls are made) also belongs to an apartment. Like COM objects, the      apartment in which a thread lives is also decided at initialization time.      Each COM thread also remains in their designated apartment until it      terminates. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Threads      and objects which belong to the same apartment are said to follow the same      thread access rules. Method calls which are made inside the same apartment      are performed directly without any assistance from COM. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Threads      and objects from different apartments are said to play by different thread      access rules. Method calls made across apartments are achieved via      marshalling. This requires the use of proxies and stubs. </span></li></ul>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Besides ensuring thread-safety, another important benefit that Apartments deliver to objects and clients is that neither an object nor its client needs to know nor care about the Apartment Model used by its counterpart. The low-level details of Apartments (especially its marshalling mechanics) are managed solely by the COM sub-system and need not be of any concern to developers.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familycolorffmso-font-kerningpt=""   lang="EN-US"   >Specifying The Apartment Model Of A COM Object</span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >From here onwards until the section <b>"EXE COM Servers And Apartments"</b> later on below, we will refer to COM objects which are implemented in DLL servers.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >As mentioned, a COM object will belong to exactly one runtime apartment and this is decided at the time the object is created by the client. However, how does a COM object indicate its Apartment Model in the first place?</span></p>  <span style="font-size: 10.5pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningptmso-ansi-languageen-usmso-fareast-languagezh-cn=""   mso-bidi-languagear-sa=""   lang="EN-US"   >Well, for a COM coclass implemented in a DLL Server, when COM proceeds to instantiate it, it refers to the registry string value named <b>"ThreadingModel"</b> which is located in the component's <b>"InProcServer32"</b> registry entry.<br></span><div><img title="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   alt="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   style="margin:0 10px 0 0;"   src="pic/img853.ph.126.net_Ho8ePYa1ecVzCt03O3Mvig==_2744943972883853123.jpg"   ></div>&nbsp;<br>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >This setting is controlled by the developers of the COM object themselves. When you develop a COM object using ATL, for example, you can specify to the ATL Wizard the threading model the object is to use at runtime.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >The table below shows the appropriate string values and the corresponding Apartment Model that each indicates:</span></p>  <table style="width:100.0%;mso-cellspacing:.7pt;mso-yfti-tbllook:1184;mso-padding-alt:  1.5pt 1.5pt 1.5pt 1.5pt;"   border="1"   cellpadding="0"   cellspacing="1"   width="100%"   >  <tbody><tr style="mso-yfti-irow:0;mso-yfti-firstrow:yes;"   >   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >S/No</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >Registry Entry</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >Apartment Model</span></p>   </td>  </tr>  <tr style="mso-yfti-irow:1;"   >   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >1</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >"Apartment"</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >STA</span></p>   </td>  </tr>  <tr style="mso-yfti-irow:2;"   >   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >2</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >"Single" or value absent</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >Legacy STA</span></p>   </td>  </tr>  <tr style="mso-yfti-irow:3;"   >   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >3</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >"Free"</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >MTA</span></p>   </td>  </tr>  <tr style="mso-yfti-irow:4;"   >   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >4</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >"Neutral"</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >Neutral Apartment</span></p>   </td>  </tr>  <tr style="mso-yfti-irow:5;mso-yfti-lastrow:yes;"   >   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >5</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >"Both"</span></p>   </td>   <td style="padding:1.5pt 1.5pt 1.5pt 1.5pt;"   >   <p style="text-align:left;line-height:14.4pt;   mso-pagination:widow-orphan;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >The Apartment Model of the creating thread.</span></p>   </td>  </tr> </table>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >We will be talking about the Legacy STA later on in this article. The "Both" string value indicates that the COM object can live equally well inside an STA and inside an MTA. That is, it can live in <i>either</i> model. We shall return to this registry entry in a later article after the MTA has been fully expounded.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familycolorffmso-font-kerningpt=""   lang="EN-US"   >Specifying The Apartment Model Of A COM Thread</span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Now, onto threads. Every COM thread must initialize itself by calling the API </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >CoInitializeEx()</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > and passing as the second parameter either </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >COINIT_APARTMENTTHREADED</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > or </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >COINIT_MULTITHREADED</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >A thread which has called </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   courier=""   newmso-fareast-font-family=""   colormso-font-kerningpt=""   lang="EN-US"   >CoInitializeEx()</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > is a COM thread and is said to have <b><i>entered an apartment</i></b>. This will be so until the thread calls </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   newmso-fareast-font-familycolormso-font-kerning=""   pt=""   lang="EN-US"   >CoUninitialize()</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   > or simply terminates.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 2;background:white;"   align="left"   ><a name="THE_SINGLE_THREADED_APARTMENT" rel="nofollow"   ></a><b><span style="font-size:14.0pt;mso-bidi-font-size:13.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familycolorffmso-font-kerning=""   pt=""   lang="EN-US"   >The Single-Threaded Apartment</span></b></p>  <span style="font-size:10.5pt;mso-bidi-font-size:10.0pt;font-family: ;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningptmso-ansi-languageen-usmso-fareast-languagezh-cn=""   mso-bidi-languagear-sa=""   lang="EN-US"   >A single-threaded apartment can be illustrated by the following diagram:</span><br><div><img title="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   alt="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   style="margin:0 10px 0 0;"   src="pic/img128.ph.126.net_A5InC2pMUTsJpjUF131ZaQ==_2103743975937380564.jpg"   ></div>&nbsp;<br>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >An STA can contain exactly one thread (hence the term <i>single-threaded</i>). However, an STA can contain as many objects as it likes. The special thing about the thread contained within an STA is that it must, <b>if the objects are to be exported to other threads</b>, have a <b><i>message loop</i></b>. We will return to the subject of message loops in a sub-section later on and explore how they are used by STAs.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >A thread enters an STA by specifying </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   newmso-fareast-font-family=""   colormso-font-kerningpt=""   lang="EN-US"   >COINIT_APARTMENTTHREADED</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > when it calls </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   courier=""   newmso-fareast-font-familycolor=""   mso-font-kerningpt=""   lang="EN-US"   >CoInitializeEx()</span><span style="mso-bidi-font-size: 10.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >, or by simply calling </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >CoInitialize()</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > (calling </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   courier=""   newmso-fareast-font-familycolor=""   mso-font-kerningpt=""   lang="EN-US"   >CoInitialize()</span><span style="mso-bidi-font-size: 10.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > will actually invoke </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >CoInitializeEx()</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > with </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >COINIT_APARTMENTTHREADED</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >). A thread which has entered an STA is also said to have <b><i>created</i></b> that apartment (after all, there are no other threads inside that apartment to first create it).</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >A COM object enters an STA both by specifying "Apartment" in the appropriate string value in the registry and by being instantiated inside an STA thread.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >In the above diagram, we have two apartments. Each apartment contains two objects and one thread. We can postulate that each thread has, early in their life, called </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >CoInitialize(NULL)</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > or </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >CoInitializeEx(NULL, COINIT_APARTMENTTHREADED)</span><span style="mso-bidi-font-size: 10.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >We can also tell that </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   courier=""   newmso-fareast-font-familycolor=""   mso-font-kerningpt=""   lang="EN-US"   >Obj1</span><span style="mso-bidi-font-size: 10.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >, </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >Obj2</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >, </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >Obj3</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >Obj4</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > are each marked as of "Apartment" threading model in the registry, and that </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   newmso-fareast-font-familycolormso-font-kerning=""   pt=""   lang="EN-US"   >Obj1</span><span style="mso-bidi-font-size:10.0pt;font-family: ;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   > and </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   courier=""   newmso-fareast-font-family=""   colormso-font-kerningpt=""   lang="EN-US"   >Obj2</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > were created inside </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >Thread1</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >Obj3</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >Obj4</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > were created inside Threa</span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   courier=""   newmso-fareast-font-familycolor=""   mso-font-kerningpt=""   lang="EN-US"   >d</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningpt=""   lang="EN-US"   >2.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familycolorffmso-font-kerningpt=""   lang="EN-US"   >STA Thread Access Rules</span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >The following are the thread access rules of an STA:</span></p>  <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >An      STA object created inside an STA thread will reside in the same STA as its      thread. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >All      objects inside an STA will receive method calls only from the thread of      the STA. </span></li></ol>  <span style="font-size:10.5pt;mso-bidi-font-size:10.0pt;font-family: ;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningptmso-ansi-languageen-usmso-fareast-languagezh-cn=""   mso-bidi-languagear-sa=""   lang="EN-US"   >Point 1 is natural and is easily understood. However, note that <u>two objects of the same coclass and from the same DLL server created in separate STA threads will not be in the same apartment</u>. This is illustrated in the diagram below:</span><br><div><img title="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   alt="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   style="margin:0 10px 0 0;"   src="pic/img124.ph.126.net_7M9m-1hfE_z-oecpxfEvGQ==_1606940642042518638.jpg"   ></div>&nbsp;<br>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Hence any method calls between </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   courier=""   newmso-fareast-font-family=""   colormso-font-kerningpt=""   lang="EN-US"   >Obj1</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >Obj2</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > are considered cross-apartment and must be performed with COM marshalling.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >Concerning point 2, there are only two ways that an STA object's methods are invoked:</span></p>  <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >From      its own STA thread. In this case, the method call is naturally serialized.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >From      another thread (whatever the Apartment). In this case, COM ensures that      the object will receive method calls only from its own STA thread by      stipulating that this STA thread must contain a message loop. </span></li></ol>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >We have mentioned this point about message loops previously, and before we can go on discussing the internals of STAs, we must cover the subject of message loops and see how they are intimately connected with STAs. This is discussed next.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   verdanasans-serifmso-fareast-font-family=""   mso-bidi-font-familycolorffmso-font-kerningpt=""   lang="EN-US"   >The Message Loop</span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   >A thread that contains a message loop is also known as a <b><i>user-interface thread</i></b>. A user-interface thread is associated with one or more windows which are created in that thread. The thread is often said to <i>own</i> these windows. The window procedure for a window is called only by the thread that owns the window. This happens when the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   courier=""   new=""   mso-fareast-font-familycolormso-font-kerningpt=""   lang="EN-US"   >DispatchMessage()</span><span style="mso-bidi-font-size:10.0pt;"   verdanasans-serif=""   mso-fareast-font-familymso-bidi-font-familymso-font-kerningpt=""   lang="EN-US"   > API is called inside the thread.</span></p>  <span style="font-size:10.5pt;mso-bidi-font-size:10.0pt;font-family: ;"   verdanasans-serifmso-fareast-font-familymso-bidi-font-family=""   mso-font-kerningptmso-ansi-languageen-usmso-fareast-languagezh-cn=""   mso-bidi-languagear-sa=""   lang="EN-US"   >Any thread may send or post a message to any window but the window procedure of the target window will only be executed by the owning thread. The end result is that all messages to a target window are <b>synchronized</b>. That is, the window is guaranteed to receive <b><i>and process</i></b> messages in the order in which the messages are sent/posted.</span><br><div><img title="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   alt="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   style="margin:0 10px 0 0;"   src="pic/img472.ph.126.net_51BRxa5ImwLU4qJL5hCeuw==_3082432469959632548.jpg"   ></div>&nbsp;<br><wbr><p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The  benefit to Windows application developers is that window procedures  need not be thread-safe. Each window message becomes an atomic action  request which will be processed completely before the next message is  entertained.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >This  presents to COM a readily available, built-in facility in Windows that  can be used to achieve thread-safety for COM objects. Simply put, all  method calls from external apartments to an STA object are accomplished  by COM posting private messages to a hidden window associated with that  object. The window procedure of that hidden window then arranges the  call to the object and arranges the return value back to the caller of  the method.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Note  that when external apartments are involved, COM will always arrange for  proxies and stubs to be involved as well so message loops form only <i>part</i> of the STA protocol.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >There are two important points to note:</span></p>   <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l2 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The       above-mentioned system of using a message-loop to invoke STA COM  object      methods is only applicable when the calls are from an  external apartment      (whatever model it takes). Remember that calls  made from inside an STA      goes without any intervention by COM. These  are naturally serialized by      the execution sequence of the STA  thread itself. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l2 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >If       an STA thread fails to get and dispatch the messages in its  message queue,      the COM objects in the thread's apartment will not  receive incoming      inter-apartment calls. </span></li></ol>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Concerning point 2, it is important to note that APIs like </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >Sleep()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >, </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >WaitForSingleObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >, </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >WaitForMultipleObjects()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  will disrupt the flow of thread message handling. As such, if an STA  thread needs to wait on some synchronization object, special handling  will need to be arranged to ensure that the message loop is not  disrupted. We shall examine how this can be done when we study our  sample code later on.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Take  note that in some circumstances, an STA thread need not contain a  message loop. We will return to explain this in the section <b>"Implementing an STA Thread"</b> later on.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >It should be clear now how an STA achieves its thread access rules.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >Benefits Of Using STA</span></b></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The  main advantage to using an STA is simplicity. Besides a few basic code  overheads for COM object servers, relatively few synchronization code is  necessary for the participating COM objects and threads. All method  calls are automatically serialized. This is especially useful for  user-interface-based COM objects (a.k.a. COM ActiveX Controls).</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Because STA objects are always accessed from the same thread, it is said to have <i>thread affinity</i>.  And with thread affinity, STA object developers can use thread local  storage to keep track of an object's internal data. Visual Basic and MFC  use this technique for development of COM objects and hence are STA  objects.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Besides  using it for benefits, it is sometimes inevitable to use STAs when  there is a need to support legacy COM components. COM components  developed in the days of Microsoft Windows NT 3.51 and Microsoft Windows  95 could only use the Single-Threaded Apartment. Multi-Threaded  Apartments became available for usage in Windows NT 4.0 onwards and in  Windows 95 with DCOM extensions.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >Disadvantages Of Using STA</span></b></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >There  is a flip side to everything in life and there are disadvantages to  using STA. The STA architecture can impose significant performance  penalties when an object is accessed by many threads. Each thread's  access to the object is serialized and so each thread must wait in line  for its turn to have a go with the object. This waiting time may result  in poor application response or performance.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The  other issue which can result in poor performance is when an STA  contains many objects. Remember that an STA contains only one thread and  hence will contain only one thread message queue. This being the case,  calls to separate objects within that STA will all be serialized by the  message queue. Whenever a method call is made on an STA object, the STA  thread may be busy servicing another object.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The  disadvantages of using the STA must be measured against the possible  advantages. It all depends on the architecture and design of the project  at hand.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >Implementing An STA COM Object And Its Server</span></b></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Implementing  an STA COM object generally frees the developer from having to  serialize access to the object's internal member data. However, the STA  cannot ensure the thread-safety of a COM server DLL's global data and  global exported functions like </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DllGetClassObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DllCanUnloadNow()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.  Remember that a COM server's objects could be created in any thread and  that two STA objects from the same DLL server can be created in two  separate STA threads.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >In  this situation, the global data and functions of the server may well be  accessed from two different threads without any serialization from COM.  The message loops of the threads cannot lend any help either. After  all, it is not an object's internal state that is at stake here. It is  the server's internal state. Hence all access to global variables and  functions of the server will need to be serialized properly because more  than one object may try to access these from different threads. This  rule also applies to class static variables and functions.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >One well-known global variable of COM servers is the <b>global object count</b>. This variable is accessed by the equally well-known global exported functions </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DllGetClassObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DllCanUnloadNow()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. The APIs </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >InterlockedIncrement()</span><span style="mso-bidi-font-size: 10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >InterlockedDecrement()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > may be used to protect simultaneous access (from different threads) to the global object count. </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >DllGetClassObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > will in turn make use of the class factories of COM objects and these must be examined for thread-safety too.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Hence the following is a general guideline for implementing STA Server DLLs:</span></p>   <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Server      DLLs must have thread-safe standard entry point functions (e.g., </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >DllGetClassObject()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >DllCanUnloadNow()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   >). </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Private      (non-exported) global functions of the Server DLL must be thread-safe. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Private      global variables (especially the global object count) must be thread-safe.      </span></li></ol>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The purpose of the </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >DllGetClassObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > function is to supply to callers a <b>class object</b>. This class object is returned based on a CLSID and will be referenced by a pointer to one of its interfaces (usually, </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >IClassFactory</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >). </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DllGetClassObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > is not called directly by COM object consumers. It is instead called from within the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >CoGetClassObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > API.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >It is from this class object that instances of a CLSID is created (via </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >IClassFactory::CreateInstance()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >). We can look at the </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >DllGetClassObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > function as the gateway to the COM object creation. The important point to note about </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DllGetClassObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > is that it affects the global object count.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DllCanUnloadNow()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  function returns a value to its caller that determines whether the COM  Server DLL contains objects which are still alive and are servicing  clients. This </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DllCanUnloadNow()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  function uses the global object count to decide its return value. If no  more objects are still alive, the caller can safely unload the COM  Server DLL from memory.</span></p>   <p style="text-align: left; line-height: 14.4pt; background: none repeat scroll 0% 0% white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DllGetClassObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DllCanUnloadNow()</span><span style=""   lang="EN-US"   >  functions should be arranged for thread-safety such that at least the  global object count is kept in synch. A common way that the global  object count is incremented and decremented is when an object is created  and destroyed respectively (i.e., during the constructor and destructor  of the object's implementation). The following sample code illustrates  this:</span></p><p style="text-align: left; line-height: 14.4pt; background: none repeat scroll 0% 0% white;"   align="left"   ><wbr><br></p><div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >CSomeObject::CSomeObject()</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><i><span style="color:green;"   >// Increment the global count of objects.</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>InterlockedIncrement(&amp;g_lObjsInUse);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>    <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;background:white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >&nbsp;</span></p>    <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >CSomeObject::~CSomeObject()</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><i><span style="color:green;"   >// Decrement the global count of objects.</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>InterlockedDecrement(&amp;g_lObjsInUse);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>    <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The above code snippets show how the global object counter "</span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >g_lObjsInUse</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >" is incremented using the </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >InterlockedIncrement()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > API during the constructor of an object implemented by the C++ class </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >CSomeObject</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. Conversely, during the destructor of </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >CSomeObject</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >, "</span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >g_lObjsInUse</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >" is decremented by the </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >InterlockedDecrement()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > API.</span></p>    <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >No  details can be advised on how to ensure the thread-safety of private  global functions and global variables. This must be left to the  expertise and experience of the developers themselves.</span></p>    <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Ensuring  thread-safety for a COM server need not be a complicated process. In  many situations, it requires simple common sense. It is safe to say that  the above guidelines are relatively easy to comply with and do not  require constant re-coding once put in place. Developers using ATL to  develop COM servers will have these covered for them (except for the  thread-safety of private global data and functions) so that they can  concentrate fully on the business logic of their COM objects.</span></p>    <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >Implementing An STA Thread</span></b></p>    <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >An STA thread needs to initialize itself by calling </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >CoInitialize()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > or </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >CoInitializeEx(COINIT_APARTMENTTHREADED)</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.  Next, if the objects it creates are to be exported to other threads  (i.e., other Apartments), it must also provide a message loop to process  incoming messages to the hidden windows of COM objects. Take note that  it is the hidden windows' window procedures that receive and process  these private messages from COM. The STA thread itself does not need to  process the message.</span></p>    <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The following code snippet presents the skeleton of an STA thread:</span></p>    <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >DWORD WINAPI ThreadProc(LPVOID lpvParamater)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><i><span style="color:green;"   >/* Initialize COM and declare this thread to be an STA thread. */</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoInitialize(NULL);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>...</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>...</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>...</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><i><span style="color:green;"   >/* The message loop of the thread. */</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>MSG msg;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >while</span> (GetMessage(&amp;msg, NULL, NULL, NULL))</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>TranslateMessage(&amp;msg);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>DispatchMessage(&amp;msg);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>}</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoUninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >return</span> <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>    <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The code snippet above looks vaguely similar to a </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >WinMain()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > function. In fact, the </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >WinMain()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > of a Windows application runs in a thread too.</span></p>    <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >In fact, you can implement your STA thread just like a typical </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >WinMain()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  function. That is, you can create windows just prior to the message  loop and run your windows via appropriate window procedures. You may opt  to create COM objects and manage them in these window procedures. Your  window procedures may also make cross-apartment method calls to external  STA objects.</span></p>    <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >However,  if you do not intend to create windows inside your thread, you will  still be able to create, run objects and make cross-apartment method  calls across external threads. These will be explained when we discuss  some of the advanced example codes in part two of this article.</span></p>    <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 4;background:white;"   align="left"   ><b><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Special cases where no message loop is required in an STA Thread</span></b></p>    <p style="text-align: left; line-height: 14.4pt; background: none repeat scroll 0% 0% white;"   align="left"   ><span style=""   lang="EN-US"   >Take  note that in some cases, a message loop is not required in an STA  thread. An example of this can be seen in simple cases where an  application simply creates and uses objects without having its objects  marshaled to other apartments. The following is an example:</span></p><p style="text-align: left; line-height: 14.4pt; background: none repeat scroll 0% 0% white;"   align="left"   ><wbr><br></p><div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >int</span><span style="font-size:10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   > main()</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoInitialize(NULL);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >if</span> (<span style="color:navy;"   >1</span>)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ISimpleCOMObject1Ptr spISimpleCOMObject1;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject1.CreateInstance(<span style="color:blue;"   >__uuidof</span>(SimpleCOMObject1));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject1 -<span style="color:blue;"   >&gt;</span> Initialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject1 -<span style="color:blue;"   >&gt;</span> Uninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>}</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoUninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >return</span> <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>     <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The above example shows the main thread of a console application in which an STA is established when we call </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >CoInitialize()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. Note that there is no message loop defined inside this thread. We also go on to create a COM object based on the </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >ISimpleCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > interface. Note that our calls to </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >Initialize()</span><span style="mso-bidi-font-size: 10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >Uninitialize()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  go successfully. This is because the method calls are made inside the  same STA and no marshalling and no message loop is required.</span></p>     <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >However, if we had called </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >::CoInitializeEx(NULL, COINIT_MULTITHREADED)</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > instead of </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >CoInitialize()</span><span style="mso-bidi-font-size: 10.0pt;"   lang="EN-US"   >, thereby making the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > thread an MTA thread instead of an STA thread, four things will happen:</span></p>     <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l3 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      calls to </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >Initialize()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      and </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >Uninitialize()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      will be made <i>with</i> the help of COM marshalling. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l3 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      COM object </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spISimpleCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      will reside in a default STA created by the COM sub-system. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l3 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   > thread still does not need      any message loop, <b>but</b>... </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l3 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >A      message loop <i>will</i> be used in the calls to </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >Initialize()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      and </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >Uninitialize()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li></ol>     <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The  message loop that is used in this context is the message loop that is  defined in the default STA. We will talk about the default STA later on  in the section on <b>"The Default STA"</b>.</span></p>     <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Note that whenever you <i>do need</i>  to provide a message loop for an STA thread, then you must ensure that  this message loop is serviced constantly without disruption.</span></p>     <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 2;background:white;"   align="left"   ><a name="DEMONSTRATING_THE_STA" rel="nofollow"   ></a><b><span style="font-size:14.0pt;mso-bidi-font-size:13.0pt;"   lang="EN-US"   >Demonstrating The STA</span></b></p>     <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We  will now attempt to demonstrate STAs. The approach we use is to observe  the ID of the thread which is executing when a COM object's method is  invoked. For a standard STA object, this ID must match that of the  thread of the STA.</span></p>     <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >If  an STA object does not reside in the thread in which it is created  (i.e., this thread is not an STA thread), then the ID of this thread  will not match that of the thread which executes the object's methods.  This basic principle is used throughout the examples of this article.</span></p>     <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >The Standard STA</span></b></p>     <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let  us now observe STAs in action. To start, we examine the standard STA. A  process may contain as many standard STAs as is required. Our example  uses a simple example STA COM object (coclass </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >SimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > which implements interface </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >). The source for this STA object is located in the "<i>SimpleCOMObject2</i>" folder in the ZIP file accompanying this article. The </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > interface includes just one method: </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.</span></p>     <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > is very simple. It displays a message box which shows the ID of the thread in which the method is running on:</span></p>     <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >STDMETHODIMP CSimpleCOMObject2::TestMethod1()</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;</span>TCHAR szMessage[<span style="color:navy;"   >256</span>];</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;</span>sprintf (szMessage, <span style="color:purple;"   >"Thread ID : 0x%X"</span>, GetCurrentThreadId());</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;</span>::MessageBox(NULL, szMessage, <span style="color:purple;"   >"TestMethod1()"</span>, MB_OK);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;</span><span style="color:blue;"   >return</span> S_OK;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>     <p style="text-align: left; line-height: 14.4pt; background: none repeat scroll 0% 0% white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We will also be using a sample test program which instantiates coclass </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >SimpleCOMObject2</span><span style=""   lang="EN-US"   > and calls its method. The source for this test program can be found in the folder "<i>Test Programs\VCTests\DemonstrateSTA\VCTest01</i>" in the source ZIP file.</span></p><p style="text-align: left; line-height: 14.4pt; background: none repeat scroll 0% 0% white;"   align="left"   ><wbr><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The test program consists of a </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > function ...:</span>      </p><div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >int</span><span style="font-size:10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   > main()</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>HANDLE hThread = NULL;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DWORD<span style="mso-spacerun:yes;"   >&nbsp; </span>dwThreadId = <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DisplayCurrentThreadId();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >if</span> (<span style="color:navy;"   >1</span>)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ISimpleCOMObject2Ptr spISimpleCOMObject2;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2.CreateInstance(<span style="color:blue;"   >__uuidof</span>(SimpleCOMObject2));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2 -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>hThread = CreateThread</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>(</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPSECURITY_ATTRIBUTES)NULL, <i><span style="color:green;"   >// SD</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(SIZE_T)<span style="color:navy;"   >0</span>,<span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span><i><span style="color:green;"   >// initial stack size</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPTHREAD_START_ROUTINE)ThreadFunc, <i><span style="color:green;"   >// thread function</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPVOID)NULL,<span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span style="color:green;"   >// thread argument</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(DWORD)<span style="color:navy;"   >0</span>,<span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span style="color:green;"   >// creation option</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPDWORD)&amp;dwThreadId<span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span style="color:green;"   >// thread identifier</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>WaitForSingleObject(hThread, INFINITE);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2 -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>}</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoUninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >return</span> <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>      <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >... a thread entry point function named </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >:</span></p>      <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >DWORD WINAPI ThreadFunc(LPVOID lpvParameter)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DisplayCurrentThreadId();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >if</span> (<span style="color:navy;"   >1</span>)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ISimpleCOMObject2Ptr spISimpleCOMObject2A;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ISimpleCOMObject2Ptr spISimpleCOMObject2B;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2A.CreateInstance(<span style="color:blue;"   >__uuidof</span>(SimpleCOMObject2));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2B.CreateInstance(<span style="color:blue;"   >__uuidof</span>(SimpleCOMObject2));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2A -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2B -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>}</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoUninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >return</span> <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>      <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >... and a utility function named </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DisplayCurrentThreadId()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > that shows a message box displaying the ID of the currently running thread:</span></p>      <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><i><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >/* Simple function that displays the current thread ID. */</span></i><span style="font-size:10.0pt; mso-bidi-font-size:9.0pt;"   lang="EN-US"   ></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >void</span><span style="font-size:10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   > DisplayCurrentThreadId()</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>TCHAR szMessage[<span style="color:navy;"   >256</span>];</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>sprintf (szMessage, <span style="color:purple;"   >"Thread ID : 0x%X"</span>, GetCurrentThreadId());</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::MessageBox(NULL, szMessage, <span style="color:purple;"   >"TestMethod1()"</span>, MB_OK);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>      <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The  above example shows the creation of two STAs. We prove it by way of  thread IDs. Let us go through the program carefully, starting with the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > function:</span></p>      <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   > function calls the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >CoInitializeEx()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   > API with parameter </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >COINIT_APARTMENTTHREADED</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   >. This makes </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s thread enter an STA. From here onwards, any      STA object created in </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread will be part of the STA headed by </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      call the function </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DisplayCurrentThreadId()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      The ID of </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   >'s thread is displayed.      Let's say this is </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Next,      an instance of coclass </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >SimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      is created (represented by </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >).      This object is an STA object and so it will be in the same STA as </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s thread. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      method is invoked on </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      will display the ID of the thread in which </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      is executing in. You will note that this will be </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      That is, it will be the same as </span><span style="font-size:      12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread ID. Next, we start a thread headed by the entry function </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. Thereafter, we wait for </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > to end by calling the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >WaitForSingleObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      API and waiting on the handle of the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      thread. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >In      the </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      thread, we invoke the </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >CoInitializeEx()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      API with parameter </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >COINIT_APARTMENTTHREADED</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      This makes </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread enter an STA. Note that this STA is different from </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s STA. This is a second STA of the process. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      call on </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >DisplayCurrentThreadId()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      and note that the thread ID of </span><span style="font-size:      12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread is indeed different. Let's say this is </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      next create two instances of coclass </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >SimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      (</span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2A</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      and </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spISimpleCOMObject2B</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >).      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      then call the </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      method of </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spISimpleCOMObject2A</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      and </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spISimpleCOMObject2B</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      IDs of the threads that are running when the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      methods are invoked from </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2A</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      and </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spISimpleCOMObject2B</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      are displayed one at a time. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >You      will note that this ID will be the same as the thread ID of </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. That is, it will be displayed as </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >thread_id_2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      thread will come to an end and we will return to </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo4;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      once again invoke the </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      method on </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      to show that nothing has changed for </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      will still run on </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread (i.e., ID: </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >).      </span></li></ol>      <p style="text-align: left; line-height: 14.4pt; background: none repeat scroll 0% 0% white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >What we have demonstrated here is the straightforward creation of two STAs which were initialized by </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size: 10.0pt;"   lang="EN-US"   >'s thread and by </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s thread. </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size: 10.0pt;"   lang="EN-US"   >'s STA then proceeds to contain the STA object </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s thread will also contain the STA objects </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2A</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2B</span><span style=""   lang="EN-US"   >. The following example illustrates the above:</span></p><div><img title="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   alt="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   style="margin:0 10px 0 0;"   src="pic/img457.ph.126.net_pi84shIc_WD0IRUafe7rQg==_1578230194417894396.jpg"   ></div>&nbsp;<p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><wbr>  </p><p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >An important point to note is that </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >, </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2A</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2B</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > are all instances of the same coclass yet it is possible that they reside in separate STAs. <b>For a standard STA object, what matters is which STA first instantiates it</b>.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Notice also in this example that we had not supplied any message loops in both </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.  They are not needed. The objects in both STAs are used within their own  Apartments and are not used across threads. We even included a call to </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >WaitForSingleObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > in </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  and it did not cause any trouble. There were no occasions to use the  hidden windows of these STA objects. No messages were posted to these  hidden windows and so no message loops were needed.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >In the next section, we will discuss something known as the <b>Default STA</b>.  We will also demonstrate it by example codes. The examples will also  enhance the validity of the above example which we have just studied.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >The Default STA</span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >What  happens when an STA object gets instantiated inside a non-STA thread?  Let us look at a second set of example codes which will be presented  below. This new set of source codes are listed in "<i>Test Programs\VCTests\DemonstrateDefaultSTA\VCTest01</i>". It also uses the example STA COM object of coclass </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >SimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > (implements interface<b> </b></span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >) which was seen in the last example. The current example also uses the utility function </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >DisplayCurrentThreadId()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > that shows a message box displaying the ID of the thread currently running.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let's examine the code:</span></p>  <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >int</span><span style="font-size:10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   > main()</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoInitializeEx(NULL, COINIT_MULTITHREADED);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DisplayCurrentThreadId();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >if</span> (<span style="color:navy;"   >1</span>)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ISimpleCOMObject2Ptr spISimpleCOMObject2;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span><i><span style="color:green;"   >/* If a default STA is to be created and used, it will be created */</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span><i><span style="color:green;"   >/* right after spISimpleCOMObject2 (an STA object) is created. */</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2.CreateInstance(<span style="color:blue;"   >__uuidof</span>(SimpleCOMObject2));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2 -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>}</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoUninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >return</span> <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let us go through the program carefully:</span></p>  <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   > function calls on </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >CoInitializeEx(NULL, COINIT_MULTITHREADED)</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      This way, </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   >'s thread initializes itself      as belonging to an MTA. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      next call </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >DisplayCurrentThreadId()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      The ID of </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   >'s thread will be displayed.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Next,      an STA object </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      is instantiated inside this thread. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Note      that </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      is an STA object which is instantiated inside a non-STA thread. </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   > will not reside in the MTA      and will instead be created inside a <b>default STA</b>. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      call </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      on </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      You will note that the ID of the thread in which </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      executes is <b><i>not</i></b> the same as </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread. </span></li></ol>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >What happened was that </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > will live inside a <b>default STA</b>. All STA objects in a process which are created inside non-STA threads will reside in the default STA.</span></p>  <span style="font-size:10.5pt;mso-bidi-font-size:10.0pt;font-family: ;"   lang="EN-US"   >This default STA was created at the same point when the affected object (</span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="font-size: 10.5pt;"   lang="EN-US"   >, in our example) is created. This is illustrated by the following diagram:<br></span><div><img title="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   alt="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   style="margin:0 10px 0 0;"   src="pic/img460.ph.126.net_7Yp-9d3IFLYbKlTxjUvEOA==_2567896212532539452.jpg"   ></div><wbr>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >As can be seen in the above diagram, since </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > lives in the default STA and not within </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s MTA, </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s call to </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >spISimpleCOMObject2 -</span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >&gt;</span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   > TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > is an inter-apartment method call. This requires marshalling, and hence what </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > receives from COM is <b><i>not</i></b> an actual pointer to </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > but a <b><i>proxy</i></b> to it.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >And  since inter-apartment calls are actually performed, the default STA  must contain a message loop. This is provided for by COM.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Developers new to the world of COM Apartments please note well this intriguing phenomenon: that even though a call to </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >CreateInstance()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > or </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >CoCreateInstance()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  is made inside a thread, the resulting object can actually be  instantiated in another thread. This is performed transparently by COM  behind the scenes. Please therefore take note of this kind of subtle  maneuvering by COM especially during debugging.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let us now look at a more sophisticated example. This time, we use the sources listed in "<i>Test Programs\VCTests\DemonstrateDefaultSTA\VCTest02</i>". This new set of sources also use the same STA COM object of coclass </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >SimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > (implements interface </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >) which was seen in the last example. The current example also uses the utility function </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >DisplayCurrentThreadId()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > that shows a message box displaying the ID of the thread currently running when this function is invoked.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let's examine the code:</span></p>  <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >int</span><span style="font-size:10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   > main()</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>HANDLE hThread = NULL;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DWORD<span style="mso-spacerun:yes;"   >&nbsp; </span>dwThreadId = <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoInitializeEx(NULL, COINIT_MULTITHREADED);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DisplayCurrentThreadId();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >if</span> (<span style="color:navy;"   >1</span>)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ISimpleCOMObject2Ptr spISimpleCOMObject2;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2.CreateInstance(<span style="color:blue;"   >__uuidof</span>(SimpleCOMObject2));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2 -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>hThread = CreateThread</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>(</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPSECURITY_ATTRIBUTES)NULL, <i><span style="color:green;"   >// SD</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(SIZE_T)<span style="color:navy;"   >0</span>,<span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span style="color:green;"   >// initial stack size</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPTHREAD_START_ROUTINE)ThreadFunc, <i><span style="color:green;"   >// thread function</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPVOID)NULL,<span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span style="color:green;"   >// thread argument</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(DWORD)<span style="color:navy;"   >0</span>,<span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span style="color:green;"   >// creation option</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPDWORD)&amp;dwThreadId<span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span style="color:green;"   >// thread identifier</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>WaitForSingleObject(hThread, INFINITE);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2 -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>}</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoUninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >return</span> <span style="color:navy;"   >0</span>;</span></p>  </div>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;background:white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >&nbsp;</span></p>  <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >DWORD WINAPI ThreadFunc(LPVOID lpvParameter)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoInitializeEx(NULL, COINIT_MULTITHREADED);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DisplayCurrentThreadId();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >if</span> (<span style="color:navy;"   >1</span>)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ISimpleCOMObject2Ptr spISimpleCOMObject2A;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ISimpleCOMObject2Ptr spISimpleCOMObject2B;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2A.CreateInstance(<span style="color:blue;"   >__uuidof</span>(SimpleCOMObject2));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2B.CreateInstance(<span style="color:blue;"   >__uuidof</span>(SimpleCOMObject2));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2A -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spISimpleCOMObject2B -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>}</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoUninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >return</span> <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let us go through the program carefully:</span></p>  <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   > function calls </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >CoInitializeEx(NULL, COINIT_MULTITHREADED)</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      thereby making </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   >'s thread enter an MTA. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      call </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >DisplayCurrentThreadId()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      and note the ID of </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread. Let's say this is </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      then instantiate coclass </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >SimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      which implements interface </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      This object is </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      call </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      of this STA object. The ID of the thread under which </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > executes will be displayed. You will note that      this id will <b><i>not</i></b> be </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      That is, it will not be the same as </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread ID. Let's say this ID is </span><span style="font-size:      12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      then start a second thread, executing with the entry function </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >, which initializes itself as belonging to an      MTA. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      ID of this second thread will be displayed when we call </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >DisplayCurrentThreadId()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   >. Let's say this is </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >thread_id_3</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Two      STA objects of coclass </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >SimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      (implementing </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >ISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >)      are instantiated inside this second thread. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      call </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      of the two STA objects inside the second thread. You will see that the ID      of the thread in which </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      executes will <b><i>not</i></b> be </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_3</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      That is, it will not be the same as the ID of </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Instead,      the ID of the thread in which </span><span style="font-size:      12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      executes is actually </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >!      That is, it runs in the same thread as </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      of </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   >. </span></li></ol>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >What we have shown here is a more complicated example of the creation and use of the default STA. </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > is an STA object that got instantiated inside a non-STA thread (</span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s thread). </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2A</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2B</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > were also instantiated inside a non-STA thread (</span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s thread). Therefore, all three objects </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >, </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2A</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2B</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > will all reside in the default STA which is first created when </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spISimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > is created.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >I strongly encourage the reader to modify the source codes and see different results. Change one or more </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >::CoInitializeEx()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > calls from using </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >COINIT_APARTMENTTHREADED</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > to </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >COINIT_MULTITHREADED</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > and vice versa. Put a breakpoint in "</span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >CSimpleCOMObject2::TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >" to see the difference when it is invoked from an STA thread and when it is invoked from an MTA thread.</span></p>  <span style="font-size:10.5pt;mso-bidi-font-size:10.0pt;font-family: ;"   lang="EN-US"   >In the latter case, you will see that the invocation is indirect and that some RPC calls are involved (see diagram below).</span><br><div><img title="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   alt="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   style="margin:0 10px 0 0;"   src="pic/img245.ph.126.net_3qb-ILWHq-l-hqHYNsAPsA==_1380634760767188205.jpg"   ></div><wbr>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >These calls are part of the marshalling code put in motion during inter-apartment calls.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-outline-level: 3;background:white;"   align="left"   ><b><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >The Legacy STA</span></b></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >There is another type of default STA known as the <b><i>Legacy STA</i></b>. This STA is where the legacy COM objects will reside in. By <i>legacy</i>, we mean those COM components that have no knowledge of threads whatsoever. These objects must have their <i>ThreadingModel</i> registry entry set to <b>"Single"</b> or have simply left out any <i>ThreadingModel</i> entry in the registry.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The important point to note about these Legacy STA objects is that all instances of these objects will be created in the <b>same</b> STA. Even if they are created in a thread initialized with </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >::CoInitializeEx(NULL, COINIT_APARTMENTTHREADED)</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >, they will still live and run in the legacy STA if it has already been created.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The  legacy STA is usually the very first STA created in a process. If a  legacy STA object is created before any STA is created, one will be  created by the COM sub-system.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The  advantage of developing a legacy STA object is that all access to all  instances of such objects are serialized. You do not need any  inter-apartment marshalling between any two legacy STA objects. However,  non-legacy STA objects living in non-legacy STAs that want to make  calls to legacy-STA objects must, nevertheless, arrange for  inter-apartment marshalling. The converse (legacy-STA objects making  calls to non-legacy STA objects living in non-legacy STAs) also requires  inter-apartment marshalling. Not a very attractive advantage, I think.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let us showcase two examples. The first example we will cover uses an example Legacy STA COM object of coclass </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >LegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. The source codes for this COM object is listed in "<i>LegacyCOMObject1</i>". This COM object functions similarly with the COM object of coclass </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >SimpleCOMObject2</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > which we have seen in previous examples. </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >LegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > also has a method named </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > which also displays the ID of the thread in which the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > function is executing.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The test program which uses </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >LegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > has its source codes listed in "<i>Test Programs\VCTests\DemonstrateLegacySTA\VCTest01</i>". This current test program also uses the same utility function </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >DisplayCurrentThreadId()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > that shows a message box displaying the ID of the thread currently running when this function is invoked.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let us take a look at the code of the test program:</span></p>  <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >int</span><span style="font-size:10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   > main(){ ::CoInitializeEx(NULL,COINIT_APARTMENTTHREADED);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><i><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >/*::CoInitializeEx(NULL, COINIT_MULTITHREADED); */</span></i><span style="font-size:10.0pt; mso-bidi-font-size:9.0pt;"   lang="EN-US"   ></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DisplayCurrentThreadId();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >if</span> (<span style="color:navy;"   >1</span>)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ILegacyCOMObject1Ptr spILegacyCOMObject1;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spILegacyCOMObject1.CreateInstance(<span style="color:blue;"   >__uuidof</span>(LegacyCOMObject1));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spILegacyCOMObject1 -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>}</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoUninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >return</span> <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Here, I added a call to </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >::CoInitializeEx(NULL, COINIT_APARTMENTTHREADED)</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > together with a commented out call to </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >::CoInitializeEx(NULL, COINIT_MULTITHREADED)</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. I added in the commented out code to easily illustrate the effects when </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s thread is a non-STA thread. Simply uncomment this code (<i>and comment the code above it!</i>) and see different results. More on this later.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let us go through the program carefully:</span></p>  <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      thread running </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   > enters a standard STA. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      display the ID of </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread. Let's say this is </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      then create a Legacy STA object of coclass </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >LegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      call the Legacy STA object's </span><span style="font-size:      12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      method. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      ID of the thread in which </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      is running is displayed. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l1 level1 lfo1;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >You      will find that this thread ID will be </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li></ol>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >What happened in the above example is simple: </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spILegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >, a Legacy STA object, gets instantiated inside the very first STA created in the process (which is </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size: 10.0pt;"   lang="EN-US"   >'s STA). </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s STA is therefore designated a Legacy STA and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spILegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > will live inside this Legacy STA. Note well: <b>the first STA created in a process is special because it is also the Legacy STA</b>.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >If we had switched the parameter to </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >COINIT_MULTITHREADED</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >, as in the following:</span></p>  <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >int</span><span style="font-size:10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   > main()</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><i><span style="color:green;"   >/* ::CoInitializeEx(NULL, COINIT_APARTMENTTHREADED); */</span></i></span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoInitializeEx(NULL, COINIT_MULTITHREADED);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DisplayCurrentThreadId();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >if</span> (<span style="color:navy;"   >1</span>)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ILegacyCOMObject1Ptr spILegacyCOMObject1;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spILegacyCOMObject1.CreateInstance(<span style="color:blue;"   >__uuidof</span>(LegacyCOMObject1));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spILegacyCOMObject1 -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>}</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoUninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >return</span> <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The following would be the outcome:</span></p>  <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l2 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      thread running </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:      10.0pt;"   lang="EN-US"   > enters an MTA. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l2 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      display the ID of </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread. Let's say this is </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l2 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      then create a Legacy STA object of coclass </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >LegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l2 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      call the Legacy STA object's </span><span style="font-size:      12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      method. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l2 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      ID of the thread in which </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      is running is displayed. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l2 level1 lfo2;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >You      will find that this thread ID will <b><i>not</i></b> be </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. </span></li></ol>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >What happened in the above example is also straightforward: </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spILegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >, a Legacy STA object, gets instantiated inside an MTA. It cannot live inside this MTA and so COM creates a default Legacy STA. </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spILegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > will therefore live inside this COM generated Legacy STA.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >A  Legacy STA object behaves very much like a standard STA object as the  above two examples show. However, there is a difference: all Legacy STA  objects can only be created inside the <b><i>same</i></b> STA thread. We will demonstrate this with yet another example code.</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The next example code also uses the same </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >LegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > object which was demonstrated in the last example. This current test program also uses the same utility function </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >DisplayCurrentThreadId()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  that shows a message box displaying the ID of the thread currently  running when this function is invoked. The example code is listed in "<i>Test Programs\VCTests\DemonstrateLegacySTA\VCTest02</i>".</span></p>  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >A new utility function named </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadMsgWaitForSingleObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  makes its debut here. It is a cool function which is useful in many  applications. I shall document this function in part two of this article  as it deserves close attention on its own. For now, simply note that </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadMsgWaitForSingleObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  will allow a thread to wait on a handle while at the same time service  any messages that comes its way. It encapsulates the functionality of a <b>message loop</b> as well as that of </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >WaitForSingleObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >. This function will prove very useful for us as you will see in the example code.</span></p><p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let us take a look at the code of the test program:</span></p>   <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >int</span><span style="font-size:10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   > main()</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>HANDLE hThread = NULL;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DWORD<span style="mso-spacerun:yes;"   >&nbsp; </span>dwThreadId = <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DisplayCurrentThreadId();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >if</span> (<span style="color:navy;"   >1</span>)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ILegacyCOMObject1Ptr spILegacyCOMObject1;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spILegacyCOMObject1.CreateInstance(<span style="color:blue;"   >__uuidof</span>(LegacyCOMObject1));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spILegacyCOMObject1 -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>hThread = CreateThread</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>(</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPSECURITY_ATTRIBUTES)NULL,</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(SIZE_T)<span style="color:navy;"   >0</span>,</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPTHREAD_START_ROUTINE)ThreadFunc,</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPVOID)NULL,</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp; </span><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;</span>(DWORD)<span style="color:navy;"   >0</span>,</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(LPDWORD)&amp;dwThreadId</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ThreadMsgWaitForSingleObject(hThread, INFINITE);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spILegacyCOMObject1 -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>}</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoUninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >return</span> <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>   <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;background:white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >&nbsp;</span></p>   <div style="mso-element:para-border-div;border:solid #FBEDBB 1.0pt;mso-border-alt: solid #FBEDBB .75pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;background:#FBEDBB;"   >  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >DWORD WINAPI ThreadFunc(LPVOID lpvParameter)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoInitializeEx(NULL, COINIT_MULTITHREADED);</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>DisplayCurrentThreadId();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >if</span> (<span style="color:navy;"   >1</span>)</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>{</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ILegacyCOMObject1Ptr spILegacyCOMObject1A;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>ILegacyCOMObject1Ptr spILegacyCOMObject1B;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spILegacyCOMObject1A.CreateInstance(<span style="color:blue;"   >__uuidof</span>(LegacyCOMObject1));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spILegacyCOMObject1B.CreateInstance(<span style="color:blue;"   >__uuidof</span>(LegacyCOMObject1));</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spILegacyCOMObject1A -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp;&nbsp;&nbsp; </span>spILegacyCOMObject1B -<span style="color:blue;"   >&gt;</span> TestMethod1();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>}</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span>::CoUninitialize();</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   ><span style="mso-spacerun:yes;"   >&nbsp; </span><span style="color:blue;"   >return</span> <span style="color:navy;"   >0</span>;</span></p>  <p style="text-align:left;line-height:14.4pt; mso-pagination:widow-orphan;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; background:#FBEDBB;border:none;mso-border-alt:solid #FBEDBB .75pt;padding:0cm; mso-padding-alt:5.0pt 5.0pt 5.0pt 5.0pt;"   align="left"   ><span style="font-size: 10.0pt;mso-bidi-font-size:9.0pt;"   lang="EN-US"   >}</span></p>  </div>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let us go through the program carefully:</span></p>   <ol start="1"   type="1"   ><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      thread executing </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      enters an STA. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      display the ID of the </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      thread. Let's say this thread ID is </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      create an instance of coclass </span><span style="font-size:      12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >LegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      (</span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spILegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >).      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      invoke </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      of </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spILegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      ID of the thread executing </span><span style="font-size:12.0pt;      mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      is displayed. You will note that this is </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      then start a thread headed by </span><span style="font-size:      12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      Thereafter, we wait for this thread to finish by calling </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;font-family:      ;"   lang="EN-US"   >ThreadMsgWaitForSingleObject()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      thread is initialized as a non-STA thread. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >In      the </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      thread, we instantiate two instances of coclass </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >LegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      (</span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spILegacyCOMObject1A</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      and </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spILegacyCOMObject1B</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >).      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      call </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      on </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spILegacyCOMObject1A</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      and </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spILegacyCOMObject1B</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      ID of the thread executing each call to </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      is revealed. You will note that this is </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The      </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      thread will then complete and we return to </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s      thread. </span></li><li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;      text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;mso-list:      l0 level1 lfo3;tab-stops:list 36.0pt;background:white;"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >We      call </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      of </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spILegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      and note that the ID of the thread executing </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      of </span><span style="font-size:12.0pt;mso-bidi-font-size:      11.0pt;"   lang="EN-US"   >spILegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >      has not changed. It is still </span><span style="font-size:      12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >thread_id_1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >.      </span></li></ol>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >Let us analyze this latest test program. The thread executing </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  enters a standard STA. This STA is the first STA created in the  process. Recall that the first STA created in a process is also the  Legacy STA, hence the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s STA is the Legacy STA. Now, </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spILegacyCOMObject1</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > (in </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >) is created as a normal STA object and it resides in the same STA as the one just created in </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size: 10.0pt;"   lang="EN-US"   >.</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >When the second thread (headed by </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >) starts up, it is started as an MTA. Hence any STA object created inside this thread cannot live in this MTA (it cannot use </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size: 10.0pt;"   lang="EN-US"   >'s thread). Both </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spILegacyCOMObject1A</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spILegacyCOMObject1B</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > are STA objects and hence they cannot live inside </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s MTA. Now, if </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >spILegacyCOMObject1A</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > and </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spILegacyCOMObject1B</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >  are normal STAs, a new STA will be created for them to live in.  However, they are Legacy STAs and so they must live in the legacy STA  (if one already exists, and one already does exist).</span></p>   <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;text-align:left;line-height:14.4pt;mso-pagination:widow-orphan;background: white;"   align="left"   ><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >The end result is that they will be accommodated in the Legacy STA created in </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s thread. This is why, when you invoke </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > from </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >, the call is actually marshaled to </span><span style="font-size:12.0pt; mso-bidi-font-size:11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s thread. There is actually inter-apartment marshalling between </span><span style="font-size: 12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   >'s MTA apartment (where the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > call originates) and </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >main()</span><span style="mso-bidi-font-size: 10.0pt;"   lang="EN-US"   >'s STA apartment (where the </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >TestMethod1()</span><span style="mso-bidi-font-size:10.0pt;"   lang="EN-US"   > call is executed).</span></p>   <span style="font-size:10.5pt;mso-bidi-font-size:10.0pt;font-family: ;"   lang="EN-US"   >This is illustrated by the following diagram where </span><span style="font-size:12.0pt;mso-bidi-font-size:11.0pt;"   lang="EN-US"   >spILegacyCOMObject1A</span><span style="font-size:10.5pt;mso-bidi-font-size:10.0pt;"   lang="EN-US"   > is created in </span><span style="font-size:12.0pt;mso-bidi-font-size: 11.0pt;"   lang="EN-US"   >ThreadFunc()</span><span style="font-size: 10.5pt;"   lang="EN-US"   >:<br></span><div><img title="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   alt="Understanding The COM Single-Threaded Apartment （1） - Dsliu - Dspace"   style="margin:0 10px 0 0;"   src="pic/img.ph.126.net_NX__8Xw3WOBP3RnwzvMe_A==_3712654942814113725.jpg"   ></div>&nbsp;<br><span style="font-size: 10.5pt;mso-bidi-font-size:10.0pt;"   lang="EN-US"   ><br></span><span style="font-size: 10.5pt;mso-bidi-font-size:10.0pt;"   lang="EN-US"   ></span>
</body></html>