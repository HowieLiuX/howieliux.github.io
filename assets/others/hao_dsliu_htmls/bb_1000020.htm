<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：Decrypting TLS Browser Traffic With Wireshark – The Easy Way!</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>Decrypting TLS Browser Traffic With Wireshark – The Easy Way!</h2>
<p align="right">发布时间：2015-12-30 18:13
<br>分类名称：SSL</p><br>
<p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >From:</span>
<a rel="nofollow" href="https://jimshaver.net/2015/02/11/decrypting-tls-browser-traffic-with-wireshark-the-easy-way/"   ><span style="font-family:Georgia; font-size:14pt;"   >https://jimshaver.net/2015/02/11/decrypting-tls-browser-traffic-with-wireshark-the-easy-way/</span></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   >
&nbsp;</p><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >Most&nbsp;IT people are somewhat familiar with Wireshark.&nbsp; It is a traffic analyzer, that helps you learn how networking works, diagnose problems and much more.
</span></p><p style="background: white;"   ><a rel="nofollow" href="https://jimshaver.net/wp-content/uploads/2015/02/2015-02-11-22_29_11-.png"   ><img title="Decrypting TLS Browser Traffic With Wireshark – The Easy Way! - Howie - Dspace"   src="pic/img0.ph.126.net_V1ZLijvQxO4nbw802gcXNQ==_6631358036771601645.jpg"   alt=""   border="0"   /></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >One of the problems with the way Wireshark works is that it can't easily analyze encrypted traffic, like&nbsp;<a rel="nofollow" href="http://en.wikipedia.org/wiki/Transport_Layer_Security"   >TLS</a>.&nbsp; It used to be if you had the private key(s) you could feed them into Wireshark and it would decrypt the traffic on the fly, but it only worked when using&nbsp;<a rel="nofollow" href="http://en.wikipedia.org/wiki/RSA_%28cryptosystem%29"   >RSA</a>&nbsp;for the key exchange mechanism. &nbsp;As people have started to embrace&nbsp;<a rel="nofollow" href="http://en.wikipedia.org/wiki/Forward_secrecy"   >forward secrecy</a>&nbsp;this broke, as having the private key is no longer enough derive the actual session key used to decrypt the data. &nbsp;The other problem with this is that a private key should not or can not leave the client, server, or HSM it is in. &nbsp;This lead me to coming up with very contrived ways of man-in-the-middling myself to decrypt the traffic(e.g.&nbsp;<a rel="nofollow" href="http://www.thoughtcrime.org/software/sslstrip/"   >sslstrip</a>&nbsp;or&nbsp;<a rel="nofollow" href="http://mitmproxy.org/"   >mitmproxy</a>).
</span></p><p style="background: white;"   ></p><h3><span style="color:#333333; font-family:Arial;"   >Session Key Logging to the Rescue!<span style="font-size:13pt;"   >
</span></span></h3><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >Well my friends I'm here to tell you that there is an easier way!&nbsp; It turns out that Firefox and Chrome both support logging the symmetric session key used to encrypt TLS traffic to a file.&nbsp; You can then point Wireshark at said file and presto! decrypted TLS traffic.&nbsp; Read on to learn how to set this up.
</span></p><p style="background: white;"   ></p><h3><span style="color:#333333; font-family:Arial;"   >Setting up our Browsers<span style="font-size:13pt;"   >
</span></span></h3><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >We need to set an environmental variable.
</span></p><p style="background: white;"   ></p><h4><span style="color:#333333; font-family:Arial; font-size:14pt;"   >On Windows:
</span></h4><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >Go into your computer properties, then click "Advance system settings" then "Environment Variables…"
</span></p><p style="background: white;"   ><a rel="nofollow" href="https://jimshaver.net/wp-content/uploads/2015/02/2015-02-11-21_36_51-Clipboard.jpg"   ><img title="Decrypting TLS Browser Traffic With Wireshark – The Easy Way! - Howie - Dspace"   src="pic/img0.ph.126.net_kG2nteGm2kwAjvvliIQuyg==_6630766499515664664.jpg"   alt=""   border="0"   /></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >Add a new user variable called "SSLKEYLOGFILE" and point it at the location that you want the log file to be located at.
</span></p><p style="background: white;"   ><a rel="nofollow" href="https://jimshaver.net/wp-content/uploads/2015/02/2015-02-11-21_38_57-Environment-Variables.jpg"   ><img title="Decrypting TLS Browser Traffic With Wireshark – The Easy Way! - Howie - Dspace"   src="pic/img0.ph.126.net_W_sGUo441IPrFnct0JFhrg==_6630427849933507665.jpg"   alt=""   border="0"   /></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   ></p><h4><span style="color:#333333; font-family:Arial; font-size:14pt;"   >On Linux or Mac OS X:
</span></h4><div><table style="border-collapse:collapse;"   border="0"   ><colgroup><col style="width:43px;"   /><col style="width:677px;"   /><tbody valign="top"   ><tr><td vAlign="middle"   ><p>1</p></td><td vAlign="middle"   ><p><span style="font-family:宋体; font-size:12pt;"   >$ export SSLKEYLOGFILE=~/path/to/sslkeylog.log</span></p></td></tr></table></div><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >You can also add this to the last line of your
</span></p><div><table style="border-collapse:collapse;"   border="0"   ><colgroup><col style="width:43px;"   /><col style="width:677px;"   /><tbody valign="top"   ><tr><td vAlign="middle"   ><p>1</p></td><td vAlign="middle"   ><p><span style="font-family:宋体; font-size:12pt;"   >~/.bashrc</span></p></td></tr></table></div><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >on Linux, or
</span></p><div><table style="border-collapse:collapse;"   border="0"   ><colgroup><col style="width:43px;"   /><col style="width:677px;"   /><tbody valign="top"   ><tr><td vAlign="middle"   ><p>1</p></td><td vAlign="middle"   ><p><span style="font-family:宋体; font-size:12pt;"   >~/.MacOSX/environment</span></p></td></tr></table></div><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >on OS X so that it is set every time you log in.
</span></p><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >The next time that we launch Firefox or Chrome they will log your TLS keys to this file.
</span></p><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   ><strong>Edit:</strong>&nbsp;If you are having trouble&nbsp;getting it to work on&nbsp;OS X take a look at the comments below. &nbsp;It seems that Apple has changed how environmental variables work in recent versions of OS X. &nbsp;Try launching firefox and wireshark within the same terminal window with,
</span></p><div><table style="border-collapse:collapse;"   border="0"   ><colgroup><col style="width:43px;"   /><col style="width:677px;"   /><tbody valign="top"   ><tr><td vAlign="middle"   ><p>1<span style="font-family:宋体; font-size:12pt;"   >
</span></p><p>2
</p><p>3</p></td><td vAlign="middle"   ><p><span style="font-family:宋体; font-size:12pt;"   ># export SSLKEYLOGFILE=/Users/username/sslkeylogs/output.log</span>
</p><p><span style="font-family:宋体; font-size:12pt;"   ># open -a firefox</span>
</p><p><span style="font-family:宋体; font-size:12pt;"   ># wireshark</span></p></td></tr></table></div><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >Thanks Tomi for sharing this.
</span></p><p style="background: white;"   ></p><h3><span style="color:#333333; font-family:Arial;"   >Setting up Wireshark<span style="font-size:13pt;"   >
</span></span></h3><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >You need at least Wireshark 1.6 for this to work. &nbsp;We simply go into the preferences of Wireshark
</span></p><p style="background: white;"   ><a rel="nofollow" href="https://jimshaver.net/wp-content/uploads/2015/02/2015-02-11-21_48_49-2015-02-11-21_45_59-Wireshark_-Preferences-Profile_-Default.jpg"   ><img title="Decrypting TLS Browser Traffic With Wireshark – The Easy Way! - Howie - Dspace"   src="pic/img1.ph.126.net_S48iAVgIs0FSfglhc34VLA==_6631281070957653427.jpg"   alt=""   border="0"   /></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >Expand the protocols section:
</span></p><p style="background: white;"   ><a rel="nofollow" href="https://jimshaver.net/wp-content/uploads/2015/02/2015-02-11-21_48_49-2015-02-11-21_45_59-Wireshark_-Preferences-Profile_-Default.jpg"   ><img title="Decrypting TLS Browser Traffic With Wireshark – The Easy Way! - Howie - Dspace"   src="pic/img2.ph.126.net_Agjg9WApIFJKdUNpYlTefw==_6630193653956791727.jpg"   alt=""   border="0"   /></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >Browse to the location of your log file
</span></p><p style="background: white;"   ><a rel="nofollow" href="https://jimshaver.net/wp-content/uploads/2015/02/2015-02-11-21_47_10-Wireshark_-Preferences-Profile_-Default.jpg"   ><img title="Decrypting TLS Browser Traffic With Wireshark – The Easy Way! - Howie - Dspace"   src="pic/img2.ph.126.net_B8pvwxFoIngjB99X-srdCg==_6631403116748336249.jpg"   alt=""   border="0"   /></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   ></p><h3><span style="color:#333333; font-family:Arial;"   >The Results<span style="font-size:13pt;"   >
</span></span></h3><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >This is more along the lines of what we normally see when look at a TLS packet,
</span></p><p style="background: white;"   ><a rel="nofollow" href="https://jimshaver.net/wp-content/uploads/2015/02/2015-02-11-22_29_11-.png"   ><img title="Decrypting TLS Browser Traffic With Wireshark – The Easy Way! - Howie - Dspace"   src="pic/img0.ph.126.net_V1ZLijvQxO4nbw802gcXNQ==_6631358036771601645.jpg"   alt=""   border="0"   /></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >This is what it looks like when you switch to the "Decrypted SSL Data" tab. &nbsp;Note that we can now see the request information in plain-text! &nbsp;Success!
</span></p><p style="background: white;"   ><a rel="nofollow" href="https://jimshaver.net/wp-content/uploads/2015/02/2015-02-11-22_30_28-_Wi-Fi-Wireshark-1.12.3-v1.12.3-0-gbb3e9a0-from-master-1.12.png"   ><img title="Decrypting TLS Browser Traffic With Wireshark – The Easy Way! - Howie - Dspace"   src="pic/img2.ph.126.net_8BN8-wVhzHIRrEpRLL74qg==_6630686235166838456.jpg"   alt=""   border="0"   /></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   ></p><h3><span style="color:#333333; font-family:Arial;"   >Conclusion<span style="font-size:13pt;"   >
</span></span></h3><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >I hope you learned something today, this makes capturing TLS communication so much more straightforward. &nbsp;One of the nice things about this setup is that the client/server machine that generates the TLS traffic doesn't have to have Wireshark on it, so you don't have to gum up a clients machine with stuff they won't need, you can either have them dump the log to a network share or copy it off the machine and reunite it with the machine doing the packet capture later. &nbsp;Thanks for stopping by!
</span></p><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >References:
</span></p><p style="background: white;"   ><a rel="nofollow" href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >Mozilla Wiki</span></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   ><a rel="nofollow" href="https://www.imperialviolet.org/2012/06/25/wireshark.html"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >Imperial Violet</span></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   ><a rel="nofollow" href="http://jsslkeylog.sourceforge.net/"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >jSSLKeyLog</span></a><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >
</span></p><p style="background: white;"   ><span style="color:#333333; font-family:Georgia; font-size:14pt;"   >Photo Credit:&nbsp;<a rel="nofollow" href="https://www.flickr.com/photos/zebble/"   >Mike</a>
</span></p>
</body></html>