<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转] Distinguished Encoding Rules (from MSDN)</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转] Distinguished Encoding Rules (from MSDN)</h2>
<p align="right">发布时间：2012-8-22 16:43
<br>分类名称：PKI</p><br>
<p>今天偶尔看MSND，发现里面讲解的DER编码通俗易懂，图文并茂。 </p><p><span style="font-family:宋体; font-size:12pt;"  >Abstract Syntax Notation One (ASN.1) defines the following rule sets that govern how data structures that are being sent between computers are encoded and decoded. </span></p><ul><li><span style="font-family:宋体; font-size:12pt;"  >Basic Encoding Rules (BER) </span></li><li><span style="font-family:宋体; font-size:12pt;"  >Canonical Encoding Rules (CER) </span></li><li><span style="font-family:宋体; font-size:12pt;"  >Distinguished Encoding Rules (DER) </span></li><li><span style="font-family:宋体; font-size:12pt;"  >Packed Encoding Rules (PER) </span></li></ul><p><span style="font-family:宋体; font-size:12pt;"  >The original rule set was defined by the BER specification. CER and DER were developed later as specialized subsets of BER. PER was developed in response to criticisms about the amount of bandwidth required to transmit data using BER or its variants. PER provides a significant savings. </span></p><p><span style="font-family:宋体; font-size:12pt;"  >DER was created to satisfy the requirements of the X.509 specification for secure data transfer. The Certificate Enrollment API uses DER exclusively.  </span></p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>DER Transfer Syntax </strong></span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Applying an encoding rule to the data structures described by an abstract syntax provides a transfer syntax that governs how bytes in a stream are organized when sent between computers. The transfer syntax used by Distinguished Encoding Rules always follows a <em>Tag, Length, Value</em> format. The format is usually referred to as a TLV triplet in which each field (T, L, or V) contains one or more bytes. </span></p><p><img title="[转] Distinguished Encoding Rules (from MSDN) - Howie - Dspace"  src="pic/img2.ph.126.net_xVTxtku9-TIHfkOvBvttag==_6597422709888655072.jpg"  alt=""  /><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >   </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >The <em>Tag</em> field specifies the type of the data structure being sent, the <em>Length</em> field specifies the number of bytes of content being transferred, and the <em>Value</em> field contains the content. Note that the <em>Value</em> field can be a triplet if it contains a constructed data type as shown by the following illustration. </span></p><p><img title="[转] Distinguished Encoding Rules (from MSDN) - Howie - Dspace"  src="pic/img7.ph.126.net_W6p1UN_46Uxddxkscutj8w==_6597365535285021057.jpg"  alt=""  /><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >   </span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>Encoded Tag Bytes </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >The <em>Tag</em> field in a TLV triplet identifies the type of the data structure being sent between computers. For example, the tag for an integer is 0x02, and the tag for an object identifier is 0x06. Although multiple bytes are permitted, none of the data types used by the Certificate Enrollment API require more than one. The following illustration shows the breakdown of a <em>Tag</em> value. Bits 7 and 6 identify the ASN.1 tagging class. There are four available classes, but the Certificate Enrollment API uses data types that belong only to the UNIVERSAL class. Bit 5 identifies whether the encoding form is primitive or constructed. Basic and string types are encoded by using primitive forms, constructed types by using a constructed form. For more information, see </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >ASN.1 Type System</span><span style="color:black; font-family:Segoe UI;"  >. Bits 4 through 0 contain the tag number. </span></span></span></p><p><img title="[转] Distinguished Encoding Rules (from MSDN) - Howie - Dspace"  src="pic/img6.ph.126.net_CejR41TMHBO_Q8jpM2LALQ==_6597497476679343616.jpg"  alt=""  /><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >   </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >The following table lists the data types supported by the Certificate Enrollment API, the encoding form used, and the tag value. </span></p><div><table style="border-collapse:collapse;"  border="0"  ><colgroup><col style="width:190px;"  /><col style="width:126px;"  /><col style="width:160px;"  /><col style="width:108px;"  /><tbody valign="top"  ><tr style="height: 21px; background: #e5e5e5;"  ><td style="padding-top: 4px; padding-left: 4px; padding-bottom: 4px; padding-right: 4px; border-top:  solid #bbbbbb 0.75pt; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:10pt;"  >Type</span>&nbsp;</p></td><td style="padding-top: 4px; padding-left: 4px; padding-bottom: 4px; padding-right: 4px; border-top:  solid #bbbbbb 0.75pt; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:10pt;"  >ASN.1 class</span>&nbsp;</p></td><td style="padding-top: 4px; padding-left: 4px; padding-bottom: 4px; padding-right: 4px; border-top:  solid #bbbbbb 0.75pt; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:10pt;"  >Encoding form</span>&nbsp;</p></td><td style="padding-top: 4px; padding-left: 4px; padding-bottom: 4px; padding-right: 4px; border-top:  solid #bbbbbb 0.75pt; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:10pt;"  >Tag value</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >BIT STRING</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Primitive</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00000011 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x03)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >BOOLEAN</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Primitive</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00000001 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x01)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >INTEGER</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Primitive</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00000010 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x02)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >NULL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Primitive</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00000101 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x05)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >OBJECT IDENTIFIER</span></p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Primitive</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00000110 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x06)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >OCTET STRING</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Primitive</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00000100 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x04)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >BMPString</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Primitive</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00011110 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x1E)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >IA5String</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Primitive</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00010110 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x16)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >PrintableString</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Primitive</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00010011 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x13)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >TeletexString</span></p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Primitive</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00010100 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x14)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UTF8String</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Primitive</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00001100 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x0C)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >SEQUENCE</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Constructed</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00110000 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x30)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >SEQUENCE OF</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Constructed</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00110000 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x30)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >SET</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Constructed</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00110001 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x31)</span>&nbsp;</p></td></tr><tr style="background: white;"  ><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  solid #bbbbbb 0.75pt; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >SET OF</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >UNIVERSAL</span>&nbsp;</p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Constructed</span></p></td><td style="padding-top: 9px; padding-left: 4px; padding-bottom: 9px; padding-right: 4px; border-top:  none; border-left:  none; border-bottom:  solid #bbbbbb 0.75pt; border-right:  solid #bbbbbb 0.75pt;"  ><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >00110001 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >(0x31)</span>&nbsp;</p></td></tr></table></div><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>Encoded Length and Value Bytes </strong></span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >The <em>Length</em> field in a TLV triplet identifies the number of bytes encoded in the <em>Value</em> field. The <em>Value</em> field contains the content being sent between computers. If the <em>Value</em> field contains fewer than 128 bytes, the <em>Length</em> field requires only one byte. Bit 7 of the <em>Length</em> field is zero (0) and the remaining bits identify the number of bytes of content being sent. If the <em>Value</em> field contains more than 127 bytes, bit 7 of the <em>Length</em> field is one (1) and the remaining bits identify the number of bytes needed to contain the length. Examples are shown in the following illustration. </span></p><p><img title="[转] Distinguished Encoding Rules (from MSDN) - Howie - Dspace"  src="pic/img8.ph.126.net_igqNXMnjhoWG5ofHR0Y17w==_6597349042610608338.jpg"  alt=""  /><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >   </span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>DER Encoding of ASN.1 Types </strong></span></p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>BIT STRING </strong></span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >The <strong>BIT STRING</strong> data type is encoded into a TLV triplet that begins with a <strong>Tag</strong> byte of 0x03. The <strong>Value</strong> field of the TLV triplet contains a leading byte that specifies the number of bits left unused in the final byte of content. In the following example, the <strong>Length</strong> field is set to 0x03 because three content bytes follow, and the leading byte of the <strong>Value</strong> field is set to 0x04 because there are four unused bits in the last content byte. Each unused bit is denoted by the letter x. </span></p><p><img title="[转] Distinguished Encoding Rules (from MSDN) - Howie - Dspace"  src="pic/img8.ph.126.net_lJrAnKJ8Zwmy2HZj6j66IQ==_6597365535285021058.jpg"  alt=""  /><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >   </span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >The following example, adapted from the </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >PKCS #10 Encoded ASN.1</span><span style="color:black; font-family:Segoe UI;"  > topic, shows the encoded signature of a sample PKCS #10 certificate request. The first byte contains the <strong>Tag</strong> value for the <strong>BIT STRING</strong> data type, 0x03. The second and third bytes contain the length of the byte array. Bit 7 of the second byte is set to 1 because there are more than 127 bytes of content. Bits 0 through 6 of the second byte specify the number of trailing <strong>Length</strong> bytes, in this case one. The third byte specifies the number of content bytes, 0x81. The fourth byte, 0x00, specifies the number of unused bits that exist in the last content byte. Note that the signature is encoded in big-endian byte order.  </span></span></span></p><p> &nbsp;</p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >0299:    03 81 81           ; BIT_STRING (81 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >029c:       00 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >029d:       47 eb 99 5a df 9e 70 0d  fb a7 31 32 c1 5f 5c 24 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >02ad:       c2 e0 bf c6 24 af 15 66  0e b8 6a 2e ab 2b c4 97 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >02bd:       1f e3 cb dc 63 a5 25 ec  c7 b4 28 61 66 36 a1 31 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >02cd:       1b bf dd d0 fc bf 17 94  90 1d e5 5e c7 11 5e c9 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >02dd:       55 9f eb a3 3e 14 c7 99  a6 cb ba a1 46 0f 39 d4 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >02ed:       44 c4 c8 4b 76 0e 20 5d  6d a9 34 9e d4 d5 87 42 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >02fd:       eb 24 26 51 14 90 b4 0f  06 5e 52 88 32 7a 95 20 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >030d:       a0 fd f7 e5 7d 60 dd 72  68 9b f5 7b 05 8f 6d 1e </span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>OBJECT IDENTIFIER </strong></span></p><p><span style="color:#5d5d5d; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >3 out of 3 rated this helpful - </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >Rate this topic</span><span style="color:black; font-family:Segoe UI;"  >     </span></span></span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >The <strong>OBJECT IDENTIFIER</strong> data type is encoded into a TLV triplet that begins with a <strong>Tag</strong> value of 0x06. Each integer of a dotted decimal object identifier (OID) is encoded according to the following rules: </span></p><ul><li><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >The first two nodes of the OID are encoded onto a single byte. The first node is multiplied by the decimal 40 and the result is added to the value of the second node. </span></li><li><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Node values less than or equal to 127 are encoded on one byte. </span></li><li><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Node values greater than or equal to 128 are encoded on multiple bytes. Bit 7 of the leftmost byte is set to one. Bits 0 through 6 of each byte contains the encoded value. </span></li></ul><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >These points are shown by the following illustration. </span></p><p><img title="[转] Distinguished Encoding Rules (from MSDN) - Howie - Dspace"  src="pic/img0.ph.126.net_Wi65lWhhCUSPG8kvoF9nAw==_6597345744075725020.jpg"  alt=""  /><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >   </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >The following example shows how the <strong>ClientId</strong> attribute is encoded in a certificate request. </span></p><p style="background: white;"  ><span style="color:#1364c4; font-family:宋体; font-size:9pt;"  >Copy</span><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >   </span></p><p> &nbsp;</p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >06 09                                ; OBJECT_ID (9 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  2b 06 01 04 01 82 37 15  14       ;   1.3.6.1.4.1.311.21.20  </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >31 4a                                ; SET (4a Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   30 48                             ; SEQUENCE (48 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      02 01                          ; INTEGER (1 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  09 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      0c 23                          ; UTF8_STRING (23 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  76 69 63 68 33 64 2e 6a     ;   vich3d.j </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  64 6f 6d 63 73 63 2e 6e     ;   domcsc.n </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  74 74 65 73 74 2e 6d 69     ;   ttest.mi </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  63 72 6f 73 6f 66 74 2e     ;   crosoft. </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  63 6f 6d                    ;   com </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      0c 15                          ; UTF8_STRING (15 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  4a 44 4f 4d 43 53 43 5c     ;   JDOMCSC\ </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  61 64 6d 69 6e 69 73 74     ;   administ </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  72 61 74 6f 72              ;   rator </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      0c 07                          ; UTF8_STRING (7 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >         63 65 72 74 72 65 71        ;   certreq </span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>BOOLEAN </strong></span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >A Boolean value can be <strong>TRUE</strong> or <strong>FALSE</strong>. <strong>FALSE</strong> is encoded as a TLV triplet in which the <strong>Value</strong> field is zero (0). <strong>TRUE</strong> is encoded as a nonzero value. The <strong>Tag</strong> for the <strong>BOOLEAN</strong> data type is 0x01.  </span></p><p><img title="[转] Distinguished Encoding Rules (from MSDN) - Howie - Dspace"  src="pic/img0.ph.126.net_237SBtSXLnCRDnrgF0jb6w==_6597347943098980570.jpg"  alt=""  /><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >   </span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>INTEGER </strong></span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >Integer values are encoded into a TLV triplet that begins with a <strong>Tag</strong> value of 0x02. The <strong>Value</strong> field of the TLV triplet contains the encoded integer if it is positive, or its two's complement if it is negative. If the integer is positive but the high order bit is set to 1, a leading 0x00 is added to the content to indicate that the number is not negative. For example, the high order byte of 0x8F (10001111) is 1. Therefore a leading zero byte is added to the content as shown in the following illustration. </span></p><p><img title="[转] Distinguished Encoding Rules (from MSDN) - Howie - Dspace"  src="pic/img1.ph.126.net_RUc6_jSyyFfC615G3e40aA==_6597426008423538401.jpg"  alt=""  /><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >   </span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >If the integer contains fewer than 128 bytes, the <em>Length</em> field requires only one byte to specify the content length. If the integer is more than 127 bytes, bit 7 of the <em>Length</em> field is set to 1 and bits 6 through 0 specify the number of additional bytes used to identify the content length. For more information, see </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >Encoded Length and Value Bytes</span><span style="color:black; font-family:Segoe UI;"  >. </span></span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >The following example, from </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >PKCS #10 Encoded ASN.1</span><span style="color:black; font-family:Segoe UI;"  >, shows the encoding for a 128 byte public key. The first byte contains the <strong>Tag</strong> value for the <strong>INTEGER</strong> data type, 0x02. The second and third bytes contain the <strong>Length</strong> value. Bit 7 of the second byte is set to 1 because there are more than 127 bytes of content. Bits 0 through 6 of the second byte specify the number of trailing bytes needed, in this case one, to accurately specify the content length. The third byte specifies the number of content bytes, 0x81. The fourth byte, 0x00, is added to the content to indicate that the integer is indeed a positive value even though the sign bit of the leading content byte (0x8F) is set to 1. </span></span></span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >02 81 81          ; INTEGER (81 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  00 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  8f e2 41 2a 08 e8 51 a8  8c b3 e8 53 e7 d5 49 50 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  b3 27 8a 2b cb ea b5 42  73 ea 02 57 cc 65 33 ee </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  88 20 61 a1 17 56 c1 24  18 e3 a8 08 d3 be d9 31 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  f3 37 0b 94 b8 cc 43 08  0b 70 24 f7 9c b1 8d 5d </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  d6 6d 82 d0 54 09 84 f8  9f 97 01 75 05 9c 89 d4 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  d5 c9 1e c9 13 d7 2a 6b  30 91 19 d6 d4 42 e0 c4 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  9d 7c 92 71 e1 b2 2f 5c  8d ee f0 f1 17 1e d2 5f </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  31 5b b1 9c bc 20 55 bf  3a 37 42 45 75 dc 90 65 </span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >The following example shows how the integer value 0x03 is encoded. The <strong>Tag</strong> byte contains 0x02, and the <strong>Length</strong> byte specifies that there is one byte of content. </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >02 01             ; INTEGER (1 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  03 </span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>NULL </strong></span></p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >The <strong>NULL</strong> value is encoded into a TLV triplet that begins with a <strong>Tag</strong> value of 0x05, a <strong>Length</strong> of 0x00, and no <strong>Value</strong> byte as shown by the following illustration. </span></p><p><img title="[转] Distinguished Encoding Rules (from MSDN) - Howie - Dspace"  src="pic/img4.ph.126.net_f6HFyF3SuwPPfA1o3zSg9w==_6597347943098980574.jpg"  alt=""  /><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >   </span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >The fifth line of the following example, adapted from the </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >PKCS #10 Encoded ASN.1</span><span style="color:black; font-family:Segoe UI;"  > topic, shows an encoded <strong>NULL</strong> value. The first byte is 0x05, and the second byte is 0x00. There is no content byte. </span></span></span></p><p> &nbsp;</p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >30 81 9f                                ; SEQUENCE (9f Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  30 0d                                ; SEQUENCE (d Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  |  06 09                             ; OBJECT_ID (9 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  |  |  2a 86 48 86 f7 0d 01 01  01    ; 1.2.840.113549.1.1.1 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  |  05 00                             ; NULL (0 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  03 81 8d                             ; BIT_STRING (8d Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|     00 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|     30 81 89                          ; SEQUENCE (89 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        02 81 81                       ; INTEGER (81 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  00 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  8f e2 41 2a 08 e8 51 a8  8c b3 e8 53 e7 d5 49 50 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  b3 27 8a 2b cb ea b5 42  73 ea 02 57 cc 65 33 ee </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  88 20 61 a1 17 56 c1 24  18 e3 a8 08 d3 be d9 31 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  f3 37 0b 94 b8 cc 43 08  0b 70 24 f7 9c b1 8d 5d </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  d6 6d 82 d0 54 09 84 f8  9f 97 01 75 05 9c 89 d4 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  d5 c9 1e c9 13 d7 2a 6b  30 91 19 d6 d4 42 e0 c4 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  9d 7c 92 71 e1 b2 2f 5c  8d ee f0 f1 17 1e d2 5f </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  31 5b b1 9c bc 20 55 bf  3a 37 42 45 75 dc 90 65 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        02 03                          ; INTEGER (3 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|           01 00 01 </span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>OCTET STRING </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >The ASN.1 <strong>OCTET STRING</strong> data type is encoded into a TLV triplet that begins with a <strong>Tag</strong> byte of 0x04. The <strong>OCTET STRING</strong> and </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >BIT STRING</span><span style="color:black;"  ><span style="font-family:Segoe UI;"  > data types are very similar. Thus, the two types are encoded in a similar manner except that, because the trailing byte of an <strong>OCTET STRING</strong> cannot have unused bits, no leading bytes must be added to the content. The following example, adapted from the </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >CMC Encoded ASN.1</span><span style="color:black; font-family:Segoe UI;"  > topic, shows how the name of a certificate template is encoded as a byte array. </span></span></span></span></span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >30 17                                 ; SEQUENCE (17 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  06 09                              ; OBJECT_ID (9 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  |  2b 06 01 04 01 82 37 14  02     ;   1.3.6.1.4.1.311.20.2 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  04 0a                              ; OCTET_STRING (a Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|     1e 08 00 55 00 73 00 65  00 72  ;   ...U.s.e.r </span></p><p> &nbsp;</p><p><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >If the byte array contains fewer than 128 bytes, the <strong>Length</strong> field of the TLV triplet requires only one byte to specify the content length. If it is more than 127 bytes, bit 7 of the <strong>Length</strong> field is set to 1 and bits 6 through 0 specify the number of additional bytes used to identify the content length. This is shown in the following example where the high order bit of the second byte on the first line is set to 1 and the byte indicates that there is a trailing <strong>Length</strong> byte. The third byte therefore specifies that the content is 0x80 bytes long. </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >04 81 80                       ; OCTET_STRING (80 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   38 10 60 e2 70 69 91 4a     ;   8.`.pi.J </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   8b b5 22 57 2a 62 ef de     ;   .."W*b.. </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   15 7d 59 d6 4e 20 9a 45     ;   .}Y.N .E </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   2b e3 fd fc 68 ba af bf     ;   +...h... </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   9c 17 b0 8e 6d c4 29 1e     ;   ....m.). </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   e3 21 ac bb 5a 8a c9 67     ;   .!..Z..g </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   0a d4 45 93 10 c0 26 eb     ;   ..E...&amp;. </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   0a 83 c2 b1 40 87 36 f7     ;   ....@.6. </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   a0 26 da b9 bb 46 73 88     ;   .&amp;...Fs. </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   7a 67 b9 e6 b3 6f ea 59     ;   zg...o.Y </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   28 8a d3 92 72 f6 7b 89     ;   (...r.{. </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   a0 d8 2d 9e 40 eb 1e bb     ;   ..-.@... </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   6e ae f0 5a ed 16 c9 e3     ;   n..Z.... </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   27 59 37 8f f3 4a 98 60     ;   'Y7..J.` </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   f8 fb a7 0a ee 1b 6e 91     ;   ......n. </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   95 96 cf 0d 56 ac ab 35     ;   ....V..5 </span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>BMPString </strong></span></p><p><span style="color:#5d5d5d; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >1 out of 1 rated this helpful - </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >Rate this topic</span><span style="color:black; font-family:Segoe UI;"  >     </span></span></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >The ASN.1 <strong>BMPString</strong> data type, called a <strong>UNICODE_STRING</strong> in the Certificate Enrollment API, is encoded into a TLV triplet that begins with a <strong>Tag</strong> byte of 0x1E. The following example, adapted from the </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >CMC Encoded ASN.1</span><span style="color:black; font-family:Segoe UI;"  > topic, shows the encoding for a <strong>TemplateName</strong> extension. The name can be specified by using the <a rel="nofollow" href="http://msdn.microsoft.com/en-us/library/aa378276(v=vs.85)"  ><span style="color:#1364c4;"  ><strong>IX509ExtensionTemplateName</strong></span></a> interface. The object identifier for the extension is 1.3.6.1.4.1.311.13.2.1. </span></span></span></p><p style="background: white;"  ><span style="color:#1364c4; font-family:宋体; font-size:9pt;"  >Copy</span><span style="color:black; font-family:Segoe UI; font-size:9pt;"  >   </span></p><p> &nbsp;</p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >06 0a                              ; OBJECT_ID (a Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  2b 06 01 04 01 82 37 0d  02 01  ;   1.3.6.1.4.1.311.13.2.1  </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >31 34                              ; SET (34 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   30 32                           ; SEQUENCE (32 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      1e 26                        ; UNICODE_STRING (26 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  00 43 00 65 00 72 00 74   ;   .C.e.r.t </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  00 69 00 66 00 69 00 63   ;   .i.f.i.c </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  00 61 00 74 00 65 00 54   ;   .a.t.e.T </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  00 65 00 6d 00 70 00 6c   ;   .e.m.p.l </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  00 61 00 74 00 65         ;   .a.t.e </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      1e 08                        ; UNICODE_STRING (8 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >         00 55 00 73 00 65 00 72   ;   .U.s.e.r </span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >If the string contains fewer than 128 bytes, the <strong>Length</strong> field of the TLV triplet requires only one byte to specify the content length. If the string is more than 127 bytes, bit 7 of the <strong>Length</strong> field is set to 1 and bits 6 through 0 specify the number of additional bytes used to identify the content length. For more information, see </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >Encoded Length and Value Bytes</span><span style="color:black; font-family:Segoe UI;"  >. </span></span></span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>IA5String </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >The ASN.1 <strong>IA5tring</strong> data type is encoded into a TLV triplet that begins with a <strong>Tag</strong> byte of 0x16. The following example, adapted from the </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >CMC Encoded ASN.1</span><span style="color:black; font-family:Segoe UI;"  > topic, shows how the <strong>OSVersion</strong> attribute is encoded as an <strong>IA5tring</strong> type. The version number can be specified by using the <a rel="nofollow" href="http://msdn.microsoft.com/en-us/library/aa377096(v=vs.85)"  ><span style="color:#1364c4;"  ><strong>IX509AttributeOSVersion</strong></span></a> interface. The object identifier for the attribute is 1.3.6.1.4.1.311.13.2.3. </span></span></span></p><p> &nbsp;</p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >06 0a                                   ; OBJECT_ID (a Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  2b 06 01 04 01 82 37 0d  02 03       ;   1.3.6.1.4.1.311.13.2.3  </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >31 0c                                   ; SET (c Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   16 0a                                ; IA5_STRING (a Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      36 2e 30 2e 35 33 36 31  2e 32    ;   6.0.5361.2 </span></p><p> &nbsp;</p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >If the string contains fewer than 128 bytes, the <strong>Length</strong> field of the TLV triplet requires only one byte to specify the content length. If the string is more than 127 bytes, bit 7 of the <strong>Length</strong> field is set to 1 and bits 6 through 0 specify the number of additional bytes used to identify the content length. For more information, see </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >Encoded Length and Value Bytes</span><span style="color:black; font-family:Segoe UI;"  >. </span></span></span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>PrintableString </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >The ASN.1 <strong>PrintableString</strong> data type is encoded into a TLV triplet that begins with a <strong>Tag</strong> byte of 0x13. The following example, from the </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >PKCS #10 Encoded ASN.1</span><span style="color:black; font-family:Segoe UI;"  > topic, shows how a user common name of TestCN is encoded as a <strong>PrintableString</strong> type. The object identifier for a common name is 2.5.4.3. </span></span></span></p><p> &nbsp;</p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >06 03                   ; OBJECT_ID (3 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  55 04 03             ;   2.5.4.3 Common Name (CN) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >13 06                   ; PRINTABLE_STRING (6 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   54 65 73 74 43 4e    ;   TestCN </span></p><p> &nbsp;</p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >If the string contains fewer than 128 bytes, the <strong>Length</strong> field of the TLV triplet requires only one byte to specify the content length. If the string is more than 127 bytes, bit 7 of the <strong>Length</strong> field is set to 1 and bits 6 through 0 specify the number of additional bytes used to identify the content length. For more information, see </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >Encoded Length and Value Bytes</span><span style="color:black; font-family:Segoe UI;"  >. </span></span></span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>UTF8String </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >The ASN.1 <strong>UTF8String</strong> data type is encoded into a TLV triplet that begins with a <strong>Tag</strong> byte of 0x0C. The following example, from the </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >CMC Encoded ASN.1</span><span style="color:black; font-family:Segoe UI;"  > topic, shows how the <strong>ClientId</strong> attribute is encoded as an integer and three <strong>UTF8String</strong> types. The object identifier for the attribute is 1.3.6.1.4.1.311.21.20. The information, which can be specified by using the <a rel="nofollow" href="http://msdn.microsoft.com/en-us/library/aa377073(v=vs.85)"  ><span style="color:#1364c4;"  ><strong>IX509AttributeClientId</strong></span></a> interface, includes a client ID number, the Domain Name System (DNS) computer name, the Security Accounts Manager (SAM) user name, and the name of the application that created the certificate request. </span></span></span></p><p> &nbsp;</p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >06 09                                ; OBJECT_ID (9 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  2b 06 01 04 01 82 37 15  14       ;   1.3.6.1.4.1.311.21.20  </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >31 4a                                ; SET (4a Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   30 48                             ; SEQUENCE (48 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      02 01                          ; INTEGER (1 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  09 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      0c 23                          ; UTF8_STRING (23 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  76 69 63 68 33 64 2e 6a     ;   vich3d.j </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  64 6f 6d 63 73 63 2e 6e     ;   domcsc.n </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  74 74 65 73 74 2e 6d 69     ;   ttest.mi </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  63 72 6f 73 6f 66 74 2e     ;   crosoft. </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  63 6f 6d                    ;   com </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      0c 15                          ; UTF8_STRING (15 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  4a 44 4f 4d 43 53 43 5c     ;   JDOMCSC\ </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  61 64 6d 69 6e 69 73 74     ;   administ </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  72 61 74 6f 72              ;   rator </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      0c 07                          ; UTF8_STRING (7 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >         63 65 72 74 72 65 71        ;   certreq </span></p><p> &nbsp;</p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >If the string contains fewer than 128 bytes, the <strong>Length</strong> field of the TLV triplet requires only one byte to specify the content length. If the string is more than 127 bytes, bit 7 of the <strong>Length</strong> field is set to 1 and bits 6 through 0 specify the number of additional bytes used to identify the content length. For more information, see </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >Encoded Length and Value Bytes</span><span style="color:black; font-family:Segoe UI;"  >. </span></span></span></p><p> &nbsp;</p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>SEQUENCE </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >A <strong>SEQUENCE</strong> contains an ordered field of one or more types. It is encoded into a TLV triplet that begins with a <strong>Tag</strong> byte of 0x30. The following Certutil.exe output from the </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >PKCS #10 Encoded ASN.1</span><span style="color:black; font-family:Segoe UI;"  > topic provides multiple examples of <strong>SEQUENCE</strong> data structures. The output shows a 128 byte public key and three byte exponent. </span></span></span></p><p> &nbsp;</p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >30 81 9f                             ; SEQUENCE (9f Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  30 0d                             ; SEQUENCE (d Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  |  |  06 09                       ; OBJECT_ID (9 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  |  |  2a 86 48 86 f7 0d 01 01 01  ; 1.2.840.113549.1.1.1  </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  |  05 00                          ; NULL (0 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|  03 81 8d                          ; BIT_STRING (8d Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|     00 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|     30 81 89                       ; SEQUENCE (89 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        02 81 81                    ; INTEGER (81 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  00 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  8f e2 41 2a 08 e8 51 a8  8c b3 e8 53 e7 d5 49 50 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  b3 27 8a 2b cb ea b5 42  73 ea 02 57 cc 65 33 ee </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  88 20 61 a1 17 56 c1 24  18 e3 a8 08 d3 be d9 31 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  f3 37 0b 94 b8 cc 43 08  0b 70 24 f7 9c b1 8d 5d </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  d6 6d 82 d0 54 09 84 f8  9f 97 01 75 05 9c 89 d4 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  d5 c9 1e c9 13 d7 2a 6b  30 91 19 d6 d4 42 e0 c4 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  9d 7c 92 71 e1 b2 2f 5c  8d ee f0 f1 17 1e d2 5f </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        |  31 5b b1 9c bc 20 55 bf  3a 37 42 45 75 dc 90 65 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|        02 03                       ; INTEGER (3 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >|           01 00 01 </span></p><p> &nbsp;</p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >If the <strong>SEQUENCE</strong> contains fewer than 128 bytes, the <strong>Length</strong> field of the TLV triplet requires only one byte to specify the content length. If it is more than 127 bytes, bit 7 of the <strong>Length</strong> field is set to 1 and bits 6 through 0 specify the number of additional bytes used to identify the content length. For example, the second byte of the first line in the preceding example indicates that there is one trailing <strong>Length</strong> byte that specifies 0x9F bytes of content (most of the <strong>SEQUENCE</strong> is not shown). For more information, see </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >Encoded Length and Value Bytes</span><span style="color:black; font-family:Segoe UI;"  >. </span></span></span></p><p><span style="color:#3f529c; font-family:Segoe UI; font-size:17pt;"  ><strong>SET </strong></span></p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >A <strong>SET</strong> contains an unordered series of fields of one or more types. It is encoded into a TLV triplet that begins with a <strong>Tag</strong> byte of 0x31. The following example, adapted from the </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >CMC Encoded ASN.1</span><span style="color:black; font-family:Segoe UI;"  > topic, shows how a <strong>ClientId</strong> attribute is encoded in a <strong>SET</strong> data structure. The attribute can be specified by using the <a rel="nofollow" href="http://msdn.microsoft.com/en-us/library/aa377073(v=vs.85)"  ><span style="color:#1364c4;"  ><strong>IX509AttributeClientId</strong></span></a> interface. </span></span></span></p><p> &nbsp;</p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >31 59                                     ; SET (59 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >   30 57                                  ; SEQUENCE (57 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      06 09                               ; OBJECT_ID (9 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      |  2b 06 01 04 01 82 37 15  14      ;   1.3.6.1.4.1.311.21.20  </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >      31 4a                               ; SET (4a Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >         30 48                            ; SEQUENCE (48 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            02 01                         ; INTEGER (1 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            |  09 </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            0c 23                         ; UTF8_STRING (23 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            |  76 69 63 68 33 64 2e 6a    ;   vich3d.j </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            |  64 6f 6d 63 73 63 2e 6e    ;   domcsc.n </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            |  74 74 65 73 74 2e 6d 69    ;   ttest.mi </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            |  63 72 6f 73 6f 66 74 2e    ;   crosoft. </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            |  63 6f 6d                   ;   com </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            0c 15                         ; UTF8_STRING (15 Bytes) </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            |  4a 44 4f 4d 43 53 43 5c    ;   JDOMCSC\ </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            |  61 64 6d 69 6e 69 73 74    ;   administ </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            |  72 61 74 6f 72             ;   rator </span></p><p><span style="color:black; font-family:Consolas; font-size:12pt;"  >            0c 07                         ; UTF8_STRING  </span></p><p> &nbsp;</p><p><span style="color:black; font-size:9pt;"  ><span style="font-family:Segoe UI;"  >If the <strong>SET</strong> contains fewer than 128 bytes, the <strong>Length</strong> field of the TLV triplet requires only one byte to specify the content length. If it is more than 127 bytes, bit 7 of the <strong>Length</strong> field is set to 1 and bits 6 through 0 specify the number of additional bytes used to identify the content length. For more information, see </span><span style="color:#1364c4;"  ><span style="font-family:宋体;"  >Encoded Length and Value Bytes</span><span style="color:black; font-family:Segoe UI;"  >. </span></span></span></p>
</body></html>