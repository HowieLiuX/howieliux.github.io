<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转] Windows系统程序设计之结构化异常处理</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转] Windows系统程序设计之结构化异常处理</h2>
<p align="right">发布时间：2012-7-5 10:17
<br>分类名称：SEH</p><br>
<p><span style="font-family:宋体; font-size:12pt;"  ><span style="color:#333333;"  >标 题:<span style="color:black;"  > 【原创】Windows系统程序设计之结构化异常处理<span style="color:#666666;"  ><br><span style="color:#333333;"  >作 者:<span style="color:#666666;"  >         <span style="color:black;"  >北极星2003<span style="color:#666666;"  ><br><span style="color:#333333;"  >时 间:<span style="color:#666666;"  > 2006-09-20,20:21:28<br><span style="color:#333333;"  >链 接:<span style="color:#666666;"  > http://bbs.pediy.com/showthread.php?t=32222<br></span><br></span>目录：</span><br></span>一、</span>&nbsp;&nbsp;SEH</span>的概念、特性</span><br></span>二、</span>&nbsp;&nbsp;SEH</span>的基本使用方法</span><br>1、&nbsp;&nbsp;结束异常程序<br>（1）try块的自然退出与非自然退出<br>（2）finally块的清理功能及对程序结构的影响<br>（3）关键字__leave<br>2、&nbsp;&nbsp;异常处理程序<br>（1）异常处理的基本流程<br>（2）异常过滤器<br>（3）全局展开<br>（4）暂停全局展开<br>3、&nbsp;&nbsp;未处理异常（顶层异常处理）<br>三、&nbsp;&nbsp;SEH相关数据结构的介绍<br>1、&nbsp;&nbsp;EXCEPTION_POINTER结构<br>2、&nbsp;&nbsp;EXCEPTION_RECORD结构<br>3、&nbsp;&nbsp;EXCEPTOIN_REGISTRATION结构<br>4、异常处理链结构图<br>四、&nbsp;&nbsp;VC++编译器级SEH的具体实现<br>1、&nbsp;&nbsp;VC扩展异常帧<br>2、&nbsp;&nbsp;VC异常帧堆栈布局<br>3、&nbsp;&nbsp;两个实例程序：显示异常帧信息<br>4、&nbsp;&nbsp;实例分析及特性介绍<br>5、&nbsp;&nbsp;VC中的定层异常处理<br>6、&nbsp;&nbsp;VC搜索异常处理程序流程<br><br>五、参考资料<br><br>--------------------------------------------------------------------------<br>&nbsp;<br>前言：<br>&nbsp;&nbsp;&nbsp;&nbsp;对于这片文章应该是我写的最认真的一篇了，断断续续地写了将近一个月，从最初的复习性的回顾，收集更多资料，反复地整理思路，查阅Windows 源码中的相关的源码，设计文章的整体框架，到每一个部分的详细设计，包括流程图的设计。每一个过程都进展的并不顺利，由于时间的关系每星期只能有2~3次 的大段时间的在电脑面前，所以思路一直在被打断，整理文章写的并不流畅。有些思路或许已经不知道遗忘在哪个角落，但我也尽量把相关方面的知识点都讲到。本 文的重点在于SEH原理方面的介绍，从单纯的使用角度来看，比较简单，但如果适当的使用SEH机制，这在很大程度上与使用者对SEH的理解程度有很大关 系，因而对于具体的实现，文中只介绍重点及需要注意的地方，具体使用方法可参见参考文献[1]。<br><br>一、&nbsp;&nbsp;SEH的概念、特性<br><br>&nbsp;&nbsp;SEH，结构化异常处理，是作为一种系统机制引入到操作系统中的，本身与语言无关。在我们自己的程序中使用SEH可以让我们集中精力开发关键功能，而把程序中所可能出现的异常进行统一的处理，使程序显得更加简洁且增加可读性。<br><br>&nbsp;&nbsp;当在程序中使用SEH时，就变成编译器相关的。其所造成的负担主要由编译程序来承担，例如编译程序会产生一些表(table)来支持SEH的数据结构，还会提供回调函数。<br><br>二、&nbsp;&nbsp;SEH的基本使用方法<br><br>1、&nbsp;&nbsp;结束异常程序<br>&nbsp;&nbsp;一个结束异常程序能确保调用和执行一个代码块，对应与具体的实现，结束处理程序的结构如下所示：<br>&nbsp;&nbsp;&nbsp;&nbsp;__try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;受保护的代码<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;__finally&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;结束处理程序<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>（1）try块的自然退出与非自然退出<br>&nbsp;&nbsp;try块可能会因为return，goto，异常等非自然退出，也可能会因为成功执行而自然退出。但不论try块是如何退出的，finally块的内容都会被执行。&nbsp;&nbsp;请看下面两个程序:<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img0.ph.126.net_OVyN7oskQNw_caMNqAT1ig==_2484579619442492930.jpg"  alt=""  />&nbsp;<br><br>&nbsp;&nbsp;通过使用结束处理程序，可以避免return语句的过早执行。当retrun&nbsp;试图退出try块时，编译程序要保证finally块中的代码首先被执行。这事实上就是一个局部展开的过程，当从try块的过早退出强制控制转移到finally块时，都将引起局部展开。<br><br>（2）finally块的清理功能及对程序结构的影响<br>&nbsp;&nbsp;写过软件的朋友一般都有这样一个影响：在编码的过程中需要加入需要检测，检测功能是否成功执行，若成功的话执行这个，不成功的话需要作一些额外的清理 工作，例如释放内存，关闭句柄等。如果检测不是很多的话，倒没什么影响；但若又许多检测，且软件中的逻辑关系比较复杂时，往往需要化很大精力来实现繁芜的 检测判断。结果就会使程序看起来结构比较复杂，大大降低程序的可读性，而且程序的体积也不断增大。<br><br>&nbsp;&nbsp;事实上可以用SEH&nbsp;来解决，把一些相关函数的清理代码都放在finally块，只需要在其中加一些适当的判断，不需要回到每个可能失败的地方添加清理代码。下面的FunSampleA函数是一个常规的函数，FunSampleB引入了SEH结束处理程序机制：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img5.ph.126.net_Gwzzc2ZnX04yPFjIbBaCaw==_2512445642137035645.jpg"  alt=""  />&nbsp;<br><br>&nbsp;&nbsp;这两个函数的功能是一样的。可以看到在FunSampleA中的清理函数（CloseHandle）到处都是，而在FunSampleB中的清理函数 则全部集中在finally块，如果在阅读代码时只需看try块的内容即可了解程序流程。这两个函数本身都很小，可以细细体会下这两个函数的区别。<br><br>（3）关键字__leave<br><br>&nbsp;&nbsp;在try块中使用__leave关键字会使程序跳转到try块的结尾，从而自然的进入finally块。<br><br>&nbsp;&nbsp;对于上例中的FunSampleB，try块中的3个return完全可以用__leave来替换。两者的区别是用return会引起try过早退出系统会进行局部展开而增加系统开销，若使用__leave就会自然退出try块，开销就小的多。<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;但有一种情况下必须使用__leave而不能使用return，即当finally块后还需要执行一定的功能，如下所示：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img2.ph.126.net_DYfRPl2DqTpMf7dx75mwng==_2512445642137035652.jpg"  alt=""  /><br>&nbsp;<br>2、异常处理程序<br>异常处理程序能在程序发生异常时进行相应的处理，对应与具体的实现，异常处理程序的结构如下所示：<br>&nbsp;&nbsp;&nbsp;&nbsp;__try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;受保护的代码<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;__except&nbsp;(&nbsp;/*异常过滤器exception&nbsp;filter*/&nbsp;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;异常处理程序exception&nbsp;handler<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>（1）异常处理的基本流程（注：此流程图来源于参考资料[1]）<br>&nbsp;&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img8.ph.126.net_VxNIn4kSUG3yTQvMj0SLOQ==_1018657940733583608.jpg"  alt=""  />&nbsp;<br><br>（2）异常过滤器<br><br>异常过滤器只有三个可能的值（定义在Windows的Excpt.h中）：<br>EXCEPTION_EXECUTE_HANDLER<br>EXCEPTION_CONTINUE_SERCH<br>EXCEPTION_CONTINUE_EXECUTION<br><br>下面是两种基本的使用方法：<br>方式一：直接使用过滤器的三个返回值之一<br>__try&nbsp;{<br>&nbsp;&nbsp;&nbsp;……<br>}<br>__except&nbsp;(&nbsp;EXCEPTION_EXECUTE_HANDLER&nbsp;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;……<br>}<br><br>方式二：自定义过滤器<br>__try&nbsp;{<br>&nbsp;&nbsp;&nbsp;……<br>}<br>__except&nbsp;(&nbsp;MyFilter(&nbsp;GetExceptionCode()&nbsp;)&nbsp;)<br>{<br>&nbsp;&nbsp;&nbsp;……<br>}<br><br>LONG&nbsp;MyFilter&nbsp;(&nbsp;DWORD&nbsp;dwExceptionCode&nbsp;)<br>{<br>&nbsp;&nbsp;if&nbsp;(&nbsp;dwExceptionCode&nbsp;==&nbsp;EXCEPTION_ACCESS_VIOLATION&nbsp;)<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;EXCEPTION_EXECUTE_HANDLER&nbsp;;<br>&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;EXCEPTION_CONTINUE_SEARCH&nbsp;;<br>}<br><br><br>（3）全局展开<br>&nbsp;&nbsp;首先来看一下全局展开的基本流程（此流程图来源于参考资料[1]）：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img1.ph.126.net_OZtjw3lsenSewOCxv94stg==_44191571361100331.jpg"  alt=""  />&nbsp;<br><br>&nbsp;&nbsp;接下来看一个全局展开的实例（源码GlobalUnwindSample.cpp）： </span></p><p><span style="font-family:宋体; font-size:12pt;"  >代码: </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >#include&nbsp;&lt;iostream.h&gt; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >#include&nbsp;&lt;windows.h&gt; </span></p><p style="background: #dedfdf;"  > &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >static&nbsp;unsigned&nbsp;int&nbsp;nStep&nbsp;=&nbsp;1&nbsp;; </span></p><p style="background: #dedfdf;"  > &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >void&nbsp;Function_B&nbsp;() </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;int&nbsp;x,&nbsp;y&nbsp;=&nbsp;0&nbsp;; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;__try&nbsp;{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;5&nbsp;/&nbsp;y&nbsp;;&nbsp;&nbsp;//&nbsp;引发异常 </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;} </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;__finally </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;"Step&nbsp;"&nbsp;&lt;&lt;&nbsp;nStep++&nbsp;&lt;&lt;&nbsp;"&nbsp;:&nbsp;执行Function_B的finally块的内容"&nbsp;&lt;&lt;&nbsp;endl&nbsp;; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;} </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >} </span></p><p style="background: #dedfdf;"  > &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >void&nbsp;Function_A&nbsp;(&nbsp;) </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;__try&nbsp;{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;Function_B&nbsp;()&nbsp;; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;} </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;__finally </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;"Step&nbsp;"&nbsp;&lt;&lt;&nbsp;nStep++&nbsp;&lt;&lt;&nbsp;"&nbsp;:&nbsp;执行Function_A的finally块的内容"&nbsp;&lt;&lt;&nbsp;endl&nbsp;; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;} </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >} </span></p><p style="background: #dedfdf;"  > &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >long&nbsp;MyExcepteFilter&nbsp;(&nbsp;) </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;"Step&nbsp;"&nbsp;&lt;&lt;&nbsp;nStep++&nbsp;&lt;&lt;&nbsp;"&nbsp;:&nbsp;执行main的异常过滤器"&nbsp;&lt;&lt;&nbsp;endl&nbsp;; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;return&nbsp;EXCEPTION_EXECUTE_HANDLER&nbsp;; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >} </span></p><p style="background: #dedfdf;"  > &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >int&nbsp;main&nbsp;() </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;__try&nbsp;{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;Function_A&nbsp;()&nbsp;; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;} </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;__except&nbsp;(&nbsp;MyExcepteFilter()&nbsp;) </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;"Step&nbsp;"&nbsp;&lt;&lt;&nbsp;nStep++&nbsp;&lt;&lt;&nbsp;"&nbsp;:&nbsp;执行main的except块的内容"&nbsp;&lt;&lt;&nbsp;endl&nbsp;; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;} </span></p><p style="background: #dedfdf;"  >&nbsp;&nbsp; &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;return&nbsp;0&nbsp;; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >} </span></p><p style="background: #dedfdf;"  > &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >/*输出结果： </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >Step&nbsp;1&nbsp;:&nbsp;执行main的异常过滤器 </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >Step&nbsp;2&nbsp;:&nbsp;执行Function_B的finally块的内容 </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >Step&nbsp;3&nbsp;:&nbsp;执行Function_A的finally块的内容 </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >Step&nbsp;4&nbsp;:&nbsp;执行main的except块的内容 </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >*/ </span></p><p><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;这个程序的执行流程如下所示：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img1.ph.126.net_p0P5EY_giS2ljHxIDZJGEA==_6597399620144472721.jpg"  alt=""  />&nbsp;<br><br>（4）暂停全局展开<br>&nbsp;&nbsp;如果程序中出现异常，且已经找到过滤器值为EXCEPTION_EXECUTE_HANDLER所对应的try块，此时系统会进行全局展开，在正常情 况下，系统会执行该try块以内的所有finally过程，然后再执行该try块对应的异常处理过程。但如果在某个finally中放入一个 return，就可以阻止全局展开。<br><br><br>3、未处理异常（顶层异常处理）<br>&nbsp;&nbsp;当软件中出现异常，而在你的程序中没有相应的异常处理程序，此时就形成了未处理异常。此时系统会弹出异常提示对话框，并可以结束进程。<br>&nbsp;&nbsp;显示异常对话框是这个功能具体是在UnhandledExceptionFilter中实现的，在启动进程、线程时，系统会安装一个最顶层的异常处理try-except结构，如下所示：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img8.ph.126.net_htCAxOUZBhGNK-KaQb_bQA==_2484016669489071648.jpg"  alt=""  /><br>&nbsp;&nbsp;BaseProcessStart用于进程的主线程，而BaseThreadStart用于其他线程。当异常产生时，如果程序中没有相应的异常处理程 序或者全都返回EXCEPTION_CONTINUE_SEARCH时，就会自动调用UnhandleExceptionFilter。<br><br>三、&nbsp;&nbsp;SEH相关数据结构的介绍<br>1、EXCEPTION_POINTER结构<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img2.ph.126.net_yDrd8WWboenumBBht7TyKg==_1584141168945288882.jpg"  alt=""  /><br><br>2、EXCEPTION_RECORD结构<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img4.ph.126.net_Iq8PrbrYEwZwUPWhnn1puQ==_2683582427977108014.jpg"  alt=""  /><br><br>3、EXCEPTOIN_REGISTRATION结构<br>&nbsp;&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img7.ph.126.net_3bjzkNu28dN8uSmhkH-_mQ==_2703285676346778767.jpg"  alt=""  /><br><br>4、异常处理链结构图<br>&nbsp;&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img1.ph.126.net_Rbg--plx-6WzaDNSINclyw==_98234766889726501.jpg"  alt=""  /><br><br>四、VC++编译器级SEH的具体实现<br>1、VC扩展异常帧<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img3.ph.126.net_YnEbIehjHPRub0sgwax6Lw==_2482046344652099913.jpg"  alt=""  /><br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img8.ph.126.net_zIdQmm_X3QfTooFw7XTOFA==_1587237393689106778.jpg"  alt=""  /><br><br>2、VC异常帧堆栈布局<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img2.ph.126.net_6qtfNm_HswrJI29Dwl_6Cg==_2523986116182164812.jpg"  alt=""  /><br><br>3、两个实例程序：显示异常帧信息（详见源码ShowExcptFrame1.cpp，ShowExcptFrame2.cpp）<br>对上面的结构不熟悉也没关系，下面通过实例来加深理解。 </span></p><p><span style="font-family:宋体; font-size:12pt;"  >代码: </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >// </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >//&nbsp;显示ScopeTable信息 </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >// </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >void&nbsp;SEHShowScopeTable(&nbsp;PVC_EXCEPTION_REGISTRATION&nbsp;pVCExcRec&nbsp;) </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;printf(&nbsp;"Frame:&nbsp;%08X&nbsp;&nbsp;Handler:&nbsp;%08X&nbsp;&nbsp;Prev:&nbsp;%08X&nbsp;&nbsp;Scopetable:&nbsp;%08X\n",&nbsp;\ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;pVCExcRec,&nbsp;pVCExcRec-&gt;handler,&nbsp;pVCExcRec-&gt;prev,&nbsp;&nbsp;pVCExcRec-&gt;scopetable&nbsp;); </span></p><p style="background: #dedfdf;"  >&nbsp;&nbsp; &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;PSCOPETABLE&nbsp;pScopeTableEntry&nbsp;=&nbsp;pVCExcRec-&gt;scopetable; </span></p><p style="background: #dedfdf;"  >&nbsp;&nbsp; &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;for&nbsp;(&nbsp;int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;=&nbsp;pVCExcRec-&gt;trylevel;&nbsp;i++&nbsp;) </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;printf(&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;scopetable[%u]&nbsp;PrevTryLevel:&nbsp;%08X&nbsp;&nbsp;" </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"filter:&nbsp;%08X&nbsp;&nbsp;__except:&nbsp;%08X\n",&nbsp;i, </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pScopeTableEntry-&gt;previousTryLevel, </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pScopeTableEntry-&gt;lpfnFilter, </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pScopeTableEntry-&gt;lpfnHandler&nbsp;); </span></p><p style="background: #dedfdf;"  >&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;pScopeTableEntry++; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;} </span></p><p style="background: #dedfdf;"  >&nbsp;&nbsp; &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;printf(&nbsp;"\n"&nbsp;); </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >}&nbsp;&nbsp;&nbsp; </span></p><p style="background: #dedfdf;"  > &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >// </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >//显示异常帧信息 </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >// </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >void&nbsp;SEHShowExcptFrames(&nbsp;) </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;PVC_EXCEPTION_REGISTRATION&nbsp;&nbsp;pVCExcRec; </span></p><p style="background: #dedfdf;"  >&nbsp;&nbsp; &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;//&nbsp;取得异常帧链首地址，保存在pVCExcRec </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;__asm&nbsp;&nbsp;&nbsp;mov&nbsp;eax,&nbsp;FS:[0] </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;__asm&nbsp;&nbsp;&nbsp;mov&nbsp;[pVCExcRec],&nbsp;EAX </span></p><p style="background: #dedfdf;"  >&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;//&nbsp;遍历异常帧链 </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;while&nbsp;(&nbsp;(unsigned)pVCExcRec&nbsp;!=&nbsp;0xFFFFFFFF&nbsp;) </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;{ </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;SEHShowScopeTable(&nbsp;pVCExcRec&nbsp;); </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;&nbsp;&nbsp;pVCExcRec&nbsp;=&nbsp;(PVC_EXCEPTION_REGISTRATION)(pVCExcRec-&gt;prev); </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p><p style="background: #dedfdf;"  ><span style="font-family:宋体; font-size:12pt;"  >} </span></p><p><span style="font-size:12pt;"  ><span style="font-family:宋体;"  >嵌套异常结构示例一：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img6.ph.126.net_OBn4sacpqVive2I-8MCvwQ==_1584141168945288886.jpg"  alt=""  /><br><br>输出结果：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img1.ph.126.net_UPpeyGoURlash31_5mJD9Q==_2712574350578224641.jpg"  alt=""  /><br>&nbsp;&nbsp;<br>嵌套异常结构示例二：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img1.ph.126.net_nBHgdQWuVdXmpClWD9peWg==_2696248801929013221.jpg"  alt=""  /><br><br>输出结果：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img6.ph.126.net_0v_SdYhZjtHvGi6IrSVaxQ==_2482046344652099916.jpg"  alt=""  /><br><br>4、实例分析及特性介绍（比较分析，注意结构示例与结果之间的联系）<br><br>&nbsp;&nbsp;[1]&nbsp;&nbsp;上面这个两个结果中各有4个异常帧。<br>&nbsp;&nbsp;[2]&nbsp;&nbsp;他们的后两条异常帧都是一致的，变化的只是前两个异常帧<br>&nbsp;&nbsp;[3]&nbsp;&nbsp;都是两重函数调用，main</span><span style="font-family:Symbol;"  >à</span><span style="font-family:宋体;"  >Function，每一重调用都以为着增加一个异常帧，其中的第一个帧代表最内层异常块，即Function函数的异常帧（相对于显示异常帧信息的函数来说），第二帧代表main函数的异常帧。<br>&nbsp;&nbsp;[4]&nbsp;&nbsp;scopetable域的项数与该函数中的异常块数目相关，示例一中的Function函数中有三个嵌套的异常块，因而第一帧scopetable中有三项；示例二中的Function函数中有四个异常块，因而第二帧scoptable中有四项。<br>&nbsp;&nbsp;[5]&nbsp;首先来看示例一，Function函数中的三个异常块是嵌套的，所以在scopetable[2]中的PrevTryLevel=1，表示当 前异常块在帧中的索引为2，与它相邻的外层异常块的索引为1，这个异常块的异常过滤器地址为filter:00401204，而异常处理回调函数的地址为 __except:&nbsp;00401207;因而在示例一的第一帧scopetable中的三项形成一个链表（这也比较好理解：三个异常块嵌套）。再来看示例 二，还是看第一帧，自己分析下，是否形成了两个链表。到这里，对于scoptable中的PrevTryLevel的意义应该清楚了。如果对于这部分还不 是很理解的话可以通过增加或修改程序中异常块、或者再增加几层函数调用，然后观察分析输出结果。<br>&nbsp;&nbsp;[6]&nbsp;&nbsp;不知道大家有没有发现EXCEPTION_REGISTRATION结构中有个handler，而在SCOPETABLE中也有个 lpfnHandler（即上面例子输出结果中的__except项）,这两个都是异常处理回调函数的地址，它们之间到底有什么联系和区别？示例中前三帧 的handler地址都是004014B0，why?<br>&nbsp;&nbsp;这个也不难回答，scopetable中的lpfnHandler是用于用户自定义的异常处理函数，而EXCEPTION_REGISTRATION的handler是用于系统默认的异常处理程序，即通常说的顶层异常处理回调函数。<br>&nbsp;&nbsp;[7]&nbsp;&nbsp;分析到这里，我只分析了4帧中的两帧，至于后两帧的作用，这一点将会在后文中讲解。<br><br><br>5、VC中的顶层异常处理<br>&nbsp;&nbsp;是否还记得在介绍第二部分的未处理异常时提到的BaseProcessStart，BaseThreadStart这两个函数。在启动主/次线程时，系统会把整个线程置于一个异常块中，即顶层异常处理体。在上文显示异常帧的两个例子中的第四帧正是来源于此。<br><br>&nbsp;&nbsp;在默认情况下，VC程序的入口点由运行时库函数mainCRTStartup和WinMainainCRTStartup来实现（如果对这方面不熟悉 的话,请参见参考资料[5]），其中又一次对将要调用的用户程序入口main，WinMain（默认情况）置于异常处理体中，在上文显示异常帧的两个例子 中的第三帧来自这里。<br><br>对于这两个入口函数，CRT中有相应的源码，大致结构经简化如下所示：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img4.ph.126.net_O_76BlggVEX1_ACpHDorsA==_3070891995930783864.jpg"  alt=""  /><br>&nbsp;&nbsp;<br>&nbsp;&nbsp;现在可以来总结下，VC编译器中默认情况（即我们的程序不显示的引入SEH）下的异常块结构示例：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img5.ph.126.net__EMexKOQx4xPYIXhbXR1xA==_2604487959521413365.jpg"  alt=""  /><br><br>&nbsp;&nbsp;其中的BaseProcessStart，WinMainCRTStartup这两个函数并非固定，需要是视具体情况而定，这个只是用做示例。<br>&nbsp;&nbsp;到这里，对于上小节中的遗留下来的关于第三和第四个异常帧的问题已经解决了。<br><br>6、VC搜索异常处理程序流程<br>&nbsp;&nbsp;在介绍第三部分SEH相关数据结构时，已经介绍了异常处理链的结构，但针对VC中的异常处理，异常帧的扩展包括scopetable结构的引入使得支 持嵌套的异常结构，因而当出现异常时寻找相应的异常处理程序的过程相对来说变的更加复杂。VC搜索异常处理程序流程如下所示：<br>&nbsp;<img title="[转] Windows系统程序设计之结构化异常处理 - Howie - Dspace"  src="pic/img7.ph.126.net_HYz-of13WlgiJsjZALLU8Q==_2604487959521413367.jpg"  alt=""  /><br>&nbsp;<br>【参考文献】<br>[1].&nbsp;Windows核心编程&nbsp;Jeffrey&nbsp;Richter著&nbsp;机械工业出版社<br>[2].&nbsp;A&nbsp;Crash&nbsp;Course&nbsp;on&nbsp;the&nbsp;Depths&nbsp;of&nbsp;Win&nbsp;32&amp;reg;&nbsp;Structured&nbsp;Exception&nbsp;Handling<br>http://www.microsoft.com/msj/0197/Exception/Exception.aspx<br>[3].&nbsp;Windows&nbsp;2000&nbsp;内部揭密&nbsp;&nbsp;机械工业出版社<br>[4].&nbsp;Windows异常处理流程&nbsp;&nbsp;SoBeIt<br>&nbsp;&nbsp;&nbsp;http://www.nsfocus.net/index.php?act=magazine&amp;do=view&amp;mid=2471<br>[5].&nbsp;在VC中编译、运行程序的小知识点<br>&nbsp;&nbsp;&nbsp;http://fmddlmyy.home4u.china.com/text3.html</span></span></p>
</body></html>