<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：Git 之基础命令 笔记</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>Git 之基础命令 笔记</h2>
<p align="right">发布时间：2011-7-18 11:19
<br>分类名称：Version control</p><br>
<div>Git Pro最新版：http://git-scm.com/book/zh/v2&nbsp;</div><wbr>Git 只关心数据是否整体变化，而subversion每次记录有哪些文件作了更新，已经更新了哪儿些内容。<br><br>三种状态：<br>1. 已提交（committed）<br>2. 已修改（modified）<br>3. 已暂存（staged）<br><br>忽略某些文件，创建一个叫 ".gitignore"的文件。<br><pre class="prettyprint"   ><p>*.[oa]<br>*~<br>*.html<br>*.pdb</p></pre><br>ignroe文件格式如下：<br>所有空行或者#开头的行都被忽略。<br>使用标准的glob模式匹配。（glob匹配为简化了的正则表达式）<br>匹配模式最后跟反斜杠，说明要忽略的是目录<br>可以使用取反“！”<br>如：<br>*.a &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;#忽略所有 .a 的文件<br>!lib.a&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;#但lib.a除外<br>/TODO&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;#仅仅忽略项目更目录下的TODO文件，不包括subdir/TODO<br>build/&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;#忽略build/目录下的所有文件<br>doc/*.txt&nbsp;&nbsp; &nbsp;#会忽略doc/notes.txt,但不包括doc/server/arch.txt<br><br>============= Commands ================<br>Git 配置<br><pre class="prettyprint"   ><p>git config --global user.name "dsliu"<br>git config --global user.email "hao.dsli@gmail.com"<br>git config --global core.editor vim<br>git config --global merge.tool vimdiff<br>git config --list<br>git config user.name</p></pre><br>帮助信息<br><pre class="prettyprint"   ><p>git help &lt;verb&gt;<br>git &lt;verb&gt; --help<br>man git-&lt;verb&gt;</p></pre><br>初始化<br><pre class="prettyprint"   ><p>git init<br><br>git clone git://gitthub.com/schacon/grit.git<br>git clone git://gitthub.com/schacon/grit.git mygrit</p></pre><br>状态，对比<br><div><pre class="prettyprint"   ><p>git status<br>git diff &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 比较当前工作状态和暂存状态的差异 （<span style="color: rgb(78, 68, 60); font-family: sans-serif; font-size: 14px; line-height: 22px; background-color: rgb(252, 252, 250);"   >当前做的哪些更新还没有暂存）</span><br>git diff --cached&nbsp;&nbsp; &nbsp; # 比较暂存状态和上次提交状态的差异（<span style="color: rgb(78, 68, 60); font-family: sans-serif; font-size: 14px; line-height: 22px; background-color: rgb(252, 252, 250);"   >有哪些更新已经暂存起来准备好了下次提交</span>）</p><div>git diff --staged &nbsp; &nbsp; # 同cached，高版本的git支持此命令。</div><p></p></pre><br>#1. 使用git add跟踪新文件。 <br>#2. 使用git add将以跟踪文件放到暂存区<br>#3. 使用git add将冲突文件标记为已解决状态。<div><pre class="prettyprint"   ><p>git add *.c&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br>git add README</p></pre><br>删除文件<br><pre class="prettyprint"   ><p>git rm files<br>git rm --cached files<br>git -f files</p></pre><br>移动文件<br><pre class="prettyprint"   ><p>git mv file1 file2</p></pre><br>显示提交信息<br><pre class="prettyprint"   ><p>git log<br>git log -p<br>git log --stat<br>git log --pretty=oneline<br>git log --pretty=short<br>git log --pretty=full<br>git log --pretty=fuller<br>git log --pretty=format:"%h - %an, %ar : %s"<br>git log --pretty=format:"%h %s" --graph</p></pre><br>提交<br><pre class="prettyprint"   ><p>git commit -m "My first git project"<br>git commit -a -m "My first git project"<br>git commit --amend</p></pre><br>取消已暂存的文件<br><pre class="prettyprint"   ><p>git reset HEAD files<br></p></pre>取消对文件的修改<br><pre class="prettyprint"   ><p>git checkout -- files</p></pre><br>远程仓库<br><pre class="prettyprint"   ><p>git remote<br>git remote -v<br>git remote add pb git://git.com/tiger.git<br>git fetch [remote-name] </p><p>git push [remote-name] [local-branch]</p><p>git push origin serverfix</p><p>git push origin serverfix:serverfix</p><p>git remote show origin<br>git remote rename pb paul&nbsp;&nbsp; &nbsp;</p></pre><br>打标签<br><pre class="prettyprint"   ><p>git tag                 #显示所有的tag<br>git tag -l 'v1.4.2.*'   #过滤显示的tag<br>git tag v1.4-1w         #创建标签（lightweight）<br>git tag -a v1.3 -m "my version 1.4"  #创建标签（<span style="color: rgb(78, 68, 60); font-family: sans-serif; font-size: 14px; line-height: 22px; white-space: normal; background-color: rgb(252, 252, 250);"   >annotated）</span><br>git tag -a v1.4 9fceb02              #<span style="color: rgb(78, 68, 60); font-family: sans-serif; font-size: 14px; line-height: 22px; white-space: normal; background-color: rgb(252, 252, 250);"   >对过去的提交打标签</span><br>git tag -s v1.5 -m "my version 1.5"  #签名<br>git tag -v v1.5                      #验证签名<br>git show v1.4           #显示标签信息<br>git push origin v1.5    #推送标签到远程仓库<br>git push origin --tags  #推送所有的标签到远程仓库</p></pre><br>别名</div><div><pre data-type="programlisting"   data-code-language="console"   ><pre data-type="programlisting"   data-code-language="console"   ><pre class="prettyprint"   ><p>git config --global alias.co checkout<br>git config --global alias.br branch<br>git config --global alias.ci commit<br>git config --global alias.st status<br></p><pre data-type="programlisting"   data-code-language="console"   >git config --global alias.unstage <code>'reset HEAD --'<br><pre data-type="programlisting"   data-code-language="console"   >git unstage fileA</pre><br></code></pre><p></p></pre>
</pre></pre>分支<br><pre class="prettyprint"   ><p>git branch testing          # 创建分支<br>git checkout testing        # 检出分支<br>=&gt; git checkout -b testing  # 一条命令搞定<br><br>git checkout master<br>git merge hotfix            #合并hotfix到master<br>git branch -d hotfix        #删除hotfix分支</p><p><br>git mergetool<br><br>git branch             #显示所有本地分支<br>git branch -v          #显示每个分支名称和对应的最后一次提交<br>git branch --merged    #<span style="color: rgb(78, 68, 60); font-family: sans-serif; font-size: 14px; line-height: 22px; white-space: normal; background-color: rgb(252, 252, 250);"   >查看哪些分支已经合并到当前分支</span><br>git branch --no-merged #<span style="color: rgb(78, 68, 60); font-family: sans-serif; font-size: 14px; line-height: 22px; white-space: normal; background-color: rgb(252, 252, 250);"   >查看所有包含未合并工作的分支</span><br>git branch -D testing  #强制删除分支</p><p>git checkout -b serverfix origin/serverfix #<span style="color: rgb(78, 68, 60); font-family: sans-serif; font-size: 14px; line-height: 22px; white-space: normal; background-color: rgb(252, 252, 250);"   >用于工作的本地分支，并且起点位于：远程分支 origin/serverfix</span></p><p><span style="line-height: 28px;"   >git checkout --track origin/serverfix      #同上面的操作</span></p><p><span style="line-height: 28px;"   >git branch -u origin/serverfix             #</span><span style="color: rgb(78, 68, 60); font-family: sans-serif; font-size: 14px; line-height: 22px; white-space: normal; background-color: rgb(252, 252, 250);"   >设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支</span></p><p><span style="line-height: 28px;"   >git push origin --delete serverfix         #删除远程分支</span></p><p><span style="color: rgb(78, 68, 60); font-family: sans-serif; font-size: 14px; line-height: 22px; white-space: normal; background-color: rgb(252, 252, 250);"   >git branch -vv &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #显示所有跟踪分支</span></p></pre><br>===============================================<br><pre class="prettyprint"   ><p>git rebase master</p></pre></div></div>
</body></html>