<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：Correctly Creating Native C++ Release Build PDBs</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>Correctly Creating Native C++ Release Build PDBs</h2>
<p align="right">发布时间：2012-12-6 15:22
<br>分类名称：Debug_Crack</p><br>
   <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >From：http://www.wintellect.com/CS/blogs/jrobbins/archive/2009/08/31/correctly-creating-native-c-release-build-pdbs.aspx </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >In my ongoing discussion of PDB files and debugging, Sa Li had a great <A rel="nofollow" href="http://www.wintellect.com/CS/blogs/jrobbins/archive/2009/08/22/how-many-secrets-do-net-pdb-files-really-contain.aspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >question</SPAN></A>: </SPAN></P>  <P style="MARGIN-LEFT: 36pt;"  ><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  ><EM>Should the final release native program also generate the pdb files before being published? </EM></SPAN></P>  <P style="MARGIN-LEFT: 36pt;"  ><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  ><EM>If switching on the pdb in link setting, what kind of info would be added into the .exe executable file? </EM></SPAN></P>  <P style="MARGIN-LEFT: 36pt;"  ><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  ><EM>I found our program grows a lot after turning on this flag. Does that have anything which can reveal some sensitive secrete of our program? </EM></SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >If you've read any of my <A rel="nofollow" href="http://www.amazon.com/Debugging-Applications-Microsoft%C2%AE-Microsoft-Pro-Developer/dp/0735615365/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1251758815&amp;sr=8-1" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >books</SPAN></A> that discussed native debugging, I've been shouting that you must build PDB files for <STRONG><EM>all</EM></STRONG> builds. Of course, if you are paid by the hour don't build PDB files so debugging is massively harder and you have guaranteed employment. There's nothing like debugging yourself a new car. Just kidding! </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >One of the issues that you bump into with debugging release build native C++ applications are the compiler optimizations. For example, many local variables disappear because instead of putting them on the stack, as what happens in debug builds, the code generator puts them in registers instead. Additionally, release builds aggressively inline calls to functions so the code generator puts the body of the function directly in the calling method. Once you get used to the compiler's patterns, and know a bit of assembly language, it's not too hard to figure out what's going on when debugging release build code. If you have never debugged release builds, I'd highly recommend the outstanding book, <A rel="nofollow" href="http://www.amazon.com/Advanced-Debugging-Addison-Wesley-Microsoft-Technology/dp/0321374460" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >Advanced Windows Debugging</SPAN></A>, by Mario Hewardt and Daniel Pravat to get you started. </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >What I want to cover in this article are the exact switches necessary to properly create native C++ release build PDBs without screwing up your application so I can answer Sa's question. The switches I will show you have nothing to do with optimizations and PDB file creation does not affect optimizations. </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >The first switch to set is on the compiler, CL.EXE and it's <A rel="nofollow" href="http://msdn.microsoft.com/en-us/library/958x11bc.aspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >/Zi</SPAN></A>. This switch will put the debug information in the .OBJ file so the linker can put it into the final PDB. You'll set this switch in the project's C/C++ property page as shown below. </SPAN></P>  <P><IMG title="Correctly Creating Native C++ Release Build PDBs - Howie - Dspace"  alt=""  src="pic/img5.ph.126.net_DvIlzooz03quGAFSj0wjwQ==_2627850382588604405.jpg"  ><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  > </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >The next three switches apply to the linker, LINK.EXE. The first, <A rel="nofollow" href="http://msdn.microsoft.com/en-us/library/xe4t6fc1(loband).aspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >/DEBUG</SPAN></A>, tells the linker that you want to build create a PDB file for this build. Here's the property page: </SPAN></P>  <P><IMG title="Correctly Creating Native C++ Release Build PDBs - Howie - Dspace"  alt=""  src="pic/img6.ph.126.net_GAQvDSFUWXfZGoG_lzSk5w==_6597468889377475316.jpg"  ><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  > </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >There's a small problem with the /DEBUG switch. Turning it on tells the linker that you are doing a non-optimized build so /DEBUG implicitly turns on the <A rel="nofollow" href="http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >/INCREMENTAL</SPAN></A> and essentially creates a debug build, though the compiler optimizations would apply (but not the <A rel="nofollow" href="http://msdn.microsoft.com/en-us/magazine/cc301698.aspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >link time code generation</SPAN></A> optimizations). What this means to you is that the linker links in "fast mode" so if you have an OBJ that has 300 functions in it, but you only reference (i.e., use) one of those functions, the linker puts all 300 functions into the output binary. Yes, that means 299 dead functions and a really bloated binary. </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >This "throw everything into the output binary" is one of the reasons your debug builds are so much bigger than your release builds. The Microsoft optimization technologies are extremely good, but not that good! </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >Because you only want those functions you actually reference in the output binary, you need to tell that to the linker with the <A rel="nofollow" href="http://msdn.microsoft.com/en-us/library/bxwfs976.aspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >/OPT:REF</SPAN></A> switch, which is set in the Optimization section of the linker as below: </SPAN></P>  <P><IMG title="Correctly Creating Native C++ Release Build PDBs - Howie - Dspace"  alt=""  src="pic/img8.ph.126.net_lfPQApPJZUQFHTk6Uutqxw==_2650368380725453648.jpg"  ><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  > </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >The final linker switch you need to set is a an interesting little gem: <A rel="nofollow" href="http://msdn.microsoft.com/en-us/library/bxwfs976.aspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >/OPT:ICF</SPAN></A>. This turns on COMDAT folding. Wow! There's a term you don't hear every day. This is a nice little compiler optimization where the linker will look for functions that have identical assembly language code and only generate one of them. The first time most people here about COMDAT folding it throws them for a loop. However, when you consider how many functions, especially STL templates that are simple and identical, this COMDAT folding can help you slim down your binaries. For a more detailed discussion, see Raymond Chen's <A rel="nofollow" href="http://blogs.msdn.com/oldnewthing/archive/2005/03/22/400373.aspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >examples</SPAN></A> and why on rare occasions optimized builds step into the "wrong" function with this switch turned on. If you looked closely at the Optimization section of the screen shot above, you'll see the /OPT:ICF option is right below the /OPT:REF option. </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >In Sa's case, I bet the reason their release build binaries are growing because they aren't setting the /OPT:REF and /OPT:ICF switches. The only information added to a native C++ binary with these switches on is the debug directory in the output binary. As I mentioned in the first article in this <A rel="nofollow" href="http://www.wintellect.com/CS/blogs/jrobbins/archive/2009/05/11/pdb-files-what-every-developer-must-know.aspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >series</SPAN></A>, you can peer into your Portable Executable files with the <A rel="nofollow" href="http://msdn.microsoft.com/en-us/library/c1h23y6c(loband).aspx'" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >DUMPBIN</SPAN></A> program: </SPAN></P>  <P><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New;"  >PS &gt; dumpbin /headers foo.dll<BR><STRONG><EM>// Output clipped for clarity.<BR></EM></STRONG>Debug Directories<BR>Time Type Size RVA Pointer<BR>-------- ------ -------- -------- --------<BR>4A831A79 cv 4A 0000A5C0 97C0 <BR>Format: RSDS, {9FCACFCD-1503-4B25-A2EA-6009EAFC83BA}, 1, c:\foo\foo.pdb<BR><STRONG><EM>// Output clipped for clarity. </EM></STRONG></SPAN><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  ></SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >I hope that clears things up for Sa and everyone else still working on native C++ applications. While .NET gets all the coverage these days, a huge amount of the Windows world still works because of those applications. Do you have any other questions about PDBs or debugging? Ask away by sending me an email (john @ this company's domain) or through a question on the blog. </SPAN></P>  <P>&nbsp;</P>  <P>[Comment by howie liu.]<BR>By the way,&nbsp; you can see the path in your release binary like "c:\foo\foo.pdb". You may do not want anyone else to find it. You can use "/PDBALTPATH:pdb_file_name" option&nbsp;while linking your binary. see more informaiton in the web page:(<A rel="nofollow" href="http://msdn.microsoft.com/en-us/library/dd998269.aspx"  >http://msdn.microsoft.com/en-us/library/dd998269.aspx</A>)</P>
</body></html>