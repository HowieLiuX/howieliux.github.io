<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转] shc gzexe 将shell脚本转换为二进制的可执行文件</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转] shc gzexe 将shell脚本转换为二进制的可执行文件</h2>
<p align="right">发布时间：2015-12-24 11:11
<br>分类名称：Linux</p><br>
<h2 style="line-height:25px;background-color:#ffffff;margin:0px 0px 4px;font-family:verdana, arial, helvetica, sans-serif;font-size:14px;"   >From: http://xlogin.blog.51cto.com/3473583/1266886</h2><div style="line-height:25px;background-color:#ffffff;margin:0px 0px 4px;font-family:verdana, arial, helvetica, sans-serif;font-size:14px;"   ><br></div><h2 style="line-height:25px;background-color:#ffffff;margin:0px 0px 4px;font-family:verdana, arial, helvetica, sans-serif;font-size:14px;"   >第一种方法(gzexe)：<br>这种加密方式不是非常保险的方法，但是能够满足一般的加密用途，可以隐蔽脚本中的密码等信息。<br>它是使用系统自带的gzexe程序，它不但加密，同时压缩文件。<br>使用方法:<br>gzexe&nbsp;file.sh<br>它会把原来没有加密的文件备份为&nbsp;file.sh~&nbsp;,同时&nbsp;file.sh&nbsp;即被变成加密文件；<br><br>第二种方法(shc)：<br>使用&nbsp;shc&nbsp;对&nbsp;Linux&nbsp;shell&nbsp;脚本加密.<br>shc是一个专业的加密shell脚本的工具.它的作用是把shell脚本转换为一个可执行的二进制文件，这个办法很好的解决了脚本中含有IP、密码等不希望公开的问题.<br>shc的下载地址:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><a style="color:#1d58d1;text-decoration:none" rel="nofollow" href="http://download.chinaunix.net/download/0010000/9479.shtml"   >http://download.chinaunix.net/download/0010000/9479.shtml</a><br>安装:<br>tar&nbsp;zxvf&nbsp;shc-3.8.tgz<br>cd&nbsp;shc-3.8<br>make&nbsp;test<br>make<br>make&nbsp;test<br>make&nbsp;strings<br>make&nbsp;install<br>使用方法:<br>shc&nbsp;-r&nbsp;-f&nbsp;script-name<br>运&nbsp;行后会生成两个文件,script-name.x&nbsp;和&nbsp;script-name.x.c.&nbsp;&nbsp;&nbsp;其中script-name.x是加密后的可执行的二进制文件；用./script-name即可运行，script-name.x.c是生成&nbsp;script-name.x的原文件(c语言).</h2><div style="line-height:25px;background-color:#ffffff;font-family:verdana, arial, helvetica, sans-serif;font-size:14px;"   ><div id="cnblogs_post_body"   style="word-break:normal !important;"   ><p style="margin:10px auto;"   >&nbsp;</p><p style="margin:10px auto;"   >-----------------------------------------------------------------------</p><p style="margin:10px auto;"   >&nbsp;</p><p style="margin:10px auto;"   >如果你的shell脚本包含了敏感的口令或者其它重要信息,&nbsp;而且你不希望用户通过ps&nbsp;-ef(查看系统每个进程的状态)捕获敏感信息.&nbsp;你可以使用shc工具来给shell脚本增加一层额外的安全保护.&nbsp;shc是一个脚本编译工具,&nbsp;使用RC4加密算法,&nbsp;它能够把shell程序转换成二进制可执行文件(支持静态链接和动态链接).&nbsp;该工具能够很好的支持:&nbsp;需要加密,&nbsp;解密,&nbsp;或者通过命令参数传递口令的环境.</p><p style="margin:10px auto;"   >shc主页:&nbsp;<br><a style="color:#1d58d1;text-decoration:none" rel="nofollow" href="http://www.datsi.fi.upm.es/~frosal/"   >http://www.datsi.fi.upm.es/%7Efrosal/</a></p><p style="margin:10px auto;"   >现在的版本是3.8.6(shc-3.8.6.tgz),&nbsp;以此为例介绍shc的安装及应用:</p><p style="margin:10px auto;"   ><strong>准备:</strong><br>首先你需要检查系统是否安装了gcc编译器,&nbsp;以Fedora&nbsp;Core&nbsp;6为例介绍gcc的检查和安装:&nbsp;<br>#&nbsp;rpm&nbsp;-qa|grep&nbsp;compat-gcc&nbsp;<br>compat-gcc-34-3.4.6-4&nbsp;<br>如果没有安装,&nbsp;按下面步骤安装gcc&nbsp;<br>#&nbsp;wget&nbsp;ftp://mirrors.kernel.org/fedora/core/6/i386/os/Fedora/RPMS/compat-gcc-34-3.4.6-4.i386.rpm&nbsp;<br>然后&nbsp;<br>#&nbsp;ln&nbsp;-s&nbsp;/usr/bin/gcc34&nbsp;/usr/bin/cc</p><p style="margin:10px auto;"   ><strong>安装:</strong><br>#&nbsp;wget&nbsp;http://www.datsi.fi.upm.es/%7Efrosal/sources/shc-3.8.6.tgz&nbsp;<br>#&nbsp;tar&nbsp;vxf&nbsp;shc-3.8.6.tgz&nbsp;<br>#&nbsp;cd&nbsp;shc-3.8.6&nbsp;<br>#&nbsp;make&nbsp;test&nbsp;<br>#&nbsp;make&nbsp;strings&nbsp;<br>#&nbsp;make&nbsp;install</p><p style="margin:10px auto;"   ><strong>应用:</strong><br>下面以mysql数据库备份(备份文件通过ftp上传到一台远程的服务器)脚本为例:&nbsp;<br>###############################&nbsp;mysql_backup.sh&nbsp;##############################&nbsp;<br>#!/bin/sh</p><p style="margin:10px auto;"   >newtime=`date&nbsp;+%m-%d-%y_%I%M%p`&nbsp;<br>mysqldump&nbsp;-u&nbsp;******&nbsp;-p&nbsp;******&nbsp;dbname&nbsp;|&nbsp;gzip&nbsp;&amp;gt;&nbsp;/Users/****/Documents/dbName_$newtime.sql.gz&nbsp;<br>echo&nbsp;“backup&nbsp;of&nbsp;dbname”&nbsp;<br>curl&nbsp;–upload-file&nbsp;dbname$newtime.sql.gz&nbsp;–url&nbsp;“ftp://*****:*****@host/”&nbsp;<br>echo&nbsp;“ftp&nbsp;of&nbsp;dbname&nbsp;done”</p><p style="margin:10px auto;"   >###############################&nbsp;mysql_backup.sh&nbsp;##############################</p><p style="margin:10px auto;"   ><strong>1).&nbsp;加密脚本.</strong></p><p style="margin:10px auto;"   >#&nbsp;shc&nbsp;-v&nbsp;-f&nbsp;mysql_backup.sh&nbsp;<br>-v:&nbsp;是verbose模式，输出更详细编译日志.&nbsp;-f:&nbsp;指定脚本的名称.</p><p style="margin:10px auto;"   >上面命令在屏幕上的输出:&nbsp;<br>shc&nbsp;shll=sh&nbsp;<br>shc&nbsp;[-i]=-c&nbsp;<br>shc&nbsp;[-x]=exec&nbsp;‘%s’&nbsp;“$@”&nbsp;<br>shc&nbsp;[-l]=&nbsp;<br>shc&nbsp;opts=&nbsp;<br>shc:&nbsp;cc&nbsp;mysql_backup.sh.x.c&nbsp;-o&nbsp;mysql_backup.sh.x&nbsp;<br>shc:&nbsp;strip&nbsp;mysql_backup.sh.x&nbsp;<br>shc:&nbsp;chmod&nbsp;go-r&nbsp;mysql_backup.sh.x</p><p style="margin:10px auto;"   >我们可以看到生成了动态链接可执行二进制文件mysql_back.sh.x和C源文件mysql_backup.sh.x.c,&nbsp;注意生成的二进制文件因为是动态链接形式,&nbsp;所以在其它平台上不能运行:</p><p style="margin:10px auto;"   >mysql_backup.sh.x:&nbsp;ELF&nbsp;32-bit&nbsp;LSB&nbsp;executable,&nbsp;Intel&nbsp;80386,&nbsp;version&nbsp;1&nbsp;(SYSV),&nbsp;<br>dynamically&nbsp;linked&nbsp;(uses&nbsp;shared&nbsp;libs),&nbsp;for&nbsp;GNU/Linux&nbsp;2.6.9,&nbsp;stripped</p><p style="margin:10px auto;"   ><strong>2).&nbsp;生成静态链接的二进制可执行文件.</strong></p><p style="margin:10px auto;"   >不过,&nbsp;我们可以通过下面的方法生成一个静态链接的二进制可执行文件:</p><p style="margin:10px auto;"   >#&nbsp;CFLAGS=-static&nbsp;shc&nbsp;-r&nbsp;-f&nbsp;mysql_backup.sh&nbsp;<br>#&nbsp;file&nbsp;mysql_backup.sh.x&nbsp;<br>mysql_backup.sh.x:&nbsp;ELF&nbsp;32-bit&nbsp;LSB&nbsp;executable,&nbsp;Intel&nbsp;80386,&nbsp;version&nbsp;1&nbsp;(SYSV),&nbsp;<br>statically&nbsp;linked,&nbsp;for&nbsp;GNU/Linux&nbsp;2.6.9,&nbsp;stripped</p><p style="margin:10px auto;"   >提示:&nbsp;通过sch加密后的脚本文件很安全吗?&nbsp;<br>一般来说是安全的,&nbsp;不过可以使用gdb和其它的调试工具获得最初的源代码.&nbsp;如果你需要更加安全的方法,&nbsp;可以考虑使用<a style="color:#1d58d1;text-decoration:none" rel="nofollow" href="http://wzce.tripod.com/wzsh.html"   >wzshSDK</a>.</p><p style="margin:10px auto;"   >另外,&nbsp;sch还可以设置脚本的运行期限和自定义返回信息:&nbsp;<br>shc&nbsp;-e&nbsp;03/31/2007&nbsp;-m&nbsp;“the&nbsp;mysql&nbsp;backup&nbsp;script&nbsp;is&nbsp;now&nbsp;out&nbsp;of&nbsp;date.”&nbsp;-f&nbsp;mysql_back.sh</p><p style="margin:10px auto;"   >-e表示脚本将在2007年3月31日前失效,&nbsp;并根据-m定义的信息返回给终端用户.</p><p style="margin:10px auto;"   ><strong>3).&nbsp;二进制文件的剖析</strong><br>有兴趣的朋友可以参阅下面的文章:&nbsp;<br><a style="color:#1d58d1;text-decoration:none" rel="nofollow" href="http://www.linuxjournal.com/article/8256"   >Paranoid&nbsp;Penguin&nbsp;-&nbsp;Limitations&nbsp;of&nbsp;shc,&nbsp;a&nbsp;Shell&nbsp;Encryption&nbsp;Utility</a></p><p style="margin:10px auto;"   >你好&nbsp;shc&nbsp;能不能在６４位的机子上运行我有台６４位的服务器&nbsp;ＯＳ&nbsp;为６４位的rhel4up2&nbsp;执行加密后的脚本出错&nbsp;<br>test.sh.x:&nbsp;has&nbsp;expired!&nbsp;<br>Please&nbsp;contact&nbsp;your&nbsp;provider&nbsp;<br>是什么问题&nbsp;估计在运行命令的时候-e选项指定的日期已经失效,&nbsp;注意看一下服务器的时间是否正确.</p><p style="margin:10px auto;"   >在64（OS为64位）位的机子加-e&nbsp;和不加&nbsp;-e&nbsp;还是报那样的错误，服务器的时间没有问题，我在32位的机子上测试完全正常，你可以在64位测试以下</p><p style="margin:10px auto;"   >&nbsp;</p><p style="margin:10px auto;"   >&nbsp;</p><p style="margin:10px auto;"   >&nbsp;</p><p style="margin:10px auto;"   >下面就说明一下shc的安装,参数，以及使用示例：<br>下载安装：<br>(官网下载地址:&nbsp;http://www.datsi.fi.upm.es/~frosal/sources/)<br>#&nbsp;wget&nbsp;http://www.datsi.fi.upm.es/~frosal/sources/shc-3.8.7.tgz<br>#&nbsp;cd&nbsp;shc-3.8.7<br>#&nbsp;make<br>#&nbsp;make&nbsp;install<br>(仅用make就可以完成安装，运行shc时要指出绝对路径；用make&nbsp;install，将shc安装到/usr/local/bin下，可以直接运行）<br><br>常用参数：<br>-e&nbsp;date&nbsp;<br>Expiration&nbsp;date&nbsp;in&nbsp;dd/mm/yyyy&nbsp;format&nbsp;[none]（指定过期日期）<br><br>-m&nbsp;message<br>message&nbsp;to&nbsp;display&nbsp;upon&nbsp;expiration&nbsp;["Please&nbsp;contact&nbsp;your&nbsp;provider"]（指定过期提示的信息）<br><br>-f&nbsp;script_name<br>File&nbsp;name&nbsp;of&nbsp;the&nbsp;script&nbsp;to&nbsp;compile（指定要编译的shell的路径及文件名）<br><br>-r&nbsp;Relax&nbsp;security.&nbsp;<br>Make&nbsp;a&nbsp;redistributable&nbsp;binary&nbsp;which&nbsp;executes&nbsp;on&nbsp;different&nbsp;systems&nbsp;running&nbsp;the&nbsp;same&nbsp;operat-ing&nbsp;system.（可以相同操作系统的不同系统中执行）<br><br>-v&nbsp;Verbose&nbsp;compilation（编译的详细情况）<br><br>使用示例:<br>[root@centos54&nbsp;tmp]#&nbsp;/usr/local/src/shc-3.8.7/shc&nbsp;-e&nbsp;20/10/2010&nbsp;-m&nbsp;"contact&nbsp;xxx@163.com"&nbsp;-v&nbsp;-r&nbsp;-f&nbsp;./ex.sh<br>-e:指定过期时间为2010年10月20日<br>-m:过期后打印出的信息；<br>-v:&nbsp;verbose<br>-r:&nbsp;可在相同操作系统的不同主机上执行<br>-f:&nbsp;指定源shell</p></div></div><wbr>
</body></html>