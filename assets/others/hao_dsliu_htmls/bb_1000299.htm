<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转] (6) OpenSSL 之动态模块加载</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转] (6) OpenSSL 之动态模块加载</h2>
<p align="right">发布时间：2010-4-4 19:58
<br>分类名称：OpenSSL</p><br>
<strong>动态库加载</strong><br>动态库加载函数能让用户在程序中加载所需要的模块，各个平台下的加载函数是不一样的。动态加载函数一般有如下功能：<br>1) 加载动态库<br>比如windows下的函数LoadLibraryA；linux下的函数dlopen。这些函数一般需要动态库的名字作为参数。<br><br>2) 获取函数地址<br>比如windows下的函数GetProcAddress已及linux下的函数dlsym。这些函数一般需要函数名作为参数，返回函数地址。<br><br>3) 卸载动态库<br>比如windows下的函数FreeLibrary和linux下的函数dlclose。<br><br><strong>DSO概述</strong><br>DSO可以让用户动态加载动态库来进行函数调用。各个平台下加载动态库的函数是不一样的，openssl的DSO对各个平台台下的动态库加载函数进行了封装，增加了源码的可移植性。Openssl的DSO功能主要用于动态加载压缩函数（ssl协议）和engine(硬件加速引擎)。Openssl的DSO功能除了封装基本的功能外还有其他辅助函数，主要用于解决不同系统下路径不同的表示方式以及动态库全名不一样的问题。比如windows系统下路径可以用“\\”和“/”表示，而linux下只能使用“/”；windows下动态库的后缀为.dll而linux下动态库名字一般为libxxx.so。<br><br><strong>数据结构</strong><br>dso数据结定义在crypto/dso/dso.h中，如下所示：<br>struct dso_st<br>{<br> DSO_METHOD *meth;<br> STACK *meth_da<wbr>ta;<br> int references;<br> int flags;<br> CRYPTO_EX_DA<wbr>TA ex_da<wbr>ta;<br> DSO_NAME_CONVERTER_FUNC name_converter;<br> DSO_MERGER_FUNC merger;<br> char *filename;<br> char *loaded_filename;<br>};<br>meth：指出了操作系统相关的动态库操作函数。<br>meth_da<wbr>ta：堆栈中存放了加载动态库后的句柄。<br>reference：引用计数，DSO_new的时候置1，DSO_up_ref时加1,DSO_free时减1。<br>当调用DSO_free时,只有当前的references为1时才真正释放meth_da<wbr>ta中存放的句柄。<br>flag：与加载动态库时加载的文件名以及加载方式有关，用于DSO_ctrl函数。<br>DSO_convert_filename：当加载动态库时会调用DSO_convert_filename函数来确定所加载的文件。而DSO_convert_filename函数会调用各个系统自己的convert函数来获取这个文件名。<br>对于flag有三种种操作命令：设置、读取和或的关系，对应定义如下：<br>#define DSO_CTRL_GET_FLAGS 1<br>#define DSO_CTRL_SET_FLAGS 2<br>#define DSO_CTRL_OR_FLAGS 3<br>而flag可以设置的值有如下定义：<br>#define DSO_FLAG_NO_NAME_TRANSLATION 0x01<br>#define DSO_FLAG_NAME_TRANSLATION_EXT_ON<wbr>LY 0x02<br>#define DSO_FLAG_UPCASE_SYMBOL 0x10<br>#define DSO_FLAG_GLOBAL_SYMBOLS 0x20<br>意义说明如下：<br>DSO_FLAG_NO_NAME_TRANSLATION<br>加载的文件名与指定的文件名一致，不加后缀.dll(windows)或.so(linux或unix)。<br>DSO_FLAG_NAME_TRANSLATION_EXT_ON<wbr>LY<br>加载的文件名会加上lib串，比如用户加载eay32,真正加载时会加载libeay32(适用于linux或unix)。<br>DSO_FLAG_UPCASE_SYMBOL<br>适用于OpenVMS。<br>DSO_FLAG_GLOBAL_SYMBOLS<br>适用于unix,当在unix下调用加载函数dlopen时,参数会被或上RTLD_GLOBAL。<br>ex_da<wbr>ta：扩展数据，没有使用。<br>name_converter:：指明了具体系统需要调用的名字计算函数。<br><p>loaded_filename：指明了加载动态库的全名。</p><p><br></p><strong>编程示例</strong><br>示例1：<br>#include &lt;openssl/dso.h&gt;<br>#include &lt;openssl/bio.h&gt;<br>int main()<br>{<br> DSO *d;<br> void (*f1)();<br> void (*f2)();<br> BIO *(*BIO_newx)(BIO_METHOD *a);<br> BIO *(*BIO_freex)(BIO_METHOD *a);<br> BIO *test;<br><br> d=DSO_new();<br> d=DSO_load(d,"libeay32",NULL,0);<br> f1=DSO_bind_func(d,"BIO_new");<br> f2=DSO_bind_var(d,"BIO_free");<br> BIO_newx=(BIO *(*)(BIO_METHOD *))f1;<br> BIO_freex=(BIO *(*)(BIO_METHOD *))f2;<br> test=BIO_newx(BIO_s_file());<br> BIO_set_fp(test,stdout,BIO_NOCLOSE);<br> BIO_puts(test,"abd\n\n");<br> BIO_freex(test);<br> DSO_free(d);<br> return 0;<br>}<br>本例动态加载libeay32动态库，获取BIO_new和BIO_free的地址并调用。<br>示例2：<br>#include &lt;openssl/dso.h&gt;<br>#include &lt;openssl/bio.h&gt;<br>int main()<br>{<br> DSO *d;<br> void (*f)();<br> BIO *(*BIO_newx)(BIO_METHOD *a);<br> BIO *test;<br> char *load_name;<br> const char *loaded_name;<br> int flags;<br> <br> d=DSO_new();<br>#if 0<br> DSO_set_name_converter<br> DSO_ctrl(d,DSO_CTRL_SET_FLAGS,DSO_FLAG_NO_NAME_TRANSLATION,NULL);<br> DSO_ctrl(d,DSO_CTRL_SET_FLAGS,DSO_FLAG_NAME_TRANSLATION_EXT_ON<wbr>LY,NULL);<br> DSO_ctrl(d,DSO_CTRL_SET_FLAGS,DSO_FLAG_GLOBAL_SYMBOLS,NULL);<br> /* 最好写成libeay32而不是libeay32.dll， 除非前面调用了DSO_ctrl(d,DSO_CTRL_SET_FLAGS,DSO_FLAG_NO_NAME_TRANSLATION,NULL)否则它会加载libeay32.dll.dll<br> */<br> load_name=DSO_merge(d,"libeay32","D:\\zcp\\OpenSSL\\openssl-0.9.8b\\out32dll\\Debug");<br>#endif<br> d=DSO_load(d,"libeay32",NULL,0);<br> <br> {<br> printf("err");<br> return -1;<br> }<br> loaded_name=DSO_get_loaded_filename(d);<br> <br> {<br> printf("loaded file is %s\n",loaded_name);<br><br> }<br> flags=DSO_flags(d);<br> printf("current falgs is %d\n",flags);<br> DSO_up_ref(d);<br> f=(void (*)())DSO_bind_var(d,"BIO_new");<br> BIO_newx=(BIO *(*)(BIO_METHOD *))f;<br> test=BIO_newx(BIO_s_file());<br> BIO_set_fp(test,stdout,BIO_NOCLOSE);<br> BIO_puts(test,"abd\n\n");<br> BIO_free(test);<br> DSO_free(d);<br> printf("handle in dso number is : %d\n",d-&gt;meth_da<wbr>ta-&gt;num);<br> DSO_free(d);<br> printf("handle in dso number is : %d\n",d-&gt;meth_da<wbr>ta-&gt;num);<br> return 0;<br>}<br>本例主要演示了DSO的控制函数。
</body></html>