<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：ATL Under the Hood 2</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>ATL Under the Hood 2</h2>
<p align="right">发布时间：2011-11-28 14:21
<br>分类名称：ATL</p><br>
<p style="background: white;"  ><span style="font-family:Verdana;"  ><span style="color:#ff9900; font-size:13pt;"  ><strong>Introduction<br></strong></span><span style="font-size:10pt;"  >In this series of tutorials I am going to discuss some of the inner workings of ATL and the techniques that ATL uses. This is the second article in the series.<br>Let's explore some more interesting stuff behind the virtual function. To make things consistent I am going to take the same number sequence and start my discussion with Program 20. <br>Let's take a look at the following Program <br></span><span style="color:#ff9900;"  ><strong>Program 20<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> fun() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Base::fun"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >void</span> show() {<br>        fun();<br>    }<br>};<br><br><span style="color:blue;"  >class</span> Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> fun() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Drive::fun"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    Drive d;<br>    d.show();<br><br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >The output of the program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >Drive::fun<br></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  >This program clearly shows how the base class's function calls the drive class function if that function is virtual. This technique is used in different frameworks like MFC and design pattern like Template Design Pattern. Now change program little bit to see its behavior. Now I m going to call virtual function from constructor of Base class rather than member function. <br></span><span style="color:#ff9900;"  ><strong>Program 21<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    Base() {<br>        fun();<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> fun() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Base::fun"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>};<br><br><span style="color:blue;"  >class</span> Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> fun() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Drive::fun"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    Drive d;<br><br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >The output of this program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >Base::fun<br></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  ><strong>This program shows that we can't call a virtual function of a derived class from constructor of a base class.</strong> Ok to see what is going on under the hood let's print the value of this pointer in both constructors. To make things simple remove other functions from the classes. <br></span><span style="color:#ff9900;"  ><strong>Program 22<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    Base() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Base"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"This Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br><span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Base::f"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >class</span> Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    Drive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Drive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"This Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br><span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Drive::f"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    Drive d;<br>    cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Main"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    cout <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)&amp;d <span style="color:blue;"  >&lt;&lt;</span> endl;<br><br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >The output of the program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >In Base<br>This Pointer = 0012FF7C<br><br>In Drive<br>This Pointer = 0012FF7C<br><br>In Main<br>0012FF7C<br></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  >This shows that there is only one object in the memory location. Now let's print the value at this pointer, i.e. value of vptr and address of VTable. <br></span><span style="color:#ff9900;"  ><strong>Program 23<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    Base() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Base"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Base::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >class</span> Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    Drive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Drive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Drive::f2"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    Drive d;<br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >The output of this program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >In Base<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C08C<br>Value at Vtable = 004010F0<br><br>In Drive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C07C<br>Value at Vtable = <span style="color:navy;"  >00401217</span><br></span><span style="font-family:Verdana; font-size:10pt;"  >This program shows the different vtable address in Base class and Drive class. To get more better understanding lets make inheritance deeper and add one more class </span><span style="color:#990000; font-family:Courier New;"  >MostDrive</span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  > inherited from Drive and make an object of it. <br></span><span style="color:#ff9900;"  ><strong>Program 24<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    Base() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Base"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Base::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >class</span> Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    Drive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Drive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Drive::f2"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >class</span> MostDrive : <span style="color:blue;"  >public</span> Drive {<br><span style="color:blue;"  >public</span>:<br>    MostDrive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In MostDrive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f2"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    MostDrive d;<br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >The output of this program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >In Base<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0A0<br>Value at Vtable = 004010F5<br><br>In Drive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C090<br>Value at Vtable = <span style="color:navy;"  >00401221</span><br><br>In MostDrive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C080<br>Value at Vtable = <span style="color:navy;"  >00401186</span><br></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  >This program shows that virtual pointer in initialized in the constructor of each class. Therefore the address of Vtable is different in each class constructor and main use the vtable of most drive class in inheritance chain whose object is created. <br>Now see what each class constructor place in vtable. To do this take pointer to function and store value of first entry of vtable in that function pointer and try to execute it. <br></span><span style="color:#ff9900;"  ><strong>Program 25<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >typedef</span>       <span style="color:blue;"  >void</span>(*Fun)();</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br><span style="color:blue;"  >public</span>:<br>    Base() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Base"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br><br>        Fun pFun = (Fun)*(<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>;<br>        pFun();<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Base::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >class</span> Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    Drive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Drive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    <br>        Fun pFun = (Fun)*(<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>;<br>        pFun();<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Drive::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >class</span> MostDrive : <span style="color:blue;"  >public</span> Drive {<br><span style="color:blue;"  >public</span>:<br>    MostDrive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In MostDrive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    <br>        Fun pFun = (Fun)*(<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>;<br>        pFun();<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    MostDrive d;<br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >The output of this program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >In Base<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C098<br>Value at Vtable = 004010F5<br>Base::f1<br><br>In Drive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C088<br>Value at Vtable = <span style="color:navy;"  >00401221</span><br>Drive::f1<br><br>In MostDrive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C078<br>Value at Vtable = <span style="color:navy;"  >00401186</span><br>MostDrive::f1<br></span><span style="font-family:Verdana; font-size:10pt;"  >This program shows that constructor of each class fills the vtable entries with their own virtual function. So </span><span style="color:#990000; font-family:Courier New;"  >Base</span><span style="font-family:Verdana; font-size:10pt;"  > class fills the vtable with the address of the </span><span style="color:#990000; font-family:Courier New;"  >Base</span><span style="font-family:Verdana; font-size:10pt;"  >'s virtual functions and when </span><span style="color:#990000; font-family:Courier New;"  >Drive</span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  > class's constructor executes it will create another vtable and store the virtual functions address. <br>Now see the situation when there is more than one virtual function in the base class and drive class override not all of these. <br></span><span style="color:#ff9900;"  ><strong>Program 26<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    Base() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Base"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 3rd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+2) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Base::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Base::f2"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >class</span> Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    Drive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Drive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 3rd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+2) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Drive::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    Drive d;<br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >The output of this program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >In Base<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0E0<br>Value at Vtable 1st entry = 004010F0<br>Value at Vtable 2nd entry = <span style="color:navy;"  >00401145</span><br>Value at Vtable 3rd entry = <span style="color:navy;"  >00000000</span><br><br>In Drive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0C8<br>Value at Vtable 1st entry = 0040121C<br>Value at Vtable 2nd entry = <span style="color:navy;"  >00401145</span><br>Value at Vtable 3rd entry = <span style="color:navy;"  >00000000</span><br></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  >The output of this program shows that the base class's virtual function is not overridden in drive class then drive class constructor doesn't do anything with that entry in virtual function. <br>Now invite pure virtual function in this game too and see the behavior of it. Take a look at the following program <br></span><span style="color:#ff9900;"  ><strong>Program 27<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    Base() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Base"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() = <span style="color:navy;"  >0</span>;<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() = <span style="color:navy;"  >0</span>;<br>};<br><br><span style="color:blue;"  >class</span> Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    Drive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Drive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Drive::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Drive::f2"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    Drive d;<br><br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >The output of this program is little bit different in debug and release mode. Here is the output of the debug mode <br></span><span style="font-family:Courier New; font-size:9pt;"  >In Base<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0BC<br>Value at Vtable 1st entry = 00420CB0<br>Value at Vtable 2nd entry = 00420CB0<br><br>In Drive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0A4<br>Value at Vtable 1st entry = <span style="color:navy;"  >00401212</span><br>Value at Vtable 2nd entry = 0040128F<br></span><span style="font-family:Verdana; font-size:10pt;"  >And here is the output in the release Mode <br></span><span style="font-family:Courier New; font-size:9pt;"  >In Base<br>Virtual Pointer = 0012FF80<br>Address of Vtable = 0042115C<br>Value at Vtable 1st entry = 0041245D<br>Value at Vtable 2nd entry = 0041245D<br><br>In Drive<br>Virtual Pointer = 0012FF80<br>Address of Vtable = <span style="color:navy;"  >00421154</span><br>Value at Vtable 1st entry = <span style="color:navy;"  >00401310</span><br>Value at Vtable 2nd entry = <span style="color:navy;"  >00401380</span><br></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  >To better understand change a program little bit and try to call virtual function from function pointer. <br></span><span style="color:#ff9900;"  ><strong>Program 28<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >typedef</span>       <span style="color:blue;"  >void</span>(*Fun)();</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br><span style="color:blue;"  >public</span>:<br>    Base() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Base"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    <br>    <span style="color:green;"  ><em>// try to execute first virtual function<br></em></span>        Fun pFun = (Fun)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0);<br>        pFun();<br><br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() = <span style="color:navy;"  >0</span>;<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() = <span style="color:navy;"  >0</span>;<br>};<br><br><span style="color:blue;"  >class</span> Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    Drive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Drive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Drive::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Drive::f2"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    Drive d;<br><br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >Now the behavior of program is different in debug and release Mode. In Debug mode it display run time error dialog box <br><img title="ATL Under the Hood 2 - Dsliu - Dspace"  src="pic/img1.ph.126.net_dQDZAq9iNbAA9MWuI3DDxg==_2758454771781541741.jpg"  alt=""  ><br>And when you press Ignore button then it display one more dialog <br><img title="ATL Under the Hood 2 - Dsliu - Dspace"  src="pic/img5.ph.126.net_d5yHmwBv47AA8nkWlb-RUw==_2738470048435084125.jpg"  alt=""  ><br>And in release mode it just displays the error message in the output console window. <br></span><span style="font-family:Courier New; font-size:9pt;"  >In Base<br>Virtual Pointer = 0012FF80<br>Address of Vtable = 0042115C<br>Value at Vtable 1st entry = 0041245D<br>Value at Vtable 2nd entry = 0041245D<br><br>runtime error R6025<br>- pure <span style="color:blue;"  >virtual</span> function call<br></span><span style="font-family:Verdana; font-size:10pt;"  >Here what is R6025? It is defined in CMSGS.H file which define all error messages used within the C run time library. <br></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#define</span> _RT_PUREVIRT_TXT   <span style="color:purple;"  >"R6025"</span> EOL <span style="color:purple;"  >"- pure virtual function call"</span> EOL<br></span><span style="font-family:Verdana; font-size:10pt;"  >In fact when we define pure virtual function then compiler place the address of one of the C Runtime library function </span><span style="color:#990000; font-family:Courier New;"  >_purecall</span><span style="font-family:Verdana; font-size:10pt;"  >. This function is define in PUREVIRT.C and have the following prototype. <br></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:blue;"  >void</span>    <span style="color:blue;"  >__cdecl</span> _purecall(<span style="color:blue;"  >void</span>)<br></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  >We can achieve the same behavior by directly calling this function from our program. Let's take a look at this very small program. <br></span><span style="color:#ff9900;"  ><strong>Program 29<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:blue;"  >int</span> main() {<br>    _purecall();    <br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  >The out put of this program is same as previous one in both debug and release mode. To better understand this make the inheritance chain deeper and drive one more class from Drive and see the behavior of this. <br></span><span style="color:#ff9900;"  ><strong>Program 30<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    Base() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Base"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() = <span style="color:navy;"  >0</span>;<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() = <span style="color:navy;"  >0</span>;<br>};<br><br><span style="color:blue;"  >class</span> Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    Drive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Drive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>};<br><br><span style="color:blue;"  >class</span> MostDrive : <span style="color:blue;"  >public</span> Drive {<br><span style="color:blue;"  >public</span>:<br>    MostDrive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In MostDrive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f2"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    MostDrive d;<br><br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >The output of this program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >In Base<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0D8<br>Value at Vtable 1st entry = 00420F40<br>Value at Vtable 2nd entry = 00420F40<br><br>In Drive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0C0<br>Value at Vtable 1st entry = 00420F40<br>Value at Vtable 2nd entry = 00420F40<br><br>In MostDrive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0A8<br>Value at Vtable 1st entry = <span style="color:navy;"  >00401186</span><br>Value at Vtable 2nd entry = 004010F5<br></span><span style="font-family:Verdana; font-size:10pt;"  >This program shows that both Base and Drive class make their own virtual table and initialized it with the same value. Now what happen if the inheritance is further deep and none of the class except the most drive overrides any pure virtual function? This happens in the case of COM programming where interfaces are class with only pure virtual function and one interface is inherited from another interface and only implementation class override the pure virtual function of interfaces. Then each base class constructor makes their own vtable and put the same value in its entry. So it means duplication of same code again and again. <br>The main philosophy of ATL is to make COM component as small as possible, but due to this behavior interface class's constructor have lot of unnecessary code. To solve this problem ATL introduce a macro </span><span style="color:#990000; font-family:Courier New;"  >ATL_NO_VTABLE</span><span style="font-family:Verdana; font-size:10pt;"  > define in ATLDEF.H file as <br></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#define</span> ATL_NO_VTABLE <span style="color:blue;"  >__declspec</span>(<span style="color:blue;"  >novtable</span>)<br></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  >__declspec(novtable) is Microsoft C++ specific extended attribute of class. When it is used then compiler won't generate the code to initialize the vptr and vtable and reduce the generated code size. <br>Change our program little bit to better understand this what this attribute can do for us. <br></span><span style="color:#ff9900;"  ><strong>Program 31<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    Base() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Base"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() = <span style="color:navy;"  >0</span>;<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() = <span style="color:navy;"  >0</span>;<br>};<br><br><span style="color:blue;"  >class</span> Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    Drive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Drive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>};<br><br><span style="color:blue;"  >class</span>    <span style="color:blue;"  >__declspec</span>(<span style="color:blue;"  >novtable</span>) MostDrive : <span style="color:blue;"  >public</span> Drive {<br><span style="color:blue;"  >public</span>:<br>    MostDrive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In MostDrive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f2"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    MostDrive d;<br><br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >The output of this program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >In Base<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0CC<br>Value at Vtable 1st entry = 00420E60<br>Value at Vtable 2nd entry = 00420E60<br><br>In Drive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0B4<br>Value at Vtable 1st entry = 00420E60<br>Value at Vtable 2nd entry = 00420E60<br><br>In MostDrive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0B4<br>Value at Vtable 1st entry = 00420E60<br>Value at Vtable 2nd entry = 00420E60<br></span><span style="font-family:Verdana; font-size:10pt;"  >This program shows one more result i.e </span><span style="color:#990000; font-family:Courier New;"  >Drive</span><span style="font-family:Verdana; font-size:10pt;"  > and </span><span style="color:#990000; font-family:Courier New;"  >MostDrive</span><span style="font-family:Verdana; font-size:10pt;"  > class have the same value in its vptr, but Base class have different. In fact this is due to that we haven't use </span><span style="color:blue;"  ><span style="font-family:Courier New;"  >__declspec<span style="color:#990000;"  >(<span style="color:blue;"  >novtable<span style="color:#990000;"  >) </span></span></span></span><span style="font-family:Verdana; font-size:10pt;"  >attribute with Base class. Now change program little bit and inherit Drive class with the same attributes i.e. </span><span style="font-family:Courier New;"  >__declspec<span style="color:#990000;"  >(<span style="color:blue;"  >novtable<span style="color:#990000;"  >)</span></span></span></span><span style="font-family:Verdana; font-size:10pt;"  >    </span></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  ><br></span><span style="color:#ff9900;"  ><strong>Program 32<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    Base() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Base"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() = <span style="color:navy;"  >0</span>;<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() = <span style="color:navy;"  >0</span>;<br>};<br><br><span style="color:blue;"  >class</span>    <span style="color:blue;"  >__declspec</span>(<span style="color:blue;"  >novtable</span>) Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    Drive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Drive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>};<br><br><span style="color:blue;"  >class</span>    <span style="color:blue;"  >__declspec</span>(<span style="color:blue;"  >novtable</span>) MostDrive : <span style="color:blue;"  >public</span> Drive {<br><span style="color:blue;"  >public</span>:<br>    MostDrive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In MostDrive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f2"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    MostDrive d;<br><br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >Now the output of the program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >In Base<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0C0<br>Value at Vtable 1st entry = 00420E50<br>Value at Vtable 2nd entry = 00420E50<br><br>In Drive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0C0<br>Value at Vtable 1st entry = 00420E50<br>Value at Vtable 2nd entry = 00420E50<br><br>In MostDrive<br>Virtual Pointer = 0012FF7C<br>Address of Vtable = 0046C0C0<br>Value at Vtable 1st entry = 00420E50<br>Value at Vtable 2nd entry = 00420E50<br></span><span style="font-family:Verdana; font-size:10pt;"  >In MSDN it is written about </span><span style="color:blue;"  ><span style="font-family:Courier New;"  >__declspec<span style="color:#990000;"  >(<span style="color:blue;"  >novtable<span style="color:#990000;"  >)</span></span></span></span><span style="font-family:Verdana; font-size:10pt;"  > that it should be applied to pure virtual classes. Let's do one more experiment to understand meaning of this better. </span></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  ><br></span><span style="color:#ff9900;"  ><strong>Program 33<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    Base() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Base"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() = <span style="color:navy;"  >0</span>;<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() = <span style="color:navy;"  >0</span>;<br>};<br><br><span style="color:blue;"  >class</span>    <span style="color:blue;"  >__declspec</span>(<span style="color:blue;"  >novtable</span>) Drive : <span style="color:blue;"  >public</span> Base {<br><span style="color:blue;"  >public</span>:<br>    Drive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In Drive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br>    }<br>};<br><br><span style="color:blue;"  >class</span>    <span style="color:blue;"  >__declspec</span>(<span style="color:blue;"  >novtable</span>) MostDrive : <span style="color:blue;"  >public</span> Drive {<br><span style="color:blue;"  >public</span>:<br>    MostDrive() {<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"In MostDrive"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Virtual Pointer = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Address of Vtable = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)<span style="color:blue;"  >this</span>    <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 1st entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"Value at Vtable 2nd entry = "</span>    <span style="color:blue;"  >&lt;&lt;</span> (<span style="color:blue;"  >int</span>*)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+1) <span style="color:blue;"  >&lt;&lt;</span> endl;<br>        cout <span style="color:blue;"  >&lt;&lt;</span> endl;<br><br>    <span style="color:green;"  ><em>// try call first virtual function<br></em></span>    <span style="color:blue;"  >typedef</span>    <span style="color:blue;"  >void</span> (*Fun)();<br>        Fun pFun = (Fun)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0);<br>        pFun();<br><br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f2"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    MostDrive d;<br><br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >Here the new thing we add in this program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >    <span style="color:green;"  ><em>// try call first virtual function<br></em></span>    <span style="color:blue;"  >typedef</span>    <span style="color:blue;"  >void</span> (*Fun)();<br>        Fun pFun = (Fun)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0);<br>        pFun();<br></span><span style="font-family:Verdana; font-size:10pt;"  >And when we run the application we face the same problem as previous i.e. try to call pure virtual function. It means the virtual table haven't initialized yet. </span><span style="color:#990000; font-family:Courier New;"  >MostDrive</span><span style="font-family:Verdana; font-size:10pt;"  > class is not an abstract class so we should remove </span><span style="color:blue;"  ><span style="font-family:Courier New;"  >__declspec<span style="color:#990000;"  >(<span style="color:blue;"  >novtable<span style="color:#990000;"  >)</span></span></span></span><span style="font-family:Verdana; font-size:10pt;"  > from this class. </span></span><span style="font-family:Verdana;"  ><span style="font-size:10pt;"  ><br></span><span style="color:#ff9900;"  ><strong>Program 34<br></strong></span></span><span style="font-family:Courier New; font-size:9pt;"  ><span style="color:navy;"  >#include <span style="color:blue;"  >&lt;<span style="color:maroon;"  >iostream<span style="color:blue;"  >&gt;<span style="color:navy;"  ><br><span style="color:blue;"  >using</span>         <span style="color:blue;"  >namespace</span> std;</span><br></span><br><span style="color:blue;"  >class</span> Base {</span><br>public</span>:</span><br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() = <span style="color:navy;"  >0</span>;<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() = <span style="color:navy;"  >0</span>;<br>};<br><br><span style="color:blue;"  >class</span>    <span style="color:blue;"  >__declspec</span>(<span style="color:blue;"  >novtable</span>) Drive : <span style="color:blue;"  >public</span> Base {<br>};<br><br><span style="color:blue;"  >class</span> MostDrive : <span style="color:blue;"  >public</span> Drive {<br><span style="color:blue;"  >public</span>:<br>    MostDrive() {<br><br>    <span style="color:green;"  ><em>// try call first virtual function<br></em></span>    <span style="color:blue;"  >typedef</span>    <span style="color:blue;"  >void</span> (*Fun)();<br>        Fun pFun = (Fun)*((<span style="color:blue;"  >int</span>*)*(<span style="color:blue;"  >int</span>*)this+0);<br>        pFun();<br><br>    }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f1() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f1"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>    <span style="color:blue;"  >virtual</span>    <span style="color:blue;"  >void</span> f2() { cout <span style="color:blue;"  >&lt;&lt;</span>    <span style="color:purple;"  >"MostDrive::f2"</span>    <span style="color:blue;"  >&lt;&lt;</span> endl; }<br>};<br><br><span style="color:blue;"  >int</span> main() {<br>    MostDrive d;<br><br>    <span style="color:blue;"  >return</span>    <span style="color:navy;"  >0</span>;<br>}<br></span><span style="font-family:Verdana; font-size:10pt;"  >Now this programs work fine and output of this program is <br></span><span style="font-family:Courier New; font-size:9pt;"  >MostDrive::f1<br></span><span style="font-family:Verdana; font-size:10pt;"  >It is not necessary to use this attribute in ATL class only; it can be used with any class whose object can not be created. In the same way it is not necessary to must use this with ATL class, this can be omitted from ATL class, but removing this from ATL class can generate more code. <br>Hope to explore some other mysterious of ATL in next article.&nbsp;</span><span style="font-family:宋体; font-size:8pt;"  ></span>  </p>
</body></html>