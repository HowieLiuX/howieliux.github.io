<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：Firefox Application Directory Lockdown</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>Firefox Application Directory Lockdown</h2>
<p align="right">发布时间：2011-3-30 10:31
<br>分类名称：Plugins</p><br>
<span style="color: rgb(68, 68, 68); font-family: 'Lucida Grande', Verdana, Arial, sans-serif; font-size: 12px; line-height: 18px;"  ><p style="margin-top: 13px; margin-right: 0px; margin-bottom: 13px; margin-left: 0px;"  >Starting with Firefox 3.6, only well-known components shipped with Firefox will be loaded from the application components directory.&nbsp; Any other components (both binary and script) will be ignored.&nbsp; This work might also be backported to the 3.5 branch, but that decision has not been made yet.&nbsp; There are a number of reasons why this decision was made.</p><p style="margin-top: 13px; margin-right: 0px; margin-bottom: 13px; margin-left: 0px;"  >Firefox, through Gecko, has always had a flexible&nbsp;<a style="color: rgb(0, 136, 238); text-decoration: underline;" rel="nofollow" href="https://developer.mozilla.org/en/XPCOM"  >component-based architecture</a>.&nbsp; In particular,&nbsp;<a style="color: rgb(0, 136, 238); text-decoration: underline;" rel="nofollow" href="https://developer.mozilla.org/en/Creating_XPCOM_Components/Component_Internals#Creating_Components_in_Cpp"  >creating binary components</a>&nbsp;to interface with the OS or with other applications is fairly straightforward, though ultimately dangerous.&nbsp; Binary components have full access to the application and OS, and so can impact stability, security, and performance.&nbsp; What’s worse, in a binary component, the line between supported/frozen and completely unfrozen internal Gecko interfaces is blurred, making it easy to create a binary component that works well against one very specific version of Firefox (potentially as specific as a minor security release), but causes serious problems with any other version.</p><p style="margin-top: 13px; margin-right: 0px; margin-bottom: 13px; margin-left: 0px;"  >As we’ve seen the popularity of Firefox increase, more and more binary components have been written to interface between Firefox and other applications.&nbsp; However, we haven’t provided great guidance about the appropriate way to do so.</p><p style="margin-top: 13px; margin-right: 0px; margin-bottom: 13px; margin-left: 0px;"  ><em>The only supported way of adding functionality to Firefox (whether a binary component is required or not) is<a style="color: rgb(0, 136, 238); text-decoration: underline;" rel="nofollow" href="https://addons.mozilla.org/en-US/developers"  >through an add-on</a>.&nbsp;</em>This has many advantages for users: they can see that additional functionality is installed in the Add-ons Manager, and from there they can easily enable or disable it, as well as check for and receive updates.&nbsp; We’re working on improving the&nbsp;<a style="color: rgb(0, 136, 238); text-decoration: underline;" rel="nofollow" href="http://www.oxymoronical.com/blog/2009/08/Notifying-users-about-third-party-add-ons"  >user experience</a>&nbsp;when third-party addons are installed in system-wide locations.&nbsp; Also, critically, add-ons include information indicating their compatibility with specific versions of Firefox.&nbsp; Having this version information allows for safe upgrades, especially when binary components are present.</p><p style="margin-top: 13px; margin-right: 0px; margin-bottom: 13px; margin-left: 0px;"  >Currently, third-party applications can drop binary components into the Firefox application’s components directory and expect them to be loaded as part of our normal startup.&nbsp; This causes a number of problems, not the least of which is the removal of the user control that add-ons provide.&nbsp; Unfortunately, a number of third-party applications are using this approach to integration, and are currently causing Firefox 3.5 users stability problems.&nbsp; Many of these components were written for Firefox 3.0, and have not been updated for Firefox 3.5; a situation that we have no way of detecting because of the lack of versioning information on these “bare” components.&nbsp; Because a number of internal interfaces changed between the two versions, this leads to crashes or other problems when these components are used.</p><p style="margin-top: 13px; margin-right: 0px; margin-bottom: 13px; margin-left: 0px;"  >In order to simplify future integration with native code, Firefox 3.6 will include support for&nbsp;<a style="color: rgb(0, 136, 238); text-decoration: underline;" rel="nofollow" href="https://developer.mozilla.org/en/JavaScript_code_modules/ctypes.jsm"  >JSCtypes</a>&nbsp;for add-on developers.&nbsp; This approach is greatly preferred over writing binary components.&nbsp; For example, a third-party component that would like to perform some action implemented in native code when an event is received can write the integration pieces in Javascript (capturing the event and so on), and use JSCtypes to make function calls to regular non-XPCOM component native code.&nbsp; Keeping as much of add-on code in Javascript reduces the impact of internal changes to Firefox, and allows for much easier maintainability.</p><p style="margin-top: 13px; margin-right: 0px; margin-bottom: 13px; margin-left: 0px;"  >(If you are a third-party application developer and have questions about integration in Firefox, please contact me — I’d be happy to put you in touch with the right people who can answer questions and provide guidance.)</p></span><wbr>
</body></html>