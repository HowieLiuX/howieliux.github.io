<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转] (4) OpenSSL 之哈希表</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转] (4) OpenSSL 之哈希表</h2>
<p align="right">发布时间：2010-4-4 12:22
<br>分类名称：OpenSSL</p><br>
<div><b>哈希表</b></div><div>在一般的数据结构如线性表和树中，记录在结构中的相对位置是与记录的关键字之间不存在确定的关系，在结构中查找记录时需进行一系列的关键字比较。这一类查找方法建立在“比较”的基础上，查找的效率与比较次数密切相关。理想的情况是能直接找到需要的记录，因此必须在记录的存储位置和它的关键字之间建立确定的对应关系，使每个关键字和结构中一个唯一的存储位置相对应。在查找时，只需根据这个对应关系找到给定值。这种对应关系既是哈希函数，按这个思想建立的表为哈希表。</div><div><br></div><div>哈希表存在冲突现象：不同的关键字可能得到同一哈希地址。在建造哈希表时不仅要设定一个好的哈希函数，而且要设定一种处理冲突的方法。</div><div><br></div><div><b>哈希表数据结构</b></div><div>openssl函数使用哈希表来加快查询操作，并能存放任意形式的数据，比如配置文件的读取、内存分配中被分配内存的信息等。其源码在crypto/lhash目录下。</div><div>openssl中的哈希表数据结构在lhash.h中定义如下：</div><div>typedef struct lhash_node_st</div><div>{</div><div><span style="white-space:pre;"> </span>void *da<wbr>ta;</div><div><span style="white-space:pre;"> </span>struct lhash_node_st *next;</div><div>#ifndef OPENSSL_NO_HASH_COMP</div><div><span style="white-space:pre;"> </span>unsigned long hash;</div><div>#endif</div><div>} LHASH_NODE;</div><div>本结构是一个单链表。其中，da<wbr>ta用于存放数据地址，next为下一个数据地址，hash为数据哈希计算值。</div><div><br></div><div>typedef struct lhash_st</div><div>{</div><div><span style="white-space:pre;"> </span>LHASH_NODE **b;</div><div><span style="white-space:pre;"> </span>LHASH_COMP_FN_TYPE comp;</div><div><span style="white-space:pre;"> </span>LHASH_HASH_FN_TYPE hash;</div><div><span style="white-space:pre;"> </span>unsigned int num_nodes;</div><div><span style="white-space:pre;"> </span>unsigned int num_alloc_nodes;</div><div><span style="white-space:pre;"> </span>unsigned int p;</div><div><span style="white-space:pre;"> </span>unsigned int pmax;</div><div><span style="white-space:pre;"> </span>unsigned long up_load; /* load times 256 */</div><div><span style="white-space:pre;"> </span>unsigned long down_load; /* load times 256 */</div><div><span style="white-space:pre;"> </span>unsigned long num_items;</div><div><span style="white-space:pre;"> </span>unsigned long num_expands;</div><div><span style="white-space:pre;"> </span>unsigned long num_expand_reallocs;</div><div><span style="white-space:pre;"> </span>unsigned long num_contracts;</div><div><span style="white-space:pre;"> </span>unsigned long num_contract_reallocs;</div><div><span style="white-space:pre;"> </span>unsigned long num_hash_calls;</div><div><span style="white-space:pre;"> </span>unsigned long num_comp_calls;</div><div><span style="white-space:pre;"> </span>unsigned long num_insert;</div><div><span style="white-space:pre;"> </span>unsigned long num_replace;</div><div><span style="white-space:pre;"> </span>unsigned long num_delete;</div><div><span style="white-space:pre;"> </span>unsigned long num_no_delete;</div><div><span style="white-space:pre;"> </span>unsigned long num_retrieve;</div><div><span style="white-space:pre;"> </span>unsigned long num_retrieve_miss;</div><div><span style="white-space:pre;"> </span>unsigned long num_hash_comps;</div><div><span style="white-space:pre;"> </span>int error;</div><div>} LHASH;</div><div>其中，b指针数组用于存放所有的数据，数组中的每一个值为数据链表的头指针；comp用于存放数据比较函数地址；hash用于存放计算哈希值函数的地址；num_nodes为链表个数；num_alloc_nodes为b分配空间的大小。</div><div>基本的结构如下示图：</div><div><br></div><div><a href="pic/img845.ph.126.net_H8mVtcsZ2fmCiORmn54wIQ==_2994893752203197719.png" target="_blank"><img title="(4) OpenSSL 之哈希表 - Dsliu - Dspace" alt="(4) OpenSSL 之哈希表 - Dsliu - Dspace" src="pic/img845.ph.126.net_H8mVtcsZ2fmCiORmn54wIQ==_2994893752203197719.png"></a></div><div><br></div><div><div><b>函数说明</b></div><div>1)<span style="white-space:pre;"> </span>LHASH *lh_new(LHASH_HASH_FN_TYPE h, LHASH_COMP_FN_TYPE c)</div><div>功能：生成哈希表</div><div>源文件：lhash.c</div><div>说明：输入参数h为哈希函数，c为比较函数。这两个函数都是回调函数。 因为哈希表用于存放任意的数据结构，哈希表存放、查询、删除等操作都需要比较数据和进行哈希运算，而哈希表不知道用户数据如何进行比较，也不知道用户数据结构中需要对哪些关键项进行散列运算。所以，用户必须提供这两个回调函数。</div><div><br></div><div>2)<span style="white-space:pre;"> </span>void *lh_delete(LHASH *lh, const void *da<wbr>ta)</div><div>源文件：lhash.c</div><div>功能：删除散列表中的一个数据</div><div>说明：da<wbr>ta为数据结构指针。</div><div><br></div><div>3)<span style="white-space:pre;"> </span>void lh_doall(LHASH *lh, LHASH_DOALL_FN_TYPE func)</div><div>源文件：lhash.c</div><div>功能：处理哈希表中的所有数据</div><div>说明：func为外部提供的回调函数，本函数遍历所有存储在哈希表中的数据，每个数据被func处理。</div><div><br></div><div>4)<span style="white-space:pre;"> </span>void lh_doall_arg(LHASH *lh, LHASH_DOALL_ARG_FN_TYPE func, void *arg)</div><div>源文件：lhash.c</div><div>功能：处理哈希表中所有数据</div><div>说明：此参数类似于lh_doall 函数，func为外部提供的回调函数，arg为传递给func函数的参数。本函数遍历所有存储在哈希表中的数据，每个数据被func处理。</div><div><br></div><div>5)<span style="white-space:pre;"> </span>void lh_free(LHASH *lh)</div><div>源文件：lhash.c</div><div>功能：释放哈希表。</div><div><br></div><div>6）<span style="white-space:pre;"> </span>void *lh_insert(LHASH *lh, void *da<wbr>ta)</div><div>源文件：lhash.c</div><div>功能：往哈希表中添加数据。</div><div>说明：da<wbr>ta为需要添加数据结构的指针地址。</div><div><br></div><div>7）<span style="white-space:pre;"> </span>void *lh_retrieve(LHASH *lh, const void *da<wbr>ta)</div><div>源文件：lhash.c</div><div>功能：查询数据。</div><div>说明：从哈希表中查询数据，da<wbr>ta为数据结构地址，此数据结构中必须提供关键项(这些关键项对应于用户提供的哈希函数和比较函数)以供查询，如果查询成功，返回数据结构的地址，否则返回NULL。比如SSL握手中服务端查询以前存储的SESSION时，它需要提供其中关键的几项：</div><div>SSL_SESSION *ret=NULL,da<wbr>ta;</div><div>da<wbr>ta.ssl_version=s-&gt;version;</div><div>da<wbr>ta.session_id_length=len;</div><div>memcpy(da<wbr>ta.session_id,session_id,len);</div><div>ret=(SSL_SESSION *)lh_retrieve(s-&gt;ctx-&gt;sessions,&amp;da<wbr>ta);</div><div><br></div><div>8）<span style="white-space:pre;"> </span>void lh_node_stats_bio(const LHASH *lh, BIO *out)</div><div>源文件：lh_stats.c</div><div>功能：将哈希表中每个链表下的数据状态输出到BIO中。</div><div><br></div><div>9）<span style="white-space:pre;"> </span>void lh_node_stats(const LHASH *lh, FILE *fp)</div><div>源文件：lh_stats.c</div><div>功能：将哈希表中每个链表下数据到个数输出到FILE中。</div><div>说明：此函数调用了lh_node_stats_bio函数。</div><div><br></div><div>10）void lh_node_usage_stats_bio(const LHASH *lh, BIO *out)</div><div>源文件：lh_stats.c</div><div>功能：将哈希表的使用状态输出到BIO中。</div><div><br></div><div>11）<span style="white-space:pre;"> </span>void lh_node_usage_stats(const LHASH *lh, FILE *fp)</div><div>源文件：lh_stats.c</div><div>功能：将哈希表的使用状态输出到FILE中</div><div>说明：此函数调用了lh_node_usage_stats_bio函数</div><div><br></div><div>12）unsigned long lh_num_items(const LHASH *lh)</div><div>源文件：lhash.c</div><div>功能：获取哈希表中元素的个数。</div><div><br></div><div>13）void lh_stats_bio(const LHASH *lh, BIO *out)</div><div>源文件：lh_stats.c</div><div>功能：输出哈希表统计信息到BIO中</div><div><br></div><div>14）void lh_stats(const LHASH *lh, FILE *fp)</div><div>源文件：lh_stats.c</div><div>功能：打印哈希表的统计信息，此函数调用了lh_stats_bio。</div><div><br></div><div>15）unsigned long lh_strhash(const char *c)</div><div>源文件：lhash.c</div></div><div><br></div><div><div>编程示例<span style="white-space:pre;"> </span></div><div>#include &lt;string.h&gt;</div><div>#include &lt;openssl/lhash.h&gt;</div><div><br></div><div>typedef<span style="white-space:pre;"> </span>struct<span style="white-space:pre;"> </span>Student_st</div><div>{</div><div><span style="white-space:pre;"> </span>char<span style="white-space:pre;"> </span>name[20];</div><div><span style="white-space:pre;"> </span>int<span style="white-space:pre;"> </span>age;</div><div><span style="white-space:pre;"> </span>char<span style="white-space:pre;"> </span>otherInfo[200];</div><div>}Student;</div><div>static int Student_cmp(const void *a, const void *b)</div><div>{</div><div><span style="white-space:pre;"> </span>char<span style="white-space:pre;"> </span>*namea=((Student *)a)-&gt;name;</div><div><span style="white-space:pre;"> </span>char<span style="white-space:pre;"> </span>*nameb=((Student *)b)-&gt;name;<span style="white-space:pre;"> </span></div><div><span style="white-space:pre;"> </span>return strcmp(namea,nameb);</div><div>}</div><div>/* 打印每个值*/</div><div>static void PrintValue(Student *a)</div><div>{</div><div><span style="white-space:pre;"> </span>printf("name :%s\n",a-&gt;name);</div><div><span style="white-space:pre;"> </span>printf("age<span style="white-space:pre;"> </span> :%d\n",a-&gt;age);</div><div><span style="white-space:pre;"> </span>printf("otherInfo : %s\n",a-&gt;otherInfo);</div><div>}</div><div>static void PrintValue_arg(Student *a,void *b)</div><div>{</div><div><span style="white-space:pre;"> </span>int<span style="white-space:pre;"> </span>flag=0;</div><div><br></div><div><span style="white-space:pre;"> </span>flag=*(int *)b;</div><div><span style="white-space:pre;"> </span>printf("用户输入参数为:%d\n",flag);</div><div><span style="white-space:pre;"> </span>printf("name :%s\n",a-&gt;name);</div><div><span style="white-space:pre;"> </span>printf("age<span style="white-space:pre;"> </span> :%d\n",a-&gt;age);</div><div><span style="white-space:pre;"> </span>printf("otherInfo : %s\n",a-&gt;otherInfo);</div><div>}</div><div>int<span style="white-space:pre;"> </span>main()</div><div>{</div><div><span style="white-space:pre;"> </span>int<span style="white-space:pre;"> </span>flag=11;</div><div><span style="white-space:pre;"> </span>LHASH<span style="white-space:pre;"> </span>*h;</div><div><span style="white-space:pre;"> </span>Student<span style="white-space:pre;"> </span>s1={"zcp",28,"hu bei"},</div><div><span style="white-space:pre;"> </span>s2={"forxy",28,"no info"},</div><div><span style="white-space:pre;"> </span>s3={"skp",24,"student"},</div><div><span style="white-space:pre;"> </span>s4={"zhao_zcp",28,"zcp's name"},</div><div><span style="white-space:pre;"> </span>*s5;</div><div><span style="white-space:pre;"> </span>void<span style="white-space:pre;"> </span>*da<wbr>ta;</div><div><br></div><div><span style="white-space:pre;"> </span>h=lh_new(NULL,Student_cmp);</div><div><span style="white-space:pre;"> </span></div><div><span style="white-space:pre;"> </span>{</div><div><span style="white-space:pre;"> </span>printf("err.\n");</div><div><span style="white-space:pre;"> </span>return -1;</div><div><span style="white-space:pre;"> </span>}</div><div><span style="white-space:pre;"> </span>da<wbr>ta=&amp;s1;</div><div><span style="white-space:pre;"> </span>lh_insert(h,da<wbr>ta);</div><div><span style="white-space:pre;"> </span>da<wbr>ta=&amp;s2;</div><div><span style="white-space:pre;"> </span>lh_insert(h,da<wbr>ta);</div><div><span style="white-space:pre;"> </span>da<wbr>ta=&amp;s3;</div><div><span style="white-space:pre;"> </span>lh_insert(h,da<wbr>ta);</div><div><span style="white-space:pre;"> </span>da<wbr>ta=&amp;s4;</div><div><span style="white-space:pre;"> </span>lh_insert(h,da<wbr>ta);</div><div><span style="white-space:pre;"> </span>/* 打印*/</div><div><span style="white-space:pre;"> </span>lh_doall(h,PrintValue);</div><div><span style="white-space:pre;"> </span>lh_doall_arg(h,PrintValue_arg,(void *)(&amp;flag));</div><div><span style="white-space:pre;"> </span>da<wbr>ta=lh_retrieve(h,(const void*)"skp");</div><div><span style="white-space:pre;"> </span></div><div><span style="white-space:pre;"> </span>{</div><div><span style="white-space:pre;"> </span>printf("can not look up skp!\n");</div><div><span style="white-space:pre;"> </span>lh_free(h);</div><div><span style="white-space:pre;"> </span>return -1;</div><div><span style="white-space:pre;"> </span>}</div><div><span style="white-space:pre;"> </span>s5=da<wbr>ta;</div><div><span style="white-space:pre;"> </span>printf("student name :<span style="white-space:pre;"> </span>%s\n",s5-&gt;name);</div><div><span style="white-space:pre;"> </span>printf("sutdent<span style="white-space:pre;"> </span>age &nbsp;:<span style="white-space:pre;"> </span>%d\n",s5-&gt;age);</div><div><span style="white-space:pre;"> </span>printf("student otherinfo :<span style="white-space:pre;"> </span>%s\n",s5-&gt;otherInfo);</div><div><span style="white-space:pre;"> </span>lh_free(h);</div><div><span style="white-space:pre;"> </span>getchar();</div><div><span style="white-space:pre;"> </span>return 0;</div><div>}</div></div>
</body></html>