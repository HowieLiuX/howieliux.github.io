<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：EFS</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>EFS</h2>
<p align="right">发布时间：2012-11-2 10:37
<br>分类名称：PKI</p><br>
<p style="background: #f8fcff;"  ><span style="color:black; font-family:微软雅黑; font-size:12pt;"  ><strong>Operation<span style="color:#444444;"  >     </span></strong></span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >EFS works by encrypting a file with a bulk symmetric key, also known as the File Encryption Key, or FEK. It uses a symmetric encryption algorithm because it takes a relatively smaller amount of time to encrypt and decrypt large amounts of data than if an asymmetric key cipher is used. The symmetric encryption algorithm used will vary depending on the version and configuration of the operating system; see #Algorithms Used by Operating System Version below. The FEK (the symmetric key that is used to encrypt the file) is then encrypted with a public key that is associated with the user who encrypted the file, and this encrypted FEK is stored in the $EFS alternate data stream of the encrypted file. To decrypt the file, the EFS component driver uses the private key that matches the EFS digital certificate (used to encrypt the file) to decrypt the symmetric key that is stored in the $EFS stream. The EFS component driver then uses the symmetric key to decrypt the file. Because the encryption &amp; decryption operations are performed at a layer below NTFS, it is transparent to the user and all their applications. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >Folders whose contents are to be encrypted by the file system are marked with an encryption attribute. The EFS component driver treats this encryption attribute in a way that is analogous to the inheritance of file permissions in NTFS: if a folder is marked for encryption, then by default all files and subfolders that are created under the folder are also encrypted. When encrypted files are moved within an NTFS volume, the files remain encrypted. However, there are a number of occasions in which the file could be decrypted without the user explicitly asking Windows to do so. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >Files and folders are decrypted before being copied to a volume formatted with another file system, like FAT32. Finally, when encrypted files are copied over the network using the SMB/CIFS protocol, the files are decrypted before they are sent over the network. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >The most significant way of preventing the decryption-on-copy is using backup applications that are aware of the "Raw" APIs. Backup applications that have implemented these Raw APIs will simply copy the encrypted file stream and the $EFS alternate data stream as a single file. In other words, the files are "copied" (e.g. into the backup file) in encrypted form, and are not decrypted during backup. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >Starting with Windows Vista, a user's private key can be stored on a smart card; Data Recovery Agent (DRA) keys can also be stored on a smart card.[1] </span></p><p style="background: #f8fcff;"  ><a title="&quot;esd:400px-efs_operation_scheme.png&quot;" rel="nofollow" href="http://192.168.0.19/kbase/lib/exe/detail.php/esd/400px-efs_operation_scheme.png?id=esd:vista_efs_mechanism"  ><img title="EFS - Howie - Dspace"  src="pic/img6.ph.126.net_Wvra2DWrsjfdL_52JG9Pxw==_6597566745912167996.jpg"  alt=""  border="0"  /></a><span style="color:black; font-family:Lucida Bright;"  >   </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:微软雅黑; font-size:12pt;"  ><strong>Security<span style="color:#444444;"  >     </span></strong></span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >There are two significant security vulnerabilities in Windows 2000 EFS. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:微软雅黑;"  ><strong>Decrypting files using the local Administrator account<span style="color:#444444;"  >     </span></strong></span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >In Windows 2000, the local administrator is the default Data Recovery Agent, capable of decrypting all files encrypted with EFS by any local user. EFS in Windows 2000 cannot function without a recovery agent, so there is always someone who can decrypt encrypted files of the users. Any non-domain-joined Windows 2000 computer will be susceptible to unauthorized EFS decryption by anyone who can take over the local Administrator account, which is trivial given many tools available freely on the Internet.[2] </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >In Windows XP and later, there is no default local Data Recovery Agent and no requirement to have one. Setting SYSKEY to mode 2 or 3 (syskey typed in during bootup or stored on a floppy disk) will mitigate the risk of unauthorized decryption through the local Administrator account. This is because the local user's password hashes, stored in the SAM file, are encrypted with the Syskey, and the Syskey value is not available to an offline attacker who does not possess the Syskey passphrase/floppy. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:微软雅黑;"  ><strong>Accessing private key via password reset<span style="color:#444444;"  >     </span></strong></span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >In Windows 2000, the user's RSA private key is not only stored in a truly encrypted form, but there is also a backup of the user's RSA private key that is more weakly protected. If an attacker gains physical access to the Windows 2000 computer and resets a local user account's password[2], the attacker can log in as that user (or recovery agent) and gain access to the RSA private key which can decrypt all files. This is because the backup of the user's RSA private key is encrypted with an LSA secret, which is accessible to any attacker who can elevate their login to LocalSystem (again, trivial given numerous tools on the Internet). </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >In Windows XP and beyond, the user's RSA private key is backed up using an offline public key whose matching private key is stored in one of two places: the password reset disk (if Windows XP is not a member of a domain) or in the Active Directory (if Windows XP is a member of a domain). This means that an attacker who can authenticate to Windows XP as LocalSystem still does not have access to a decryption key stored on the PC's hard drive. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >In Windows 2000, XP or later, the user's RSA private key is encrypted using a hash of the user's NTLM password hash plus the user name - use of a salted hash makes it impossible to reverse the process and recover the private key without knowing the user's passphrase. Also, again, setting Syskey to mode 2 or 3 (Syskey typed in during bootup or stored on a floppy disk) will mitigate this attack, since the local user's password hash will be stored encrypted in the SAM file, </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:微软雅黑;"  ><strong>Other issues<span style="color:#444444;"  >     </span></strong></span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >Windows can store plaintext versions of user account passphrases, though this is no longer default behaviour; it also can and will store, by default, the local user account passphrases in LM hash, which can be attacked and broken relatively easily. It also stores local user account passphrases as NTLM hashes, which can be fairly easily attacked using "rainbow tables". To mitigate the threat of trivial brute-force attacks on local passphrases, Windows needs to be configured (using the Security Settings portion of Group Policy) to never store LM hashes, and of course, to turn off Autologon (which stores plaintext passphrases in the registry). Further, using local user account passphrases over 14 characters long prevents Windows from storing an LM hash in the SAM - and has the added benefit of making brute-force attacks against the NTLM hash harder. Of course, if you consider the fact that EFS uses Triple DES or AES to encrypt files, you should use proper passphrase lengths (over 20 characters long) to achieve equivalent strength against brute-force attacks. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >When encrypting files with EFS - when converting plaintext files to encrypted files - the plaintext files are not wiped, but simply deleted. This means that they can be easily recovered unless they are overwritten. To fully mitigate known, non-challenging technical attacks against EFS, you should configure encryption at the folder level (so that all temporary files like Word document backups which are created in these directories are also encrypted). When you wish to encrypt individual files, copy them to an encrypted folder or encrypt the file "in place", and then securely wipe the disk volume. You can use the Windows Cipher utility (with the /W option) to wipe free space including that which still contains deleted plaintext files; various third-party utilities may work as well. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >Anyone that can gain Administrators access can overwrite, override or change the Data Recovery Agent configuration. This is a very serious issue, since an attacker can for example hack the Administrator account (using third-party tools), set whatever DRA certificate they want as the Data Recovery Agent and wait. This is sometimes referred to as a two-stage attack, which is a significantly different scenario than the risk due to a lost or stolen PC, but which highlights the risk due to malicious insiders. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >When the user encrypts files after the first stage of such an attack, the FEKs are automatically encrypted with the designated DRA's public key. The attacker only needs to access the computer once more as Administrator to gain full access to all those subsequently EFS-encrypted files. Even using Syskey mode 2 or 3 does not protect against this attack, because the attacker could back up the encrypted files offline, restore them elsewhere and use the DRA's private key to decrypt the files. Of course, if such a malicious insider can gain physical access to the computer, you might consider all security features to be irrelevant, because he could also install rootkits, software or even hardware keyloggers etc. on the computer - which is potentially much more interesting and effective than overwriting DRA policy. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:微软雅黑;"  ><strong>Recovery<span style="color:#444444;"  >     </span></strong></span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >Files encrypted with EFS can only be decrypted by using the RSA private key(s) matching the previously-used public key(s). The stored copy of the user's private key is ultimately protected by the user's logon password. Accessing encrypted files from outside Windows with other operating systems (Linux, for example, or even another instance of Windows) is not possible — not least of which because there is currently no third party EFS component driver. Further, using special tools to reset the user's login password will render it impossible to decrypt the user's private key and thus useless for gaining access to the user's encrypted files. </span></p><p style="background: #f8fcff;"  ><span style="color:black; font-family:微软雅黑;"  ><strong>Keys<span style="color:#444444;"  >     </span></strong></span></p><ul><li><div style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >user password (or smart card private key): used to generate a decryption key to decrypt the user's DPAPI Master Key  </span></div></li><li><div style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >DPAPI Master Key: used to decrypt the user's RSA private key(s)  </span></div></li><li><div style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >RSA private key: used to decrypt each file's FEK  </span></div></li><li><div style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >File Encryption Key (FEK): used to decrypt/encrypt each file's data (in the primary NTFS stream)  </span></div></li><li><div style="background: #f8fcff;"  ><span style="color:black; font-family:Lucida Bright;"  >SYSKEY: used to encrypt the cached domain verifier and the password hashes stored in the SAM  </span></div></li></ul><p style="background: #f8fcff;"  ><span style="color:black; font-family:微软雅黑; font-size:12pt;"  ><strong>Algorithms Used by Operating System version<span style="color:#444444;"  >     </span></strong></span></p><div><table style="border-collapse:collapse;"  border="0"  ><colgroup><col style="width:111px;"  /><col style="width:97px;"  /><col style="width:95px;"  /><tbody valign="top"  ><tr style="background: #dee7ec;"  ><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  solid #8cacbb 0.75pt; border-left:  solid #8cacbb 0.75pt; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p style="text-align: center;"  ><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  ><strong>Operating System </strong></span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  solid #8cacbb 0.75pt; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p style="text-align: center;"  ><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  ><strong>Default Algorithm </strong></span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  solid #8cacbb 0.75pt; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p style="text-align: center;"  ><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  ><strong>Other Algorithms </strong></span></p></td></tr><tr style="background: white;"  ><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  solid #8cacbb 0.75pt; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >Windows 2000 </span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >DESX </span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >(none) </span></p></td></tr><tr style="background: white;"  ><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  solid #8cacbb 0.75pt; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >Windows XP RTM </span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >DESX</span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >3DES </span></p></td></tr><tr style="background: white;"  ><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  solid #8cacbb 0.75pt; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >Windows XP SP1 </span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >AES </span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >3DES, DESX </span></p></td></tr><tr style="background: white;"  ><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  solid #8cacbb 0.75pt; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >Windows Server 2003 </span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >AES </span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >3DES, DESX </span></p></td></tr><tr style="background: white;"  ><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  solid #8cacbb 0.75pt; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >Windows Vista </span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >AES </span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >3DES, DESX </span></p></td></tr><tr style="background: white;"  ><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  solid #8cacbb 0.75pt; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >Windows Server 2008 </span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >AES </span></p></td><td vAlign="middle"  style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid #8cacbb 0.75pt; border-right:  solid #8cacbb 0.75pt;"  ><p><span style="color:black; font-family:Lucida Bright; font-size:7pt;"  >3DES, DESX (?) </span></p></td></tr></table></div><p><span style="font-size:8pt;"  >   </span>&nbsp;</p>
</body></html>