<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转] 软件架构入门</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转] 软件架构入门</h2>
<p align="right">发布时间：2017-1-12 17:37
<br>分类名称：默认分类</p><br>
<p>
&nbsp;</p><p>作者：&nbsp;<a rel="nofollow" href="http://www.ruanyifeng.com/"     >阮一峰</a>
</p><p>日期：&nbsp;<a rel="nofollow" href="http://www.ruanyifeng.com/blog/2016/09/"     >2016年9月 3日</a>
</p><p>软件架构（software architecture）就是软件的基本结构。
</p><p>合适的架构是软件成功的最重要因素之一。大型软件公司通常有专门的架构师职位（architect），只有资深程序员才可以担任。
</p><p>O'Reilly 出版过一本免费的小册子<a target="_blank" rel="nofollow" href="http://www.oreilly.com/programming/free/software-architecture-patterns.csp"     >《Software Architecture Patterns》</a>（<a target="_blank" rel="nofollow" href="http://www.oreilly.com/programming/free/files/software-architecture-patterns.pdf"     >PDF</a>）， 介绍了五种最常见的软件架构，是非常好的入门读物。我读后受益匪浅，下面就是我的笔记。
</p><p><img title="[转] 软件架构入门 - Howie - Dspace"     src="pic/img0.ph.126.net_C7ty5BLpep4IuILwrGsSGw==_6631916588676722799.jpg"     alt=""     />
</p><p>一、分层架构
</p><p>分层架构（layered architecture）是最常见的软件架构，也是事实上的标准架构。如果你不知道要用什么架构，那就用它。
</p><p>这种架构将软件分成若干个水平层，每一层都有清晰的角色和分工，不需要知道其他层的细节。层与层之间通过接口通信。
</p><p>虽然没有明确约定，软件一定要分成多少层，但是四层的结构最常见。
</p><p><img title="[转] 软件架构入门 - Howie - Dspace"     src="pic/img2.ph.126.net_uvJJm-k4H91XI8Mgm0ypZA==_6632190367072031399.jpg"     alt=""     />
</p><ul><li>表现层（presentation）：用户界面，负责视觉和用户互动
</li><li>业务层（business）：实现业务逻辑
</li><li>持久层（persistence）：提供数据，SQL 语句就放在这一层
</li><li>数据库（database） ：保存数据
</li></ul><p>有的软件在逻辑层和持久层之间，加了一个服务层（service），提供不同业务逻辑需要的一些通用接口。
</p><p>用户的请求将依次通过这四层的处理，不能跳过其中任何一层。
</p><p><img title="[转] 软件架构入门 - Howie - Dspace"     src="pic/img2.ph.126.net_FyfoGPTzrTYzMkxvQ3Z37Q==_6632091411025537949.jpg"     alt=""     />
</p><p>优点
</p><ul><li>结构简单，容易理解和开发
</li><li>不同技能的程序员可以分工，负责不同的层，天然适合大多数软件公司的组织架构
</li><li>每一层都可以独立测试，其他层的接口通过模拟解决
</li></ul><p>缺点
</p><ul><li>一旦环境变化，需要代码调整或增加功能时，通常比较麻烦和费时
</li><li>部署比较麻烦，即使只修改一个小地方，往往需要整个软件重新部署，不容易做持续发布
</li><li>软件升级时，可能需要整个服务暂停
</li><li>扩展性差。用户请求大量增加时，必须依次扩展每一层，由于每一层内部是耦合的，扩展会很困难
</li></ul><p>二、事件驱动架构
</p><p>事件（event）是状态发生变化时，软件发出的通知。
</p><p>事件驱动架构（event-driven architecture）就是通过事件进行通信的软件架构。它分成四个部分。
</p><p><img title="[转] 软件架构入门 - Howie - Dspace"     src="pic/img0.ph.126.net_kJnJj7-wr6w7ASSnW1hYBg==_6631856115537190479.jpg"     alt=""     />
</p><ul><li>事件队列（event queue）：接收事件的入口
</li><li>分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元
</li><li>事件通道（event channel）：分发器与处理器之间的联系渠道
</li><li>事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作
</li></ul><p>对于简单的项目，事件队列、分发器和事件通道，可以合为一体，整个软件就分成事件代理和事件处理器两部分。
</p><p><img title="[转] 软件架构入门 - Howie - Dspace"     src="pic/img1.ph.126.net_B5RhOhLIT0HLYrxXgvVLdA==_6632041933002293575.jpg"     alt=""     />
</p><p>优点
</p><ul><li>分布式的异步架构，事件处理器之间高度解耦，软件的扩展性好
</li><li>适用性广，各种类型的项目都可以用
</li><li>性能较好，因为事件的异步本质，软件不易产生堵塞
</li><li>事件处理器可以独立地加载和卸载，容易部署
</li></ul><p>缺点
</p><ul><li>涉及异步编程（要考虑远程通信、失去响应等情况），开发相对复杂
</li><li>难以支持原子性操作，因为事件通过会涉及多个处理器，很难回滚
</li><li>分布式和异步特性导致这个架构较难测试
</li></ul><p>三、微核架构
</p><p>微核架构（microkernel architecture）又称为"插件架构"（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。
</p><p>内核（core）通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信，应该减少到最低，避免出现互相依赖的问题。
</p><p><img title="[转] 软件架构入门 - Howie - Dspace"     src="pic/img2.ph.126.net_tpuei_RsYAwdRuX7Czlr-w==_6632196964141797989.jpg"     alt=""     />
</p><p>优点
</p><ul><li>良好的功能延伸性（extensibility），需要什么功能，开发一个插件即可
</li><li>功能之间是隔离的，插件可以独立的加载和卸载，使得它比较容易部署，
</li><li>可定制性高，适应不同的开发需要
</li><li>可以渐进式地开发，逐步增加功能
</li></ul><p>缺点
</p><ul><li>扩展性（scalability）差，内核通常是一个独立单元，不容易做成分布式
</li><li>开发难度相对较高，因为涉及到插件与内核的通信，以及内部的插件登记机制
</li></ul><p>四、微服务架构
</p><p>微服务架构（microservices architecture）是服务导向架构（service-oriented architecture，缩写 SOA）的升级。
</p><p>每一个服务就是一个独立的部署单元（separately deployed unit）。这些单元都是分布式的，互相解耦，通过远程通信协议（比如REST、SOAP）联系。
</p><p><img title="[转] 软件架构入门 - Howie - Dspace"     src="pic/img2.ph.126.net_gKYyPrA0Hf9zlm6sEQ4Scg==_6631924285258117124.jpg"     alt=""     />
</p><p>微服务架构分成三种实现模式。
</p><ul><li>RESTful API 模式：服务通过 API 提供，云服务就属于这一类
</li><li>RESTful 应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部
</li><li>集中消息模式：采用消息代理（message broker），可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群
</li></ul><p>优点
</p><ul><li>扩展性好，各个服务之间低耦合
</li><li>容易部署，软件从单一可部署单元，被拆成了多个服务，每个服务都是可部署单元
</li><li>容易开发，每个组件都可以进行持续集成式的开发，可以做到实时部署，不间断地升级
</li><li>易于测试，可以单独测试每一个服务
</li></ul><p>缺点
</p><ul><li>由于强调互相独立和低耦合，服务可能会拆分得很细。这导致系统依赖大量的微服务，变得很凌乱和笨重，性能也会不佳。
</li><li>一旦服务之间需要通信（即一个服务要用到另一个服务），整个架构就会变得复杂。典型的例子就是一些通用的 Utility 类，一种解决方案是把它们拷贝到每一个服务中去，用冗余换取架构的简单性。
</li><li>分布式的本质使得这种架构很难实现原子性操作，交易回滚会比较困难。
</li></ul><p>五、云架构
</p><p>云结构（cloud architecture）主要解决扩展性和并发的问题，是最容易扩展的架构。
</p><p>它的高扩展性，主要原因是没使用中央数据库，而是把数据都复制到内存中，变成可复制的内存数据单元。然后，业务处理能力封装成一个个处理单元（prcessing unit）。访问量增加，就新建处理单元；访问量减少，就关闭处理单元。由于没有中央数据库，所以扩展性的最大瓶颈消失了。由于每个处理单元的数据都在内存里，最好要进行数据持久化。
</p><p>这个模式主要分成两部分：处理单元（processing unit）和虚拟中间件（virtualized middleware）。
</p><ul><li>处理单元：实现业务逻辑
</li><li>虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署。
</li></ul><p><img title="[转] 软件架构入门 - Howie - Dspace"     src="pic/img0.ph.126.net_GACIhOdbT-D4cXBu_qFs-w==_6631942976955785292.jpg"     alt=""     />
</p><p>虚拟中间件又包含四个组件。
</p><ul><li><strong>消息中间件</strong>（Messaging Grid）：管理用户请求和session，当一个请求进来以后，决定分配给哪一个处理单元。
</li><li><strong>数据中间件</strong>（Data Grid）：将数据复制到每一个处理单元，即数据同步。保证某个处理单元都得到同样的数据。
</li><li><strong>处理中间件</strong>（Processing Grid）：可选，如果一个请求涉及不同类型的处理单元，该中间件负责协调处理单元
</li><li><strong>部署中间件</strong>（Deployment Manager）：负责处理单元的启动和关闭，监控负载和响应时间，当负载增加，就新启动处理单元，负载减少，就关闭处理单元。
</li></ul><p>优点
</p><ul><li>高负载，高扩展性
</li><li>动态部署
</li></ul><p>缺点
</p><ul><li>实现复杂，成本较高
</li><li>主要适合网站类应用，不合适大量数据吞吐的大型数据库应用
</li><li>较难测试
</li></ul><p>（完）
</p><p><strong>文档信息
</strong></p><ul><li>版权声明：自由转载-非商用-非衍生-保持署名（<a rel="nofollow" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"     >创意共享3.0许可证</a>）
</li><li>发表日期：&nbsp;2016年9月 3日
</li><li>更多内容：&nbsp;<a target="_blank" rel="nofollow" href="http://www.ruanyifeng.com/blog/archives.html"     >档案</a>&nbsp;?&nbsp;<a rel="nofollow" href="http://www.ruanyifeng.com/blog/developer/"     >开发者手册</a>
</li><li>购买文集：<a target="_blank" rel="nofollow" href="http://www.ruanyifeng.com/blog/2014/12/my-blog-book.html"     >&nbsp;《如何变得有思想》</a>
</li><li>社交媒体：<a target="_blank" rel="nofollow" href="https://twitter.com/ruanyf"     >&nbsp;twitter</a>，<a target="_blank" rel="nofollow" href="http://weibo.com/ruanyf"     >&nbsp;weibo</a>
</li><li>Feed订阅：&nbsp;
</li></ul>
</body></html>