<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转]宏定义中使用do{}while(0)的好处</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转]宏定义中使用do{}while(0)的好处</h2>
<p align="right">发布时间：2012-4-28 17:07
<br>分类名称：windows</p><br>
<p><span style="font-family:宋体; font-size:12pt;"  ><strong>#define MACRO_NAME(para) do{macro content}while(0)</strong>   </span></p><p><span style="font-family:宋体; font-size:12pt;"  >的格式，总结了以下几个原因： </span></p><p><span style="font-family:宋体; font-size:12pt;"  >1，空的宏定义避免warning: </span></p><p><span style="font-family:宋体; font-size:12pt;"  >#define foo() do{}while(0) </span></p><p><span style="font-family:宋体; font-size:12pt;"  >2，存在一个独立的block，可以用来进行变量定义，进行比较复杂的实现。 </span></p><p><span style="font-family:宋体; font-size:12pt;"  >3，如果出现在判断语句过后的宏，这样可以保证作为一个整体来是实现： </span></p><p><span style="font-family:宋体; font-size:12pt;"  >#define foo(x) / </span></p><p>&nbsp; &nbsp;</p><p><span style="font-family:宋体; font-size:12pt;"  >action1(); / </span></p><p>&nbsp; &nbsp;</p><p><span style="font-family:宋体; font-size:12pt;"  >action2(); </span></p><p>&nbsp; &nbsp;</p><p><span style="font-family:宋体; font-size:12pt;"  >在以下情况下： </span></p><p>&nbsp; &nbsp;</p><p><span style="font-family:宋体; font-size:12pt;"  > </span></p><p>&nbsp; &nbsp;</p><p><span style="font-family:宋体; font-size:12pt;"  >&nbsp;&nbsp; foo(); </span></p><p>&nbsp; &nbsp;</p><p><span style="font-family:宋体; font-size:12pt;"  >就会出现action1和action2不会同时被执行的情况，而这显然不是程序设计的目的。<br>&nbsp; </span></p><p><span style="font-family:宋体; font-size:12pt;"  >4，以上的第3种情况用单独的{}也可以实现，但是为什么一定要一个do{}while(0)呢，看以下代码： </span></p><p><span style="font-family:宋体; font-size:12pt;"  >#define switch(x,y) {int tmp; tmp="x";x=y;y=tmp;} </span></p><p><span style="font-family:宋体; font-size:12pt;"  > </span></p><p><span style="font-family:宋体; font-size:12pt;"  >switch(x,y); </span></p><p><span style="font-family:宋体; font-size:12pt;"  >else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //error, parse error before else </span></p><p><span style="font-family:宋体; font-size:12pt;"  >otheraction(); </span></p><p><span style="font-family:宋体; font-size:12pt;"  >在把宏引入代码中，会多出一个分号，从而会报错。 </span></p><p>&nbsp; &nbsp;</p><p><span style="font-family:宋体; font-size:12pt;"  >//------------------------------------------------ </span></p><p><span style="font-family:宋体; font-size:12pt;"  >使用<span style="color:black;"  >do{….}while(0)</span> 把它包裹起来，成为一个独立的语法单元，<br>从而不会与上下文发生混淆。同时因为绝大多数的编译器都能够识别do{…}while(0)这种无<br>用的循环并进行优化，所以使用这种方法也不会导致程序的性能降低 </span></p><div><table style="border-collapse:collapse;"  border="0"  ><colgroup><col style="width:576px;"  /><tbody valign="top"  ><tr><td vAlign="middle"  ><p><span style="font-family:宋体; font-size:12pt;"  >在C++中，有三种类型的循环语句：for, while, 和do...while， 但是在一般应用中作循环时， 我们可能用for和while要多一些，do...while相对不受重视。<br>&nbsp;&nbsp;&nbsp; 但是，最近在读我们项目的代码时，却发现了do...while的一些十分聪明的用法，不是用来做循环，而是用作其他来提高代码的健壮性。  </span></p><p><span style="font-family:宋体; font-size:12pt;"  ><strong>1. do...while(0)消除goto语句。</strong><br>通常，如果在一个函数中开始要分配一些资源，然后在中途执行过程中如果遇到错误则退出函数，当然，退出前先释放资源，我们的代码可能是这样：<br><strong>version 1</strong>        </span></p><p style="background: #e6e6e6;"  ><span style="color:blue; font-family:宋体; font-size:12pt;"  >bool<span style="color:black;"  >&nbsp;Execute()<br>{<br>&nbsp;&nbsp;&nbsp;<span style="color:green;"  >//&nbsp;分配资源<br><span style="color:black;"  >&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >int<span style="color:black;"  >&nbsp;*p&nbsp;=&nbsp;<span style="color:blue;"  >new<span style="color:black;"  >&nbsp;<span style="color:blue;"  >int<span style="color:black;"  >;<br>&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >bool<span style="color:black;"  >&nbsp;bOk(<span style="color:blue;"  >true<span style="color:black;"  >);<br><br>&nbsp;&nbsp;&nbsp;<span style="color:green;"  >//&nbsp;执行并进行错误处理<br><span style="color:black;"  >&nbsp;&nbsp;&nbsp;bOk&nbsp;=&nbsp;func1();<br>&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >if<span style="color:black;"  >(!bOk)&nbsp;<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;p;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;NULL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >return<span style="color:black;"  >&nbsp;<span style="color:blue;"  >false<span style="color:black;"  >;<br>&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;bOk&nbsp;=&nbsp;func2();<br>&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >if<span style="color:black;"  >(!bOk)&nbsp;<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;p;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;NULL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >return<span style="color:black;"  >&nbsp;<span style="color:blue;"  >false<span style="color:black;"  >;<br>&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;bOk&nbsp;=&nbsp;func3();<br>&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >if<span style="color:black;"  >(!bOk)&nbsp;<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;p;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;NULL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >return<span style="color:black;"  >&nbsp;<span style="color:blue;"  >false<span style="color:black;"  >;<br>&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;<span style="color:green;"  >//&nbsp;..........<br><br>&nbsp;&nbsp;&nbsp;//&nbsp;执行成功，释放资源并返回<br><span style="color:black;"  >&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;p;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;NULL;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >return<span style="color:black;"  >&nbsp;<span style="color:blue;"  >true<span style="color:black;"  >;<br>&nbsp;&nbsp;&nbsp;<br>}</span>                                              </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style="font-family:宋体; font-size:12pt;"  ><br>这里一个最大的问题就是代码的冗余，而且我每增加一个操作，就需要做相应的错误处理，非常不灵活。于是我们想到了goto:<br><strong>version 2</strong>        </span></p><p style="background: #e6e6e6;"  ><span style="color:blue; font-family:宋体; font-size:12pt;"  >bool<span style="color:black;"  >&nbsp;Execute()<br>{<br>&nbsp;&nbsp;&nbsp;<span style="color:green;"  >//&nbsp;分配资源<br><span style="color:black;"  >&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >int<span style="color:black;"  >&nbsp;*p&nbsp;=&nbsp;<span style="color:blue;"  >new<span style="color:black;"  >&nbsp;<span style="color:blue;"  >int<span style="color:black;"  >;<br>&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >bool<span style="color:black;"  >&nbsp;bOk(<span style="color:blue;"  >true<span style="color:black;"  >);<br><br>&nbsp;&nbsp;&nbsp;<span style="color:green;"  >//&nbsp;执行并进行错误处理<br><span style="color:black;"  >&nbsp;&nbsp;&nbsp;bOk&nbsp;=&nbsp;func1();<br>&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >if<span style="color:black;"  >(!bOk)&nbsp;<span style="color:blue;"  >goto<span style="color:black;"  >&nbsp;errorhandle;<br><br>&nbsp;&nbsp;&nbsp;bOk&nbsp;=&nbsp;func2();<br>&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >if<span style="color:black;"  >(!bOk)&nbsp;<span style="color:blue;"  >goto<span style="color:black;"  >&nbsp;errorhandle;<br><br>&nbsp;&nbsp;&nbsp;bOk&nbsp;=&nbsp;func3();<br>&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >if<span style="color:black;"  >(!bOk)&nbsp;<span style="color:blue;"  >goto<span style="color:black;"  >&nbsp;errorhandle;<br><br>&nbsp;&nbsp;&nbsp;<span style="color:green;"  >//&nbsp;..........<br><br>&nbsp;&nbsp;&nbsp;//&nbsp;执行成功，释放资源并返回<br><span style="color:black;"  >&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;p;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;NULL;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >return<span style="color:black;"  >&nbsp;<span style="color:blue;"  >true<span style="color:black;"  >;<br><br>errorhandle:<br>&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;p;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;NULL;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >return<span style="color:black;"  >&nbsp;<span style="color:blue;"  >false<span style="color:black;"  >;<br>&nbsp;&nbsp;&nbsp;<br>}</span>                                            </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style="font-family:宋体; font-size:12pt;"  ><br>代码冗余是消除了，但是我们引入了C++中身份比较微妙的goto语句，虽然正确的使用goto可以大大提高程序的灵活性与简洁性，但太灵 活的东西往往是很危险的，它会让我们的程序捉摸不定，那么怎么才能避免使用goto语句，又能消除代码冗余呢，请看do...while(0)循环：<br><strong>version3</strong>        </span></p><p style="background: #e6e6e6;"  ><span style="color:blue; font-family:宋体; font-size:12pt;"  >bool<span style="color:black;"  >&nbsp;Execute()<br>{<br>&nbsp;&nbsp;&nbsp;<span style="color:green;"  >//&nbsp;分配资源<br><span style="color:black;"  >&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >int<span style="color:black;"  >&nbsp;*p&nbsp;=&nbsp;<span style="color:blue;"  >new<span style="color:black;"  >&nbsp;<span style="color:blue;"  >int<span style="color:black;"  >;<br><br>&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >bool<span style="color:black;"  >&nbsp;bOk(<span style="color:blue;"  >true<span style="color:black;"  >);<br>&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >do<span style="color:black;"  ><br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;"  >//&nbsp;执行并进行错误处理<br><span style="color:black;"  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bOk&nbsp;=&nbsp;func1();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >if<span style="color:black;"  >(!bOk)&nbsp;<span style="color:blue;"  >break<span style="color:black;"  >;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bOk&nbsp;=&nbsp;func2();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >if<span style="color:black;"  >(!bOk)&nbsp;<span style="color:blue;"  >break<span style="color:black;"  >;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bOk&nbsp;=&nbsp;func3();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >if<span style="color:black;"  >(!bOk)&nbsp;<span style="color:blue;"  >break<span style="color:black;"  >;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;"  >//&nbsp;..........<br><span style="color:black;"  ><br>&nbsp;&nbsp;&nbsp;}<span style="color:blue;"  >while<span style="color:black;"  >(0);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;"  >//&nbsp;释放资源<br><span style="color:black;"  >&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;p;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;NULL;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;"  >return<span style="color:black;"  >&nbsp;bOk;<br>&nbsp;&nbsp;&nbsp;<br>}</span>                                            </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style="font-family:宋体; font-size:12pt;"  ><strong>2 宏定义中的do...while(0)</strong><br>如果你是C++程序员，我有理由相信你用过，或者接触过，至少听说过MFC, 在MFC的afx.h文件里面， 你会发现很多宏定义都是用了do...while(0)或do...while(false)， 比如说：<br>#define AFXASSUME(cond)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do { bool __afx_condVal=!!(cond); ASSERT(__afx_condVal); __analysis_assume(__afx_condVal); } while(0) <br>粗看我们就会觉得很奇怪，既然循环里面只执行了一次，我要这个看似多余的do...while(0)有什么意义呢？ <br>当然有！<br>为了看起来更清晰，这里用一个简单点的宏来演示：<br>#define SAFE_DELETE(p) do{ delete p; p = NULL} while(0)<br>假设这里去掉do...while(0),<br>#define SAFE_DELETE(p) delete p; p = NULL;<br>那么以下代码：<br> SAFE_DELETE(p)<br>else&nbsp;&nbsp; ...do sth...<br>就有两个问题，<br>1) 因为if分支后有两个语句，else分支没有对应的if，编译失败<br>2) 假设没有else, SAFE_DELETE中的第二个语句无论if测试是否通过，会永远执行。<br>你可能发现，为了避免这两个问题，我不一定要用这个令人费解的do...while,&nbsp; 我直接用{}括起来就可以了<br>#define SAFE_DELETE(p) { delete p; p = NULL;}<br>的确，这样的话上面的问题是不存在了，但是我想对于C++程序员来讲，在每个语句后面加分号是一种约定俗成的习惯，这样的话，以下代码:<br> SAFE_DELETE(p);<br>else&nbsp;&nbsp; ...do sth...<br>其else分支就无法通过编译了（原因同上），所以采用do...while(0)是做好的选择了。 </span></p><p><span style="font-family:宋体; font-size:12pt;"  >也许你会说，我们代码的习惯是在每个判断后面加上{}, 就不会有这种问题了，也就不需要do...while了，如：<br> <br>{<br>}<br>else<br>{<br>}<br>诚然，这是一个好的，应该提倡的编程习惯，但一般这样的宏都是作为library的一部分出现的，而对于一个library的作者，他所要做的就是让其库具有通用性，强壮性，因此他不能有任何对库的使用者的假设，如其编码规范，技术水平等</span></p></td></tr></table></div>
</body></html>