<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[原] RSA 示例程序</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[原] RSA 示例程序</h2>
<p align="right">发布时间：2010-4-1 18:28
<br>分类名称：PKI</p><br>
<div><font face="Courier"><span style="line-height: 20px; font-size: small;"><div><div>/********************************************************************</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>RSA 示例程序</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>OpenSSL 签名，验签</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>OpenSSL 加密，解密</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>MS cryptAPI 签名，OpenSSL 验签</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>MS cryptAPI 加密，OpenSSL 解密</div><div>*********************************************************************/</div><div><br></div><div>#include "stdafx.h"</div><div><br></div><div>#define TEST_CSP MS_ENHANCED_PROV</div><div>const static unsigned char szTemp[] = "This is a test!";</div><div>const static char *szContainer = "My Container";</div><div><br></div><div>void OpensslSelf();</div><div>void MsSelf();</div><div>void MsSignOpenSSLVerify();</div><div>void MsEncryptOpenSSLDecrypt();</div><div><br></div><div>void FlipBuffer(unsigned char *pBuf, unsigned long ulLen)</div><div>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>//char tmp;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>unsigned char ucTemp;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>for(unsigned long i = 0; i &lt; ulLen &gt;&gt; 1; ++i)</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>ucTemp = pBuf[i];</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBuf[i] = pBuf[ulLen - i - 1];</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBuf[ulLen - i - 1] = ucTemp;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div>}</div><div><br></div><div>int main(int argc, char* argv[])</div><div>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>MsSelf();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>OpensslSelf();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>MsSignOpenSSLVerify();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>MsEncryptOpenSSLDecrypt();</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return 0;</div><div>}</div><div><br></div><div>void MsSignOpenSSLVerify()</div><div>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("=====================================================\n\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("测试由微软CSP签名，Openssl验签\n");</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>const ULONG ulTestLen = 0x80;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>unsigned char szTestData[0x80] = {0};</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>memcpy(szTestData, szTemp, sizeof(szTemp));</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>HCRYPTPROV hProv = NULL;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptAcquireContext(&amp;hProv, szContainer, TEST_CSP, PROV_RSA_FULL, 0))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (NTE_BAD_KEYSET == GetLastError())</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptAcquireContext(&amp;hProv, szContainer, TEST_CSP, PROV_RSA_FULL, CRYPT_NEWKEYSET))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Creating container error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Creating container OK!\n");</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>HCRYPTKEY hKey = NULL;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptGenKey(hProv, AT_KEYEXCHANGE, RSA1024BIT_KEY|CRYPT_EXPORTABLE, &amp;hKey))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Generating key pair error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>HCRYPTHASH hHash = NULL;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptCreateHash(hProv, CALG_SHA1, NULL, 0, &amp;hHash))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Create hash error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptSetHashParam(hHash, HP_HASHVAL, szTestData, 0))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Create hash data error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwSignLen = 0;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptSignHash(hHash, AT_KEYEXCHANGE, NULL, NULL, NULL, &amp;dwSignLen))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("get sign data len error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>vector&lt;BYTE&gt; vSignedData;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>vSignedData.resize(dwSignLen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>ZeroMemory(&amp;vSignedData[0], dwSignLen);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptSignHash(hHash, AT_KEYEXCHANGE, NULL, NULL, &amp;vSignedData[0], &amp;dwSignLen))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("get sign data len error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(&amp;vSignedData[0], dwSignLen);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>// Export public key</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwExportedDataLen = 0;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptExportKey(hKey, NULL, PUBLICKEYBLOB, 0, NULL, &amp;dwExportedDataLen))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Get the size of the exported public key error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>vector&lt;BYTE&gt; vPubBlob;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>vPubBlob.resize(dwExportedDataLen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>ZeroMemory(&amp;vPubBlob[0], dwExportedDataLen);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptExportKey(hKey, NULL, PUBLICKEYBLOB, 0, &amp;vPubBlob[0], &amp;dwExportedDataLen))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Get exported public key error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pszPubBlob = &amp;vPubBlob[0];</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>RSAPUBKEY *rsapubkey = reinterpret_cast&lt;RSAPUBKEY *&gt;(pszPubBlob + sizeof(PUBLICKEYSTRUC));</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pE = (BYTE *)&amp;(rsapubkey-&gt;pubexp);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwElen = sizeof(DWORD);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(pE, dwElen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>while(0x00 == *pE)</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pE = pE + 1;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>dwElen = dwElen - 1;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwModulusLen = rsapubkey-&gt;bitlen / 8;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pN = pszPubBlob + sizeof(BLOBHEADER) + sizeof(RSAPUBKEY);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(pN, dwModulusLen);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BIGNUM *pBN = BN_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBN = BN_bin2bn(pN, dwModulusLen, pBN);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BIGNUM *pBE = BN_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBE = BN_bin2bn(pE, dwElen, pBE);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>RSA *pRsa = RSA_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pRsa-&gt;n = pBN;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pRsa-&gt;e = pBE;</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>unsigned char pbHashInfo[0x80] = {0};</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>int nRet = RSA_public_decrypt(dwSignLen, &amp;vSignedData[0], pbHashInfo, pRsa, RSA_PKCS1_PADDING/*RSA_PKCS1_PADDING*/);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>//解析解密结果，即获得了一个DER编码的哈希信息</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwHashInfoLen = (DWORD)pbHashInfo[1];</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwTLen = (DWORD)pbHashInfo[3];</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwHashLen = dwHashInfoLen - dwTLen - 4;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>//解析哈希值，哈希值包括两部分，H1和H2</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pp = pbHashInfo+4+dwTLen+2;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (0 == memcmp(szTemp, pp, sizeof(szTemp)))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("verify success!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>else</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("verify failed!\n");</div><div>}</div><div><br></div><div>void MsSelf()</div><div>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("=====================================================\n\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("测试由微软CSP自加解密\n");</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>HCRYPTPROV hProv = NULL;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptAcquireContext(&amp;hProv, szContainer, TEST_CSP, PROV_RSA_FULL, 0))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (NTE_BAD_KEYSET == GetLastError())</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptAcquireContext(&amp;hProv, szContainer, TEST_CSP, PROV_RSA_FULL, CRYPT_NEWKEYSET))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Creating container error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Creating container OK!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>HCRYPTKEY hKey = NULL;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptGenKey(hProv, AT_KEYEXCHANGE, RSA1024BIT_KEY|CRYPT_EXPORTABLE, &amp;hKey))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Generating key pair error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwDataLen = 0;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptEncrypt(hKey, NULL, TRUE, 0, NULL, &amp;dwDataLen, 0))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Get encrypt ken length error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>//const ULONG ulTestLen = 0x80;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>unsigned char *szTestData = new unsigned char[dwDataLen];</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>ZeroMemory(szTestData, dwDataLen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>memcpy(szTestData, szTemp, sizeof(szTemp));</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwLen = sizeof(szTemp);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptEncrypt(hKey, NULL, TRUE, 0, szTestData, &amp;dwLen, dwDataLen))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Encrypt data error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptDecrypt(hKey, NULL, TRUE, 0, szTestData, &amp;dwLen))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Decrypt data error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (0 == memcmp(szTestData, szTemp, dwLen))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Encrypt and decrypt success!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>else</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Encrypt and decrypt failed!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div>}</div><div><br></div><div>void MsEncryptOpenSSLDecrypt()</div><div>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("=====================================================\n\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("测试由微软CSP签名，Openssl验签\n");</div><div><br></div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>HCRYPTPROV hProv = NULL;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptAcquireContext(&amp;hProv, szContainer, TEST_CSP, PROV_RSA_FULL, 0))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (NTE_BAD_KEYSET == GetLastError())</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptAcquireContext(&amp;hProv, szContainer, TEST_CSP, PROV_RSA_FULL, CRYPT_NEWKEYSET))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Creating container error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Creating container OK!\n");</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>HCRYPTKEY hKey = NULL;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptGenKey(hProv, AT_KEYEXCHANGE, RSA1024BIT_KEY|CRYPT_EXPORTABLE, &amp;hKey))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Generating key pair error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwDataLen = 0;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptEncrypt(hKey, NULL, TRUE, 0, NULL, &amp;dwDataLen, 0))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Get encrypt ken length error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>//const ULONG ulTestLen = 0x80;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>unsigned char *szTestData = new unsigned char[dwDataLen];</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>ZeroMemory(szTestData, dwDataLen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>memcpy(szTestData, szTemp, sizeof(szTemp));</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwLen = sizeof(szTemp);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptEncrypt(hKey, NULL, TRUE, 0, szTestData, &amp;dwLen, dwDataLen))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Encrypt data error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>return;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(szTestData, dwLen);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>// Export public key</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwExportedDataLen = 0;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptExportKey(hKey, NULL, PRIVATEKEYBLOB, 0, NULL, &amp;dwExportedDataLen))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Get the size of the exported public key error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>vector&lt;BYTE&gt; vPubBlob;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>vPubBlob.resize(dwExportedDataLen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>ZeroMemory(&amp;vPubBlob[0], dwExportedDataLen);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (!CryptExportKey(hKey, NULL, PRIVATEKEYBLOB, 0, &amp;vPubBlob[0], &amp;dwExportedDataLen))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Get exported public key error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pszPubBlob = &amp;vPubBlob[0];</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>RSAPUBKEY *rsapubkey = reinterpret_cast&lt;RSAPUBKEY *&gt;(pszPubBlob + sizeof(PUBLICKEYSTRUC));</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pE = (BYTE *)&amp;(rsapubkey-&gt;pubexp);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwElen = sizeof(DWORD);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwModulusLen = rsapubkey-&gt;bitlen / 8;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwPrimeLen = rsapubkey-&gt;bitlen/16;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pOffset = pszPubBlob + sizeof(BLOBHEADER) + sizeof(RSAPUBKEY);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pN = pOffset;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pOffset += dwModulusLen;</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pP = pOffset;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pOffset += dwPrimeLen;</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pQ = pOffset;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pOffset += dwPrimeLen;</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pP1 = pOffset;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pOffset += dwPrimeLen;</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pQ1 = pOffset;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pOffset += dwPrimeLen;</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pPQ = pOffset;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pOffset += dwPrimeLen;</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pD = pOffset;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pOffset += dwModulusLen;</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(pE, dwElen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(pN, dwModulusLen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(pP, dwPrimeLen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(pQ, dwPrimeLen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(pP1, dwPrimeLen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(pQ1, dwPrimeLen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(pPQ, dwPrimeLen);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>FlipBuffer(pD, dwModulusLen);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>while(0x00 == *pE)</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pE = pE + 1;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>dwElen = dwElen - 1;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BIGNUM *pBE = BN_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBE = BN_bin2bn(pE, dwElen, pBE);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BIGNUM *pBN = BN_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBN = BN_bin2bn(pN, dwModulusLen, pBN);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BIGNUM *pBP = BN_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBP = BN_bin2bn(pP, dwPrimeLen, pBP);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BIGNUM *pBQ = BN_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBQ = BN_bin2bn(pQ, dwPrimeLen, pBQ);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BIGNUM *pBP1 = BN_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBP1 = BN_bin2bn(pP1, dwPrimeLen, pBP1);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BIGNUM *pBQ1 = BN_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBQ1 = BN_bin2bn(pQ1, dwPrimeLen, pBQ1);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BIGNUM *pBPQ = BN_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBPQ = BN_bin2bn(pPQ, dwPrimeLen, pBPQ);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BIGNUM *pBD = BN_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pBD = BN_bin2bn(pD, dwModulusLen, pBD);</div><div><br></div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>RSA *pRsa = RSA_new();</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pRsa-&gt;n = pBN;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pRsa-&gt;e = pBE;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pRsa-&gt;p = pBP;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pRsa-&gt;q = pBQ;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pRsa-&gt;dmp1 = pBP1;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pRsa-&gt;dmq1 = pBQ1;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pRsa-&gt;iqmp = pBPQ;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pRsa-&gt;d = pBD;</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>unsigned char pbHashInfo[0x80] = {0};</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>int nRet = RSA_private_decrypt(dwLen, szTestData, pbHashInfo, pRsa, RSA_PKCS1_PADDING);</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>//解析解密结果，即获得了一个DER编码的哈希信息</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwHashInfoLen = (DWORD)pbHashInfo[1];</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwTLen = (DWORD)pbHashInfo[3];</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>DWORD dwHashLen = dwHashInfoLen - dwTLen - 4;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>//解析哈希值，哈希值包括两部分，H1和H2</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>BYTE *pp = pbHashInfo+4+dwTLen+2;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (0 == memcmp(szTemp, pp, sizeof(szTemp)))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("verify success!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>else</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("verify failed!\n");</div><div>}</div><div><br></div><div>void OpensslSelf()</div><div>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>const ULONG ulTestLen = 0x80;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>unsigned char szTestData[0x80] = {0};</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>memcpy(szTestData, szTemp, sizeof(szTemp));</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>unsigned char szDecData[0x80] = {0};</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>// Generate key pair</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>RSA *pRsa = RSA_generate_key(1024, 0x10001, NULL, NULL);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>ULONG ulSize = BN_num_bytes(pRsa-&gt;n);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>unsigned char *pszBuf = new unsigned char[ulSize + 1];</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>ZeroMemory(pszBuf, ulSize+1);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("==============Used to verify a person=====================\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Using the RSA private key to encrypt messages\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>int nRet = RSA_private_encrypt(sizeof(szTemp), szTemp, pszBuf, pRsa, RSA_PKCS1_PADDING);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (nRet == -1)</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Private encrypt error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>else</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Encrypt successfully\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Using the RSA public key to decrypt messages\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>ZeroMemory(szTestData, 0x80);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>nRet = RSA_public_decrypt(nRet, pszBuf, szDecData, pRsa, RSA_PKCS1_PADDING);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (nRet == -1)</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Public decrypt error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (0 == memcmp(szDecData, szTemp, sizeof(szTemp)))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Verify successfully!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>else</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Verify unsuccessfully\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>ZeroMemory(szDecData, 0x80);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("=====================================================\n\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("===========Used to transfer encrypted messages===========\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Using the RSA public key to encrypt messages\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>nRet = RSA_public_encrypt(sizeof(szTemp), szTemp, pszBuf, pRsa, RSA_PKCS1_PADDING);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (nRet == -1)</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Private encrypt error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>else</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Encrypt successfully\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Using the RSA private key to decrypt messages\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>nRet = RSA_private_decrypt(nRet, pszBuf, szDecData, pRsa, RSA_PKCS1_PADDING);</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (nRet == -1)</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Public decrypt error!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (0 == memcmp(szDecData, szTemp, sizeof(szTemp)))</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Verify successfully!\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>else</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("Verify unsuccessfully\n");</div><div><span class="Apple-tab-span" style="white-space:pre;"></span></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>printf("=====================================================\n\n");</div><div><br></div><div><span class="Apple-tab-span" style="white-space:pre;"></span>if (NULL != pszBuf)</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>{</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>delete[] pszBuf;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>pszBuf = NULL;</div><div><span class="Apple-tab-span" style="white-space:pre;"></span>}</div><div>}</div></div></span></font></div>
</body></html>