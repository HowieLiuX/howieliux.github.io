<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：Getting PDBs and Source When You Can’t Access Your Symbol Server</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>Getting PDBs and Source When You Can’t Access Your Symbol Server</h2>
<p align="right">发布时间：2012-12-6 16:12
<br>分类名称：Debug_Crack</p><br>
  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >From: http://www.wintellect.com/CS/blogs/jrobbins/archive/2010/06/06/getting-pdbs-and-source-when-you-can-t-access-your-symbol-server.aspx </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >The other day I <A rel="nofollow" href="http://www.wintellect.com/CS/blogs/jrobbins/archive/2010/06/02/the-secret-to-avoiding-debugger-slowdowns.aspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >wrote</SPAN></A> about using SYMCHK.EXE from the <A rel="nofollow" href="http://www.microsoft.com/whdc/devtools/debugging/default.mspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >Debugging Tools for Windows</SPAN></A> (WinDBG) install to pre-populate your symbol server cache. That prompted a question I got in email: </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  ><EM>Our test lab machines are isolated from the rest of our network and have no internet access. How can I get symbols and source over to those machines?</EM> </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >For private builds, those builds you do on your development machine, it's as simple as copying the source tree to portable storage and putting the PDB files in the same directories as the binaries. Once you copy everything onto the isolated machines, the debugger appropriately finds everything. Life gets a lot more interesting for public builds; those builds done on build machines. Also, the operating system symbols from Microsoft count as a public build machine. </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >To get all the right PDB files, you'll need to first run SYMCHK.EXE on the unconnected machine with the /om switch on all the directories you want symbols for. This will include the operating system as well as your products directories. The /om switch builds a text file of all the information necessary to download the symbols but does not download them. You'll copy that text file to a machine connected to the internet and your company's symbol server. On that machine, you'll run SYMCHK.EXE with the /im switch and pass in the text files you created on the unconnected machine. That will populate the connected machine's cache directory with all the PDB files needed on the unconnected machine. </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  ></SPAN>&nbsp;</P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  ><STRONG>具体格式为：</STRONG></SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  ><STRONG>symchk.exe /om d:\win8_32_pdb.txt /ie XXXXXX.exe<BR>symchk.exe /im d:\win8_32_pbd.txt /s srv*d:\test_pdb\*http://msdl.microsoft.com/download/symbols</STRONG></SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  ></SPAN>&nbsp;</P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >The PDB files are easy. The more interesting issue is getting the public sources. I'm assuming that everyone reading this has set up source indexing for all your builds, also known as source server, so you can debug all public builds with the right source code. If you don't know what a source server is, head over <A rel="nofollow" href="http://msdn.microsoft.com/en-us/magazine/cc163563.aspx" ><SPAN style="COLOR: blue; TEXT-DECORATION: underline;"  >here</SPAN></A> to read an article I wrote about what source server is and how to get it set up on your build server. If you're using TFS 2010 support for symbol and source servers are included in TFS build. </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >While SYMCHK.EXE makes getting the PDB files into the local cache easy, we need a similar tool that will do the same for source files. Fortunately, there is such a tool: SRCTOOL.EXE. It's in the Debugging Tools for Windows location in the SRCSRV directory. By specifying the –x switch and the PDB file you want, SRCTOOL.EXE will execute all the version control commands embedded in the PDB file and get the source for you. </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >There are two caveats with SRCTOOL.EXE. The first is that it only runs with on single PDB file at a time so if you need to grab the source files for 30 different of your DLLs, you have to run it 30 times. The second is that it doesn't put the source in your cache directory unless you specify the –d command line option. Obviously, you and I don't want to manually run SRCTOOL.EXE on each PDB file in our symbol cache so I whipped up a PowerShell script, Get-SourceServerFiles.PS1, at the bottom of this blog entry that will do the work for you. Simply pass in your cache directory and the script will do all the work as well as ensure the source files are placed in the cache directory. </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >After running SYMCHK.EXE and Get-SourceServerFiles.PS1, you'll have all the PDB files and source code in the connected machine's cache. You'll just need to copy the whole cache directory to a portable drive and take that to the unconnected machine and copy the directory to the local drive. On the unconnected machine, you'll set up the machine to use your symbol server. When you start debugging, what happens? The debuggers always look in the cache directory for symbols and source so if you have put everything in the cache, there's no network access. </SPAN></P>  <P><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  >With a little setup debugging with full source and correct call stacks on unconnected machines is now nearly as easy as debugging locally on your development computer. Go forth and debug! </SPAN></P>  <P><SPAN style="COLOR: darkgreen;"  ><SPAN style="FONT-SIZE: 10pt;"  ><SPAN style="FONT-FAMILY: Consolas;"  >#requires -version 2<BR></SPAN><SPAN style="FONT-FAMILY: Arial;"  ><BR></SPAN><SPAN style="FONT-FAMILY: Consolas;"  ># (c) 2010 by John Robbins\Wintellect – Do whatever you want to do with it<BR># as long as you give credit.<BR></SPAN></SPAN><SPAN style="COLOR: black;"  ><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial;"  ><BR></SPAN><SPAN style="COLOR: darkgreen;"  ><SPAN style="FONT-SIZE: 10pt;"  ><SPAN style="FONT-FAMILY: Consolas;"  >&lt;#.SYNOPSIS<BR>Prepopulate your symbol cache with all your Source Server extracted source code.<BR><BR>.DESCRIPTION<BR>Recurses the specified symbol cache directory for PDB files with Source Server sections<BR>and extracts the source code. This script is a simple wrapper around SRCTOOl.EXE from<BR>the Debugging Tools for Windows (AKA WinDBG). You must have SRCTOOL.EXE in the path. It<BR>is in the SRCSRV directory under the Debugging Tools for Windows installation directory.<BR></SPAN><SPAN style="FONT-FAMILY: Arial;"  ><BR></SPAN><SPAN style="FONT-FAMILY: Consolas;"  >.PARAMETER cacheDirectory<BR>The cache directory for the local machine.<BR>#&gt;<BR></SPAN><SPAN style="FONT-FAMILY: Arial;"  ><BR></SPAN><SPAN style="FONT-FAMILY: Consolas;"  >Param<SPAN style="COLOR: black;"  >(<SPAN style="COLOR: darkgray;"  >[<SPAN style="COLOR: lightblue;"  >Parameter<SPAN style="COLOR: black;"  >(Mandatory<SPAN style="COLOR: darkgray;"  >=<SPAN style="COLOR: orangered;"  >$true<SPAN style="COLOR: black;"  >)<SPAN style="COLOR: darkgray;"  >]<SPAN style="COLOR: black;"  > <SPAN style="COLOR: orangered;"  >$cacheDirectory<SPAN style="COLOR: black;"  >)<BR></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN><SPAN style="FONT-FAMILY: Arial;"  ><BR></SPAN></SPAN><SPAN style="COLOR: black;"  ><SPAN style="FONT-SIZE: 10pt;"  ><SPAN style="FONT-FAMILY: Consolas;"  >Set-StrictMode <SPAN style="COLOR: navy;"  >–version<SPAN style="COLOR: black;"  > <SPAN style="COLOR: blueviolet;"  >Latest<BR></SPAN></SPAN></SPAN></SPAN><SPAN style="FONT-FAMILY: Arial;"  ><BR></SPAN></SPAN><SPAN style="COLOR: blueviolet;"  ><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Consolas;"  ># Verify SRCTOOL.EXE is in the path.<BR>if<SPAN style="COLOR: black;"  > ((<SPAN style="COLOR: blue;"  >Get-Command<SPAN style="COLOR: black;"  > <SPAN style="COLOR: blueviolet;"  >srctool.exe<SPAN style="COLOR: black;"  > <SPAN style="COLOR: navy;"  >-ErrorAction<SPAN style="COLOR: black;"  > <SPAN style="COLOR: blueviolet;"  >SilentlyContinue<SPAN style="COLOR: black;"  >) <SPAN style="COLOR: darkgray;"  >-eq<SPAN style="COLOR: black;"  > <SPAN style="COLOR: orangered;"  >$null<SPAN style="COLOR: black;"  >)<BR>{<BR>&nbsp;&nbsp; &nbsp;throw <SPAN style="COLOR: darkred;"  >"SRCTOOL.EXE does not appear to be in the PATH."<BR>}<BR></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN><SPAN style="COLOR: black;"  ><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial;"  ><BR></SPAN><SPAN style="COLOR: darkred;"  ><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Consolas;"  ># Verify the cache directory exists.<BR>if<SPAN style="COLOR: black;"  > ((<SPAN style="COLOR: blue;"  >Test-Path<SPAN style="COLOR: black;"  > <SPAN style="COLOR: orangered;"  >$cacheDirectory<SPAN style="COLOR: black;"  >) <SPAN style="COLOR: darkgray;"  >-eq<SPAN style="COLOR: black;"  > <SPAN style="COLOR: orangered;"  >$false<SPAN style="COLOR: black;"  >)<BR>{<BR>&nbsp;&nbsp; &nbsp;throw <SPAN style="COLOR: darkred;"  >"The specified directory does not appear to exist"<BR>}<BR><BR># Get all the PDB files, execute SRCTOOL.EXE on each one.<BR>Get-ChildItem<SPAN style="COLOR: black;"  > <SPAN style="COLOR: navy;"  >-Recurse<SPAN style="COLOR: black;"  > <SPAN style="COLOR: navy;"  >-Include<SPAN style="COLOR: black;"  > <SPAN style="COLOR: blueviolet;"  >*.pdb<SPAN style="COLOR: black;"  > <SPAN style="COLOR: navy;"  >-Path<SPAN style="COLOR: black;"  > <SPAN style="COLOR: orangered;"  >$cacheDirectory<SPAN style="COLOR: black;"  > <SPAN style="COLOR: darkgray;"  >|<SPAN style="COLOR: black;"  > <SPAN style="COLOR: blue;"  >ForEach-Object<SPAN style="COLOR: black;"  > { <SPAN style="COLOR: blue;"  >SRCTOOL.EXE<SPAN style="COLOR: black;"  > <SPAN style="COLOR: navy;"  >-d:<SPAN style="COLOR: orangered;"  >$cacheDirectory<SPAN style="COLOR: black;"  > <SPAN style="COLOR: navy;"  >-x<SPAN style="COLOR: black;"  > <SPAN style="COLOR: orangered;"  >$_<SPAN style="COLOR: darkgray;"  >.<SPAN style="COLOR: black;"  >FullName }</SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 12pt; FONT-FAMILY: 宋体;"  > </SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></P>
</body></html>