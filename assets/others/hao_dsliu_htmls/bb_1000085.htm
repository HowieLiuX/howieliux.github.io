<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转] Security Features in the CRT</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转] Security Features in the CRT</h2>
<p align="right">发布时间：2013-5-6 20:16
<br>分类名称：Security Programming</p><br>
<div style="font-family: 'Segoe UI', 'Lucida Grande', Verdana, Arial, Helvetica, sans-serif; font-size: 13.333333015441895px; line-height: 11.333333015441895px;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >From：<a style="font-size: 13.333333015441895px;" rel="nofollow" href="http://msdn.microsoft.com/en-us/library/8ef0s5kh.aspx"   >http://msdn.microsoft.com/en-us/library/8ef0s5kh.aspx</a></p><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >Many old CRT functions have newer, more secure versions. If a secure function exists, the older, less secure version is marked as deprecated and the new version has the&nbsp;<span style="font-weight: 700;"   >_s</span>&nbsp;("secure") suffix.</p><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >In this context, "deprecated" just means that a function's use is not recommended; it does not indicate that the function is scheduled to be removed from the CRT.</p><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >The secure functions do not prevent or correct security errors; rather, they catch errors when they occur. They perform additional checks for error conditions, and in the case of an error, they invoke an error handler (see&nbsp;<a style="text-decoration: none; color: rgb(3, 105, 122);" rel="nofollow" href="http://msdn.microsoft.com/en-us/library/ksazx244.aspx"   >Parameter Validation</a>).</p><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >For example, the&nbsp;<span style="font-weight: 700;"   >strcpy</span>&nbsp;function has no way of telling if the string that it is copying is too big for its destination buffer. However, its secure counterpart,&nbsp;<span style="font-weight: 700;"   >strcpy_s</span>, takes the size of the buffer as a parameter, so it can determine if a buffer overrun will occur. If you use&nbsp;<span style="font-weight: 700;"   >strcpy_s</span>&nbsp;to copy eleven characters into a ten-character buffer, that is an error on your part;&nbsp;<span style="font-weight: 700;"   >strcpy_s</span>&nbsp;cannot correct your mistake, but it can detect your error and inform you by invoking the invalid parameter handler.</p></div><div style="font-family: 'Segoe UI', 'Lucida Grande', Verdana, Arial, Helvetica, sans-serif; font-size: 13.333333015441895px; line-height: 11.333333015441895px;"   ><div style="padding: 0px; font-family: 'Segoe UI Semibold', 'Segoe UI', 'Lucida Grande', Verdana, Arial, Helvetica, sans-serif; margin-top: 9px; margin-bottom: 19px;"   ><a title="Collapse" style="outline: none; text-decoration: none; color: rgb(0, 0, 0);" rel="nofollow" href=""   ><span style="border-width: 0px; vertical-align: middle; margin-bottom: 0px; float: left; margin-top: 12px; display: block; background-attachment: scroll; width: 9px; height: 12px; overflow: hidden; background-position: -421px -3px; background-repeat: no-repeat no-repeat;"   ></span><span style="padding-left: 10px; font-size: 1.769em; display: block; overflow: hidden;"   >Eliminating deprecation warnings</span></a><div style="padding-top: 0px;"   ><hr style="border-style: none; color: rgb(229, 229, 229);"   ></div></div><div style="padding-left: 15px; padding-bottom: 20px;"   ><a id="sectionToggle0" style="color: rgb(19, 100, 196);" rel="nofollow"   ></a><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >There are several ways to eliminate deprecation warnings for the older, less secure functions. The simplest is simply to define<span style="font-weight: 700;"   >_CRT_SECURE_NO_WARNINGS</span>&nbsp;or use the&nbsp;<a style="text-decoration: none; color: rgb(3, 105, 122);" rel="nofollow" href="http://msdn.microsoft.com/en-us/library/2c8f766e.aspx"   >warning</a>&nbsp;pragma. Either will disable deprecation warnings, but of course the security issues that caused the warnings still exist. It is far better to leave deprecation warnings enabled and take advantage of the new CRT security features.</p><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >In C++, the easiest way to do that is to use&nbsp;<a style="text-decoration: none; color: rgb(3, 105, 122);" rel="nofollow" href="http://msdn.microsoft.com/en-us/library/ms175759.aspx"   >Secure Template Overloads</a>, which in many cases will eliminate deprecation warnings by replacing calls to deprecated functions with calls to the new secure versions of those functions. For example, consider this deprecated call to&nbsp;<span style="font-weight: 700;"   >strcpy</span>:</p><div id="code-snippet-1"   xmlns=""   style="min-width: 260px; clear: both;"   ><div style="vertical-align: middle; height: 23px; position: relative; z-index: 1;"   ></div><div style="border: 1px solid rgb(147, 147, 147); clear: both; margin-bottom: 12px; position: relative; top: -1px;"   ><div style="width: auto; height: auto;"   ><div style="float: right; top: -8px; position: relative; width: auto; padding-left: 0px; padding-right: 0px; height: 0px; vertical-align: top;"   ></div></div><div id="CodeSnippetContainerCode_4ec0b41e-1758-405e-a5ab-ed12bb9b2fea"   dir="ltr"   style="width: auto; margin: 0px; padding: 10px 21px;"   ><div style="padding: 0px; margin: 0px;"   ><pre style="padding: 5px; margin-top: 0px; margin-bottom: 0px; font-family: Consolas, Courier, monospace; overflow: auto;"   >   char szBuf[10]; 
   strcpy(szBuf, "test"); // warning: deprecated 
</pre></div></div></div></div><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >Defining&nbsp;<span style="font-weight: 700;"   >_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES</span>&nbsp;as 1 eliminates the warning by changing the&nbsp;<span style="font-weight: 700;"   >strcpy</span>&nbsp;call to<span style="font-weight: 700;"   >strcpy_s</span>, which prevents buffer overruns. For more information, see&nbsp;<a style="text-decoration: none; color: rgb(3, 105, 122);" rel="nofollow" href="http://msdn.microsoft.com/en-us/library/ms175759.aspx"   >Secure Template Overloads</a>.</p><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >For those deprecated functions without secure template overloads, you should definitely consider manually updating your code to use the secure versions.</p><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >Another source of deprecation warnings, unrelated to security, is the POSIX functions. Replace POSIX function names with their standard equivalents (for example, change&nbsp;<a style="text-decoration: none; color: rgb(3, 105, 122);" rel="nofollow" href="http://msdn.microsoft.com/en-us/library/ms235395.aspx"   >access</a>&nbsp;to&nbsp;<a style="text-decoration: none; color: rgb(3, 105, 122);" rel="nofollow" href="http://msdn.microsoft.com/en-us/library/1w06ktdy.aspx"   >_access</a>), or disable POSIX-related deprecation warnings by defining<span style="font-weight: 700;"   >_CRT_NONSTDC_NO_WARNINGS</span>. For more information, see&nbsp;<a style="text-decoration: none; color: rgb(3, 105, 122);" rel="nofollow" href="http://msdn.microsoft.com/en-us/library/ms235384.aspx"   >Deprecated CRT Functions</a>.</p></div></div><div style="font-family: 'Segoe UI', 'Lucida Grande', Verdana, Arial, Helvetica, sans-serif; font-size: 13.333333015441895px; line-height: 11.333333015441895px;"   ><div style="padding: 0px; font-family: 'Segoe UI Semibold', 'Segoe UI', 'Lucida Grande', Verdana, Arial, Helvetica, sans-serif; margin-top: 9px; margin-bottom: 19px;"   ><a title="Collapse" style="outline: none; text-decoration: none; color: rgb(0, 0, 0);" rel="nofollow" href=""   ><span style="border-width: 0px; vertical-align: middle; margin-bottom: 0px; float: left; margin-top: 12px; display: block; background-attachment: scroll; width: 9px; height: 12px; overflow: hidden; background-position: -421px -3px; background-repeat: no-repeat no-repeat;"   ></span><span style="padding-left: 10px; font-size: 1.769em; display: block; overflow: hidden;"   >Additional Security Features</span></a><div style="padding-top: 0px;"   ><hr style="border-style: none; color: rgb(229, 229, 229);"   ></div></div><div style="padding-left: 15px; padding-bottom: 20px;"   ><a id="sectionToggle1" style="color: rgb(19, 100, 196);" rel="nofollow"   ></a><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >Some of the security features include the following:</p><ul><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   ><span style="font-weight: 700;"   >Parameter Validation</span>&nbsp;. Parameters passed to CRT functions are validated, in both secure functions and in many preexisting versions of functions. These validations include:</p><ul><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >Checking for&nbsp;<span style="font-weight: 700;"   >NULL</span>&nbsp;values passed to the functions.</p></li><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >Checking enumerated values for validity.</p></li><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >Checking that integral values are in valid ranges.</p></li></ul></li><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >For more information, see&nbsp;<a style="text-decoration: none; color: rgb(3, 105, 122);" rel="nofollow" href="http://msdn.microsoft.com/en-us/library/ksazx244.aspx"   >Parameter Validation</a>.</p></li><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   >A handler for invalid parameters is also accessible to the developer. When an encountering an invalid parameter, instead of asserting and exiting the application, the CRT provides a way to check these problems with the<a style="text-decoration: none; color: rgb(3, 105, 122);" rel="nofollow" href="http://msdn.microsoft.com/en-us/library/a9yf33zb.aspx"   >_set_invalid_parameter_handler</a>&nbsp;function.</p></li><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   ><span style="font-weight: 700;"   >Sized Buffers</span>&nbsp;. The secure functions require that the buffer size be passed to any function that writes to a buffer. The secure versions validate that the buffer is large enough before writing to it, helping to avoid dangerous buffer overrun errors that could allow malicious code to execute. These functions usually return an&nbsp;<span style="font-weight: 700;"   >errno</span>&nbsp;type of error code and invoke the invalid parameter handler if the size of the buffer is too small. Functions that read from input buffers, such as&nbsp;<span style="font-weight: 700;"   >gets</span>, have secure versions that require you to specify a maximum size.</p></li><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   ><span style="font-weight: 700;"   >Null termination</span>&nbsp;. Some functions that left potentially non-terminated strings have secure versions which ensure that strings are properly null terminated.</p></li><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   ><span style="font-weight: 700;"   >Enhanced error reporting</span>&nbsp;. The secure functions return error codes with more error information than was available with the preexisting functions. The secure functions and many of the preexisting functions now set&nbsp;<span style="font-weight: 700;"   >errno</span>&nbsp;and often return an&nbsp;<span style="font-weight: 700;"   >errno</span>&nbsp;code type as well, to provide better error reporting.</p></li><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   ><span style="font-weight: 700;"   >Filesystem security</span>&nbsp;. Secure file I/O APIs support secure file access in the default case.</p></li><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   ><span style="font-weight: 700;"   >Windows security</span>&nbsp;. Secure process APIs enforce security policies and allow ACLs to be specified.</p></li><li style="list-style-image: none;"   ><p style="color: rgb(42, 42, 42); margin-top: 0px; margin-bottom: 0px; padding-bottom: 15px; line-height: 18px;"   ><span style="font-weight: 700;"   >Format string syntax checking</span>&nbsp;. Invalid strings are detected, for example, using incorrect type field characters in<span style="font-weight: 700;"   >printf</span>&nbsp;format strings.</p></li></ul></div></div><wbr>
</body></html>