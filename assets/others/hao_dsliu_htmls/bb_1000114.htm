<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转] Debug Tutorial Part 1: Beginning Debugging Using CDB and NTSD</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转] Debug Tutorial Part 1: Beginning Debugging Using CDB and NTSD</h2>
<p align="right">发布时间：2012-9-25 17:35
<br>分类名称：Debug_Crack</p><br>
<p><span style="font-size:8pt;"  ><span style="font-family:宋体;"  >窗体顶端</span><span style="font-family:Arial;"  >    </span></span></p><p><img title="[转] Debug Tutorial Part 1: Beginning Debugging Using CDB and NTSD - Howie - Dspace"  src="pic/img7.ph.126.net_-AHkvPCNqbKcEZEEFwS0Ig==_3717440017418247277.jpg"  alt=""  /><span style="color:#ff9900; font-family:Segoe UI;"  ><span style="font-size:15pt;"  ><strong>Introduction</strong></span><span style="color:#111111; font-size:10pt;"  >    </span></span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >Debugging is one of the most valuable skill sets when it comes to software development and maintenance. This is a skill that is used at every stage of a product's life cycle. The developer first creating the project will obviously run into bugs. These bugs can be anywhere from logic bugs to syntax bugs and compiler errors. The quality assurance being conducted on the software may run into problems as more advanced scenarios are tested and the software interacts with other environments. Finally, after release of the product, it must be supported. The debugging does not end when the customer gets the software, bugs are generally escalated back to the company who will now again need to debug. </span></p><p><span style="color:#ff9900; font-family:Segoe UI; font-size:15pt;"  ><strong>What is the goal of this tutorial? </strong></span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >This tutorial is merely an introduction to debugging. This would be considered "tutorial #1" and I will write more add-ons if the feedback is good. There are a lot of complex debugging techniques and issues that it's hard to know where to start. This tutorial attempts to start at the beginning and get you acquainted with debugging. I hope to expose novices and intermediate level programmers to the world of advanced debugging. "Advanced" debugging, basically without recompiling, without doing "message box or </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >printf</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > debugging". </span></span></span></p><p><span style="color:#ff9900; font-family:Segoe UI; font-size:15pt;"  ><strong>Debuggers and Operating Systems </strong></span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >To download the latest debuggers from Microsoft, visit <a target="_blank" rel="nofollow" href="http://www.microsoft.com/whdc/ddk/debugging/default.mspx"  ><span style="color:#005782;"  >here</span></a>. </span></p><p><span style="color:#666666; font-family:Segoe UI; font-size:13pt;"  >CDB, NTSD and Windbg </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >This article will generally talk about Windows 2000 and higher Operating Systems. The three debuggers that we will talk about here are CDB, NTSD and WinDbg. Windows 2000 and higher systems generally have NTSD already installed on the system! This is a big bonus as you do not need to install any extra software for quick debugging. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >So what's the difference? The documentation says "NTSD does not need a console window and CDB does". That is true. NTSD does not need a console window in order to run, while CDB does. However, I have found that there are a lot more differences. The first is that older NTSDs do not support PDB symbol files, they only support DBG! I also found that NTSD does not support the symbol server, while CDB does. Older NTSDs could not create a memory dump and I've also found other problems such as NTSD only supports up to 2 breakpoint commands. There is one advantage that NTSD has now that CDB does not. The ability to not have a console window. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >The ability to not have a console window is vital when you are debugging a user-mode service or process before anyone has logged onto the system. If no one has logged onto the system, you cannot create a console window. There is a command line option, -d, which specifies for NTSD to communicate with the attached kernel debugger (CDB has the same option). This can be used on processes during startup to debug them through the kernel debugger. While you can debug a process using the kernel debugger already, this gives you the flexibility to debug the process using the user-mode debugger. This is outside the scope of this current introduction article, just digest the concept for now. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >WinDbg and CDB are basically the same with some few exceptions. The first is that WinDbg is a GUI and CDB is a console application. WinDbg also supports kernel debugging and source level debugging. </span></p><p><span style="color:#666666; font-family:Segoe UI; font-size:13pt;"  >Visual C++ Debugger </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >I do not use this debugger and I would not recommend using it. The reasons are that this debugger is firstly a resource hog. It's slow loading and contains more than just debugging tools which makes it cumbersome. The second reason is generally, you need to reboot after you install this debugger. I generally work off the principal that the machine running or testing the software may not already have a debugger installed. VC++ is also a large, time consuming installation. </span></p><p><span style="color:#666666; font-family:Segoe UI; font-size:13pt;"  >Windows 9x/ME </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >What can we do on Windows 9x/ME? Well, you can actually use WinDbg. The debug APIs are the same for all systems, so it has been long known to me that WinDbg should just "work" on Windows 9x/ME. My only concerns were if WinDbg attempted to detect it was on Windows 9x and not allow debugging. I recently found this to be untrue. The only problem is that the latest WinDbg installs are MSI packages that do not natively install on Windows 9x. This can be solved simply by installing them on an NT based machine and sharing the directory or even putting it on a CD. This obviously has other side effects though, such as do not think you can use all the !xxx commands as NT and 9x place their data in different memory locations. Do symbols work? Yes, PDBs work. I did find stepping through code after setting a <em>ba r1 xxxxx</em> was very slow though. This article does not cover Windows 9x/ME. </span></p><p><span style="color:#ff9900; font-family:Segoe UI; font-size:15pt;"  ><strong>Setting Up Your Environment </strong></span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >This is a very important step before you start debugging or successfully set up your debug environment. The system needs to be configured to your liking and contain all the tools you need. </span></p><p><span style="color:#666666; font-family:Segoe UI; font-size:13pt;"  >Symbols and the Symbol Server </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >Symbols are an important part of any debug operation. Microsoft contains a location where you can download all the symbols for any particular Operating System (Windows XP, etc.). The problem is, you need to have a lot of hard disk space and if you debug many Operating Systems on one machine (from crash dumps, etc.), then this is cumbersome. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >To accommodate this need to debug many Operating Systems, Microsoft supports a "symbol server". This will help you to get the correct symbols onto your system. The symbol server is located <a target="_blank" rel="nofollow" href="http://msdl.microsoft.com/download/symbols"  ><span style="color:#005782;"  >here</span></a>. If you set your symbol path to this location, your debugger will automatically download the system symbols that you need. The symbols that you need for your application are up to you. </span></p><p><span style="color:#666666; font-family:Segoe UI; font-size:13pt;"  >Image File Execution Options </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >There is a location in the registry that will automatically attach a debugger to an application when it starts to run. This registry location is the following: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >     NT\CurrentVersion\Image File Execution Options </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >Under this registry key, you simply create a new registry key with the name of the process you want to debug, such as "myapplication.exe". If you have not used this before, there is probably a default key already created called "Your Application Here" or something similar. You can rename that key and use it if you like. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >One of the values on this key is "Debugger". This should point to the debugger you want to start when this application is run. The default for "Your Application Here" is "ntsd -d". You cannot use this unless you have a kernel debugger attached so I would remove the "-d" part. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  ><strong>Note</strong>: Keeping "-d" and not having a kernel debugger attached could result in locking up of your system every time that application is run! Be careful. If you have a kernel debugger setup, you can unlock the system by hitting "g". </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >There is another value that may be there called "GlobalFlags". This is another tool that can be used for debugging, however it is outside the scope of this article. For more information on that, look up "gflags.exe". </span></p><p><span style="color:#666666; font-family:Segoe UI; font-size:13pt;"  >Kernel Debugging Equipment </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >In order to kernel debug, you first need to boot the Operating System in debug mode. Although there is a GUI under <em>system properties</em> to do this, I generally edit the <em>boot.ini</em> directly. Locate the <em>boot.ini</em> on the root of your <em>C:\</em> drive. It is most likely a hidden system file. I would attrib <em>-r -s -h boot.ini</em> and then open it for edit. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  ><strong>Caution</strong>: Editing this file incorrectly can prevent you from ever booting again! </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >The boot file may look like this: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[boot loader] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >timeout=30 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >default=multi(0)disk(0)rdisk(0)partition(1)\WINDOWS </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[operating systems] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >multi(0)disk(0)rdisk(0)partition(1)\WINDOWS.0= </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >    "Microsoft Windows XP Professional" /fastdetect </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >I would duplicate the first line under "Operating Systems": </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[boot loader] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >timeout=30 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >default=multi(0)disk(0)rdisk(0)partition(1)\WINDOWS </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[operating systems] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >multi(0)disk(0)rdisk(0)partition(1)\WINDOWS.0= </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >    "Microsoft Windows XP Professional" /fastdetect </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >multi(0)disk(0)rdisk(0)partition(1)\WINDOWS.0= </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >   "Microsoft Windows XP Professional"  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >   /fastdetect /debug /debugport=COM1 /baudrate=115200 </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >The duplicated line can then contain your setup. <em>/debug</em>, then <em>/debugport=port</em> and finally <em>/baudrate=baudrate</em>. The debug port to use is the port of that machine where you would hook up your SERIAL NULL MODEM CABLE. This is a piece of hardware that you need. You will also need another machine. Aside from using the COM ports, you can use firewire which is a lot faster. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >Next time you boot, just select the "Debugger Enabled" selection in order to boot in debug mode. </span></p><p><span style="color:#666666; font-family:Segoe UI; font-size:13pt;"  >Environment Variables </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >I would generally setup </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >_NT_SYMBOL_PATH</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > to point to the Microsoft Symbol server and the local directory that contains your symbol information. To set this environment path, go to System Properties -&gt; Advanced -&gt; Environment Variables. </span></span></span></p><p><span style="color:#666666; font-family:Segoe UI; font-size:13pt;"  >Default Debugger </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >This is the default debugger that will be used when any crash happens on the system. By default, it's generally set to "Doctor Watson". That program is not worth mentioning here. The registry key is this location: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AeDebug </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >I would set "Auto" to 1 and "Debugger" to your debugger. </span></p><p><span style="color:#ff9900; font-family:Segoe UI; font-size:15pt;"  ><strong>Assembly </strong></span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >I highly recommend that you learn assembly programming. These tutorials will not show source level debugging as I never do it and I don't even know how! The problems with source level debugging is that the source is not always available as well as sometimes the problem is not seen when just looking at the source, but rather in the generated code. It also makes walking the system much easier. If you understand how the environment was setup, you can easily reverse the system to finding out the information you need to know and it may not always be available using Source Level debugging. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >The other thing I hate about source level debugging is that if the source does not match the symbols, the source debugger will not show you the correct information. This means that if you create multiple builds of your program or change your program after you've built, you better be able to find the source that matches the build you're debugging! </span></p><p><span style="color:#ff9900; font-family:Segoe UI; font-size:15pt;"  ><strong>Let's Get Started </strong></span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >This tutorial is basically Part One and if it's liked, I will write more, each getting more and more advanced. This first tutorial will walk through a couple of simple scenarios of user-mode programming problems. </span></p><p><span style="color:#666666; font-family:Segoe UI; font-size:13pt;"  >Symbols For Release Executables </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >First, how do you create symbols for "release" binaries? That's simple. You create a <em>make</em> file that properly rebases the binaries. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >The options I generally would use for <em>cl.exe</em> would be: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >/nologo /MD /W3 /Oxs /Zi /I "..\..\inc" /D "WIN32" /D "_WINDOWS"  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >/Fr$(OBJDIR)\\ /Fo$(OBJDIR)\\ /Fd$(OBJDIR)\\ /c </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >The options I generally would use for <em>link.exe</em> would be: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >/nologo /subsystem:console  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  /out:$(TARGETDIR)\$(TARGET)/pdb:&lt;YourProjectName&gt;.pdb  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  /debug /debugtype:both  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >/LIBPATH:"..\..\..\bin\lib" </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >This will create the <em>.PDB</em> for your project. Of course, with the introduction of VC++ 7, they have gotten rid of <em>.DBG</em>s (so <em>/debugtype:both</em> may error on this compiler). <em>.DBG</em> is a smaller version of the <em>.PDB</em> and it does not contain source information, strictly symbol look ups. It does not even contain the parameters or anything. If you're using a compiler that can still generate them, here's what you do: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >rebase -b 0x00100000 -x $(TARGETDIR) -a $(TARGETDIR)\$(TARGET) </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >The <em>-b</em> is the new memory location to rebase the executable to. However, this will strip the debug symbols from the release executable making it smaller in size. If you build an executable the default Visual Studio method, it may be a tiny bit smaller than this executable. However, you do not have symbols. The generated code is the same and just as optimized using the optimization flags you specify. The difference is that these binaries are now more useful, as no matter where they go or who uses them where, you can still get symbols! </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  ><em>Remember, the best debugging always occurs if you do not have to rebuild the executable</em>. Once you have to rebuild the executable, you must also know that you've now changed the memory foot print of the executable. You may also have changed the speed of the executable. This is critical since you now have to reproduce the problem using this binary! What if it took 4 days to cause this problem? It would be best to be able to debug it as much as possible on the spot. </span></p><p><span style="color:#666666; font-family:Segoe UI; font-size:13pt;"  >Simple Access Violation Trap </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >Let's walk through a simple problem. Your program crashes with "Access Violation", this is not uncommon! This is probably the most frequent problem that occurs when running an executable. There are three steps to help solving this problem. </span></p><ol><li><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >Who is attempting to do the access? What module?  </span></li><li><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  ><em>What is it attempting to access? Where did the memory come from?</em>    </span></li><li><div><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >Why is it attempting to access it? What does it want to do with it?  </span></div><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >These are general guidelines to solving this problem. I put #2 in italics as it is probably the most important of the three. However, solving 1 and 3 can also help determine #2 if it is not immediately apparent. </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >I have created a very simple program that crashes. I have setup my default debugger to be CDB and I have now just run the program. I have also created symbols for this executable as well as set the </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >_NT_SYMBOL_PATH</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > to the Microsoft symbol server. </span></span></span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >As we can see, this is what happens when we run the program: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >C:\programs\DirectX\Games\src\Games\temp\bin&gt;temp </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Microsoft (R) Windows Debugger  Version 6.3.0005.1 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Copyright (c) Microsoft Corporation. All rights reserved. </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >*** wait with pending attach </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Symbol search path is:  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  SRV*c:\symbols*http://msdl.microsoft.com/download/symbols </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Executable search path is: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 00400000 00404000   C:\programs\DirectX\Games\src\Games\temp\bin\temp.e </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >xe </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 77f50000 77ff7000   C:\WINDOWS.0\System32\ntdll.dll </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 77e60000 77f46000   C:\WINDOWS.0\system32\kernel32.dll </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 77c10000 77c63000   C:\WINDOWS.0\system32\MSVCRT.dll </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 77dd0000 77e5d000   C:\WINDOWS.0\system32\ADVAPI32.DLL </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 78000000 78086000   C:\WINDOWS.0\system32\RPCRT4.dll </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >(ee8.c38): Access violation - code c0000005 (!!! second chance !!!) </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=00000000 ebx=7ffdf000 ecx=00001000 edx=00320608 esi=77c5aca0 edi=77f944a8 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=77c3f10b esp=0012fb0c ebp=0012fd60 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >MSVCRT!_output+0x18: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f10b 8a18             mov     bl,[eax]                ds:0023:00000000=?? </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >What is the first thing we notice? This trap occurred in <em>MSVCRT.DLL</em>. This is apparent because the debugger generally displays this information using <em>&lt;module&gt;!&lt;nearest symbol&gt;+offset</em>. This means the closest symbol in <em>MSVCRT.DLL</em> is </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >_output</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > and we are +18h bytes into it. Given that this is such a small offset and providing that the symbols are correct (even symbols can be incorrect, but that's a later tutorial), we can assume that we are in </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >_output()</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > function of MSVCRT. </span></span></span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >(ee8.c38): Access violation - code c0000005 (!!! second chance !!!) </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=00000000 ebx=7ffdf000 ecx=00001000 edx=00320608 esi=77c5aca0 edi=77f944a8 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=77c3f10b esp=0012fb0c ebp=0012fd60 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>MSVCRT</strong>!_output+0x18: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f10b 8a18             mov     bl,[eax]                ds:0023:00000000=?? </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >If we wanted to prove this, what could we do? </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >&lt;0:000&gt; <strong>x *!</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >start    end        module name </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00400000 00404000   temp         (deferred) </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c10000 77c63000   MSVCRT       (pdb symbols)   </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >                                 c:\symbols\msvcrt.pdb\3D6DD5921\msvcrt.pdb </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77dd0000 77e5d000   ADVAPI32     (deferred) </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77e60000 77f46000   kernel32     (deferred) </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77f50000 77ff7000   ntdll        (deferred) </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >78000000 78086000   RPCRT4       (deferred) </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >This command will give us a list of all the modules in the process with their beginning and ending memory locations. Our trap is at 77c3f10b, which is 77c10000 &lt;= 77c3f10b &lt;= 77c63000, so we are definitely trapped in MSVCRT. The next thing to do is find out where this memory came from. </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >There are a few methods of doing this, we could un-assemble the code and attempt to find out where the memory came from. We could also get a stack trace and figure out who's on the stack. Let's first attempt to disassemble the </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >_output</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > function to see where the memory came from. </span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; u MSVCRT!_output </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >MSVCRT!_output: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>77c3f0f3 55               push    ebp</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>77c3f0f4 8bec             mov     ebp,esp</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f0f6 81ec50020000     sub     esp,0x250 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f0fc 33c0             xor     eax,eax </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f0fe 8945d8           mov     [ebp-0x28],eax </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f101 8945f0           mov     [ebp-0x10],eax </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f104 8945ec           mov     [ebp-0x14],eax </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>77c3f107 8b450c           mov     eax,[ebp+0xc]</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; u </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >MSVCRT!_output+0x17: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f10a 53               push    ebx </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>77c3f10b 8a18             mov     bl,[eax]</strong>     </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >I have highlighted all the important instructions to look at. Even if you do not know assembly, you will want to hear this out for what it is. First, we notice that the memory is coming from </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EAX</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >. It's a register in the CPU, but we can just consider it a variable. The </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >[]</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >s around </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EAX</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > is the same as doing </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >*MyPointer</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > in C. This means we are referencing the memory pointed to by </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EAX</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >. Where did </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EAX</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > come from? </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EAX</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > came from [</span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EBP + 0Ch</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >], which you could think of as "</span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >DWORD *EBP EAX = EBP[3];</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >". This is because in assembly, there are no types. </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EAX</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > is a 32 bit (</span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >DWORD</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >) register. Dereferencing the </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >DWORD</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > at </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EBP</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > + 12 is the same in C as adding 3 to a </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >DWORD</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > pointer (or 12 to a byte pointer then typecasting to a </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >DWORD</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >). </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >The next thing to look at is </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >MOV EBP, ESP</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >. </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >ESP</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > is the STACK POINTER. As you should know, parameters (pending calling convention and optimizations) are pushed on the stack, return addresses are pushed on the stack and local variables are on the stack. </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >ESP</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > points to the stack! In memory, a function call would look like this for the C calling convention: </span></span></span></span></span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Parameter n] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >... </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Parameter 2] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Parameter 1] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Return Address] </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >Now, we see </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >PUSH EBP</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >. </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >PUSH</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > means put something on the stack. So, we are saving </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EBP</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >'s previous value on the stack. So, our stack looks like this now: </span></span></span></span></span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Parameter n] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >... </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Parameter 2] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Parameter 1] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Return Address] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Previous EBP] </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >Now that we have set </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EBP</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > to </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >ESP</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >, we can treat it just like a pointer and the stack is just an array of </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >DWORD</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > values! So, here's the offsets of </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EBP</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > and where they point: </span></span></span></span></span></span></span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Parameter n]     ==  [EBP + n*4 + 4] (The formula) </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >... </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Parameter 2]     ==  [EBP + 12] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Parameter 1]     ==  [EBP + 8] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Return Address]  ==  [EBP + 4] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >[Previous EBP]    ==  [EBP + 0] </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >This being the case, we know that our variable came from the second parameter of </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >_output</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >. So, now what? Let's un-assemble the calling function! We know that </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EBP</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > + 4 points to the return address, or we could try to just get a stack trace. </span></span></span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; <strong>kb</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ChildEBP RetAddr  Args to Child </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012fd60 77c3e68d 77c5aca0 00000000 0012fdb0 MSVCRT!_output+0x18 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>0012fda4 0040102f 00000000 00000000 00403010 MSVCRT!printf+0x35</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012ff4c 00401125 00000001 00323d70 00322ca8 temp!main+0x2f </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012ffc0 77e814c7 77f944a8 00000007 7ffdf000 temp!mainCRTStartup+0xe3 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012fff0 00000000 00401042 00000000 78746341 kernel32!BaseProcessStart+0x23 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >"KB" is one of the commands to do this. Now, we may not always get a full stack trace, however, this too is for a more advanced tutorial. In this simple tutorial, we will assume we got the full stack trace. We notice, this is a </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >printf</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > function call or it looks that way. As we notice, </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >printf</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > called </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >_output</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >. Let's un-assemble </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >printf</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >. Please note that we may not always want to disassemble the entire function and we may use discession. Sometimes, we can find out the trap just from doing a stack trace (I will go over this in this simple context at the end). These are small functions though and we may be able to trace them simply. </span></span></span></span></span></span></span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; u MSVCRT!_output </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >MSVCRT!_output: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>77c3f0f3 55               push    ebp</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>77c3f0f4 8bec             mov     ebp,esp</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f0f6 81ec50020000     sub     esp,0x250 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f0fc 33c0             xor     eax,eax </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f0fe 8945d8           mov     [ebp-0x28],eax </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f101 8945f0           mov     [ebp-0x10],eax </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f104 8945ec           mov     [ebp-0x14],eax </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f107 8b450c           mov     eax,[ebp+0xc] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; u </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >MSVCRT!_output+0x17: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f10a 53               push    ebx </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f10b 8a18             mov     bl,[eax] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f10d 33c9             xor     ecx,ecx </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f10f 84db             test    bl,bl </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f111 0f8445070000     je      MSVCRT!_output+0x769 (77c3 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f117 56               push    esi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f118 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f119 8bf8             mov     edi,eax </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; u MSVCRT!printf </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >MSVCRT!printf: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e658 6a10             push    0x10 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e65a 68e046c177       push    0x77c146e0 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e65f e8606effff       call    MSVCRT!_SEH_prolog (77c354 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e664 bea0acc577       mov     esi,0x77c5aca0 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e669 56               push    esi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e66a 6a01             push    0x1 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e66c e8bdadffff       call    MSVCRT!_lock_file2 (77c394 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e671 59               pop     ecx </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; u </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >MSVCRT!printf+0x1a: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e672 59               pop     ecx </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e673 8365fc00         and     dword ptr [ebp-0x4],0x0 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e677 56               push    esi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e678 e8c7140000       call    MSVCRT!_stbuf (77c3fb44) </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e67d 8945e4           mov     [ebp-0x1c],eax </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e680 8d450c           lea     eax,[ebp+0xc] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e683 50               push    eax </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>77c3e684 ff7508           push    dword ptr [ebp+0x8]</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; u </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >MSVCRT!printf+0x2f: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e687 56               push    esi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3e688 e8660a0000       call    MSVCRT!_output (77c3f0f3) </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >This is simple. We notice that the second parameter to </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >_output</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > is [</span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EBP</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > + 8]. We now notice that </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >PUSH EBP</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > and </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >MOV EBP, ESP</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > are there and thus the stack is setup the same way I mentioned previously. This is <strong>*not</strong>              <strong>always*</strong> the case, but we are starting out slowly here. </span></span></span></span></span></span></span></span></span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >Thus, we can determine that the first parameter to </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >printf()</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > is where the memory came from. And, as luck would have it, </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >printf()</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > was called from our program! From the trap information, we know that </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EAX</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > was 0, so we were trying to dereference a </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >NULL</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > pointer. </span></span></span></span></span></span></span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77c3f10b 8a18    mov bl,[eax]   ds:0023:00000000=?? </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >This was the code used: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  > int main(int argc, char *argv[]) </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  > {   </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  char *TheLastParameter[100]; </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  sprintf(*TheLastParameter, "The last parameter is %s", argv[argc]); </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  printf(*TheLastParameter); </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  return 0; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  > } </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >You can notice a lot of problems with it! However, the </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >printf</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > is what trapped since it was </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >NULL</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >. </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >*TheLastParameter</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > is </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >NULL</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >. Surprisingly it didn't trap on </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >sprintf()</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >. So, how would we have solved this just with <em>KB</em>? Look at this trace: </span></span></span></span></span></span></span></span></span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; <strong>kb</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ChildEBP RetAddr  Args to Child </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012fd60 77c3e68d 77c5aca0 00000000 0012fdb0 MSVCRT!_output+0x18 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>0012fda4 0040102f <em>00000000</em> 00000000 00403010 MSVCRT!printf+0x35 </strong></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>0012ff4c 00401125 00000001 00323d70 00322ca8 temp!main+0x2f</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012ffc0 77e814c7 77f944a8 00000007 7ffdf000 temp!mainCRTStartup+0xe3 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012fff0 00000000 00401042 00000000 78746341 kernel32!BaseProcessStart+0x23 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >We had symbols and we had the stack trace. The italics is the first parameter. It's 0. We also know that we called it. This is a very simple scenario though and I tried to portray some of the techniques that could be used to back trace to the location of a problem. Learn the stack. Knowing how the stack is setup and what memory is on the stack can be vital to finding and tracing where data came from. You will not always be that lucky to find where all information can be found with just doing "kb". </span></p><p><span style="color:#666666; font-family:Segoe UI; font-size:13pt;"  >Program Not Working As Expected </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >This is a popular error. You run the program and you don't see the correct output or the program keeps giving you an error message. The file you want to create is not being created, etc. This is a very common problem that can be easy to complex to solve. What are some of the first steps you would take to debug this? </span></p></li><li><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >What is not working?  </span></li><li><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >What APIs or modules would this revolve around?  </span></li><li><div><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >What would cause those APIs to not function properly?  </span></div><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >These are some steps, though they are not general. Let's say you have a program that attempts to create a file in Windows. The file is not created though. Let's look at some code: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  HANDLE hFile; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  DWORD dwWritten; </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  hFile = CreateFile("c:\MyFile.txt", GENERIC_READ,  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >                       0, NULL, OPEN_EXISTING, 0, NULL); </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >   </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  { </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >   WriteFile(hFile, "Test", strlen("Test"), &amp;dwWritten, NULL); </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >   CloseHandle(hFile); </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  } </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >This is your code. Generally, you would want to recompile with perhaps </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >GetLastError()</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > and print it out. However, you do not have to do that. Although in this case it may be simple to, if you're stepping through code and a function fails, wouldn't you want to know what happened on the spot? Let's try to debug this. First, we'll start the debugger and break on our function. Since we have symbols, this is easy. If we didn't, we could just break on </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >CreateFile</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > as it is an exported symbol and would always be available. </span></span></span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >C:\programs\DirectX\Games\src\Games\temp\bin&gt;cdb temp </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Microsoft (R) Windows Debugger  Version 6.3.0005.1 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Copyright (c) Microsoft Corporation. All rights reserved. </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >CommandLine: temp </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Symbol search path is:  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >    SRV*c:\symbols*http://msdl.microsoft.com/download/symbols </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Executable search path is: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 00400000 00404000   temp.exe </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 77f50000 77ff7000   ntdll.dll </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 77e60000 77f46000   C:\WINDOWS.0\system32\kernel32.dll </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 77c10000 77c63000   C:\WINDOWS.0\system32\MSVCRT.dll </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >(2a0.94): Break instruction exception - code 80000003 (first chance) </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=00241eb4 ebx=7ffdf000 ecx=00000004 edx=77f51310 esi=00241eb4 edi=00241f48 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=77f75a58 esp=0012fb38 ebp=0012fc2c iopl=0         nv up ei pl nz na pe nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ntdll!DbgBreakPoint: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77f75a58 cc               int     3 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; bp temp!main </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; g </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >We set a break point on our </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >main()</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > function and hit "go". We get the break point and we use "p" to step instruction by instruction to our </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >CreateFile</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > function. </span></span></span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Breakpoint 0 hit </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401000 esp=0012ff50 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401000 51               push    ecx </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; p </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401001 esp=0012ff4c ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x1: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401001 56               push    esi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401002 esp=0012ff48 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x2: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401002 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401003 esp=0012ff44 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x3: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401003 33ff             xor     edi,edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401005 esp=0012ff44 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x5: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401005 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401006 esp=0012ff40 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x6: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401006 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401007 esp=0012ff3c ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x7: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401007 6a03             push    0x3 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401009 esp=0012ff38 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x9: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401009 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=0040100a esp=0012ff34 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0xa: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0040100a 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=0040100b esp=0012ff30 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0xb: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0040100b 6800000080       push    0x80000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401010 esp=0012ff2c ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x10: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401010 6810304000       push    0x403010 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401015 esp=0012ff28 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x15: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401015 ff1504204000 call dword ptr [temp!_imp__CreateFileA (00402004)]{kernel3 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >2!CreateFileA (77e7b476)} </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >After we call </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >CreateFile</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >, </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EAX</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > will have the return value. We notice it's ffffffff or "Invalid Handle Value". We want to know the </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >GetLastError</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >. This is stored at fs:34. </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >FS</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > is the TEB selector, so we can dump it. </span></span></span></span></span></span></span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; dd fs:34 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0038:00000034  00000002 00000000 00000000 00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0038:00000044  00000000 00000000 00000000 00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0038:00000054  00000000 00000000 00000000 00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0038:00000064  00000000 00000000 00000000 00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0038:00000074  00000000 00000000 00000000 00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0038:00000084  00000000 00000000 00000000 00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0038:00000094  00000000 00000000 00000000 00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0038:000000a4  00000000 00000000 00000000 00000000 </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >CDB also has a quicker way to do it, !gle: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; !gle </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >LastErrorValue: (Win32) 0x2 (2) - The system cannot find the file specified. </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >LastStatusValue: (NTSTATUS) 0xc0000034 - Object Name not found. </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >So, the file cannot be found. But, the file is there! So what's the problem? We need to debug this further. One thing we could look at is what parameter was passed into </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >CreateFile</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >. </span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401010 esp=0012ff2c ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x10: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401010 6810304000       push    <strong>0x403010</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401015 esp=0012ff28 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x15: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401015 ff1504204000 call dword ptr [temp!_imp__CreateFileA  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >   (00402004)]{kernel32!CreateFileA (77e7b476)} </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >Luckily, it's a constant so the memory will still be around. It would still be around even if it wasn't though since we didn't step too far away from the return of </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >CreateFile</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >. </span></span></span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >We can then use "da", "dc" or "du". "da" is dump ANSI string, "du" is dump Unicode string and "dc" is similar to "dd" except it dumps all characters, even unprintable ones. Since we know it's an ANSI string, just use <em>da</em>. </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; da 403010 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00403010  "c:MyFile.txt" </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >That's wrong! We need to use<em> C:\\MyFile.txt</em> to get it to work with the <em>C:\</em>! </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >So, we fix this. But wait, it still won't write! We need to debug this further. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >We do the same thing again. </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >C:\programs\DirectX\Games\src\Games\temp\bin&gt;cdb temp </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Microsoft (R) Windows Debugger  Version 6.3.0005.1 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Copyright (c) Microsoft Corporation. All rights reserved. </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >CommandLine: temp </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Symbol search path is:  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >  SRV*c:\symbols*http://msdl.microsoft.com/download/symbols </span></p><p style="background: #fbedbb;"  > &nbsp;</p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Executable search path is: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 00400000 00404000   temp.exe </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 77f50000 77ff7000   ntdll.dll </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 77e60000 77f46000   C:\WINDOWS.0\system32\kernel32.dll </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ModLoad: 77c10000 77c63000   C:\WINDOWS.0\system32\MSVCRT.dll </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >(80c.c94): Break instruction exception - code 80000003 (first chance) </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=00241eb4 ebx=7ffdf000 ecx=00000004 edx=77f51310 esi=00241eb4 edi=00241f48 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=77f75a58 esp=0012fb38 ebp=0012fc2c iopl=0         nv up ei pl nz na pe nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >ntdll!DbgBreakPoint: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >77f75a58 cc               int     3 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; bp temp!main </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; g </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >Breakpoint 0 hit </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401000 esp=0012ff50 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401000 51               push    ecx </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; p </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401001 esp=0012ff4c ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x1: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401001 56               push    esi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401002 esp=0012ff48 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x2: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401002 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401003 esp=0012ff44 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x3: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401003 33ff             xor     edi,edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401005 esp=0012ff44 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x5: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401005 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401006 esp=0012ff40 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x6: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401006 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401007 esp=0012ff3c ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x7: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401007 6a03             push    0x3 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401009 esp=0012ff38 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x9: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401009 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=0040100a esp=0012ff34 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0xa: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0040100a 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=0040100b esp=0012ff30 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0xb: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0040100b 6800000080       push    0x80000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401010 esp=0012ff2c ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x10: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401010 6810304000       push    0x403010 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=77c5c9e4 ebx=7ffdf000 ecx=00322cf8 edx=00322cf8 esi=00000000 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401015 esp=0012ff28 ebp=0012ffc0 iopl=0         nv up ei pl zr na po nc </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x15: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401015 ff1504204000 call dword ptr [temp!_imp__CreateFileA (00402004)]{kernel3 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >2!CreateFileA (77e7b476)} </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >We get here and we notice that </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EAX</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > is a valid handle and not invalid handle value! Let's continue. </span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=000007e8 ebx=7ffdf000 ecx=77f59037 edx=00140608 esi=000007e8 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=0040101d esp=0012ff44 ebp=0012ffc0 iopl=0         nv up ei ng nz ac pe cy </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000293 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x1d: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0040101d 83feff           cmp     esi,0xffffffff </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=000007e8 ebx=7ffdf000 ecx=77f59037 edx=00140608 esi=000007e8 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401020 esp=0012ff44 ebp=0012ffc0 iopl=0         nv up ei pl nz ac pe cy </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000213 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x20: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401020 741b             jz      temp!main+0x3d (0040103d)            [br=0] </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=000007e8 ebx=7ffdf000 ecx=77f59037 edx=00140608 esi=000007e8 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401022 esp=0012ff44 ebp=0012ffc0 iopl=0         nv up ei pl nz ac pe cy </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000213 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x22: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401022 8d442408         lea     eax,[esp+0x8]     ss:0023:0012ff4c=00322cf8 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=0012ff4c ebx=7ffdf000 ecx=77f59037 edx=00140608 esi=000007e8 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401026 esp=0012ff44 ebp=0012ffc0 iopl=0         nv up ei pl nz ac pe cy </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000213 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x26: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401026 57               push    edi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>eax=0012ff4c</strong> ebx=7ffdf000 ecx=77f59037 edx=00140608 esi=000007e8 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401027 esp=0012ff40 ebp=0012ffc0 iopl=0         nv up ei pl nz ac pe cy </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000213 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x27: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>00401027 50               push    eax</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=0012ff4c ebx=7ffdf000 ecx=77f59037 edx=00140608 esi=000007e8 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401028 esp=0012ff3c ebp=0012ffc0 iopl=0         nv up ei pl nz ac pe cy </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000213 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x28: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>00401028 6a04             push    0x4</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=0012ff4c ebx=7ffdf000 ecx=77f59037 edx=00140608 esi=000007e8 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=0040102a esp=0012ff38 ebp=0012ffc0 iopl=0         nv up ei pl nz ac pe cy </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000213 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x2a: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>0040102a 6820304000       push    0x403020</strong>     </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=0012ff4c ebx=7ffdf000 ecx=77f59037 edx=00140608 esi=000007e8 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=0040102f esp=0012ff34 ebp=0012ffc0 iopl=0         nv up ei pl nz ac pe cy </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000213 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x2f: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0040102f 56               push    esi </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eax=0012ff4c ebx=7ffdf000 ecx=77f59037 edx=00140608 esi=000007e8 edi=00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >eip=00401030 esp=0012ff30 ebp=0012ffc0 iopl=0         nv up ei pl nz ac pe cy </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000213 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >temp!main+0x30: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00401030 ff1500204000 call dword ptr [temp!_imp__WriteFile (00402000)]{kernel32! </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >WriteFile (77e7f13a)} </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >We've just called </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >WriteFile</span><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  > and </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >EAX</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  > == 0. That means false! Let's check the other variables. </span></span></span></span></span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >The second parameter is right and its length is 4: </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; da 403020 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >00403020  "Test" </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >The fourth parameter in bold back there, it's a pointer to the number of bytes written. It's 0. </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; dd 012ff4c </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  ><strong>0012ff4c  00000000</strong> 00401139 00000001 00322470 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012ff5c  00322cf8 00403000 00403004 0012ffa4 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012ff6c  0012ff94 0012ffa0 00000000 0012ff98 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012ff7c  00403008 0040300c 00000000 00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012ff8c  7ffdf000 00000001 00322470 00000000 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012ff9c  8053476f 00322cf8 00000001 0012ff84 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012ffac  e1176590 0012ffe0 00401200 004020c0 </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0012ffbc  00000000 0012fff0 77e814c7 00000000 </span></p><p><span style="color:#111111;"  ><span style="font-family:Segoe UI; font-size:10pt;"  >Well, let's check </span><span style="color:#990000;"  ><span style="font-family:Consolas;"  >GetLastError</span><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >. </span></span></span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; !gle </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >LastErrorValue: (Win32) 0x5 (5) - Access is denied. </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >LastStatusValue: (NTSTATUS) 0xc0000022 - {Access Denied}   </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >              A process has requested access to an object,  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >              but has not been granted those access rights. </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >0:000&gt; </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >Access denied? What could cause that! Let's check, wait, we opened the file for READ access only! We didn't open the file for write access! So, we can easily fix this problem and move onto our next project! </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >hFile = CreateFile("c:\\MyFile.txt", GENERIC_READ,  </span></p><p style="background: #fbedbb;"  ><span style="color:black; font-family:Consolas; font-size:9pt;"  >        0, NULL, OPEN_EXISTING, 0, NULL); </span></p><p><span style="color:#ff9900; font-family:Segoe UI; font-size:15pt;"  ><strong>Conclusion </strong></span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >In summary, this is just an introduction to some very basic debugging techniques. The examples were simple but you must take their value for the techniques they displayed. This is just the first installment of this debugging tutorial. Hopefully, if there is interest, I may add more tutorials getting more advanced. </span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >To some, this tutorial may be simple, to others too advanced. You will not become a good debugger overnight, it takes practice. I would suggest attempting to use the debugger even on the simplest of problems, to solve them. The more you practice, the better you get. I guarantee, the more you fool around with the tools, the more you will learn. </span></p><p><span style="color:#ff9900; font-family:Segoe UI; font-size:15pt;"  ><strong>License </strong></span></p><p><span style="color:#111111; font-family:Segoe UI; font-size:10pt;"  >This article has no explicit license attached to it but may contain usage terms in the article text or the download files themselves. If in doubt please contact the author via the discussion board below. </span></p><p><span style="font-size:8pt;"  ><span style="font-family:宋体;"  >窗体底端</span><span style="font-family:Arial;"  >      </span></span></p></li></ol>
</body></html>