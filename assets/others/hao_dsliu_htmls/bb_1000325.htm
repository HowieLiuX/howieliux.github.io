<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：ePass1000, ePass2000, ePassNG, Shuttle对Container处理的不同及延续</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>ePass1000, ePass2000, ePassNG, Shuttle对Container处理的不同及延续</h2>
<p align="right">发布时间：2010-2-12 11:08
<br>分类名称：Private</p><br>
<div>    <p>     不管csp还是p11创建的公钥，私钥，证书对象，如果有对应关系，它们之间使用相同的CKA_ID,以此说明他们绑定到一起,这已经成为一个事实上的标  准。  </p>    </div>  <div><div></div></div>  <h2><a rel="nofollow"   >1k</a></h2>  <div>    <p>   在1k里，container没有对应的文件单独存储。  </p>  <ul><li><div>container里有秘钥和证书。那么有相同CKA_ID值的对象表示组成一  个container.container名字或者取CKA_ID值，或者取秘钥模的哈希值作为名字（根据CKA_ID是否为可识别字符来选择策略）。</div>  </li><li><div>container刚刚创建，是空的。因为container对象在卡上没有对  应的p11对象来表示，所以创建container的同时创建一个CKO_DA<wbr>TA类型的对象，作为Container的占位符以说明这个名字的  container已创建过（以特殊字符+container名作为da<wbr>ta对象的label）。一旦container里有了对象（如创建了秘钥），则  马上把此占位的da<wbr>ta对象删除.创建秘钥或证书时设置其CKA_ID值为container名字。这时container里有对象了，应用第一条规则。</div>  </li></ul>    <p>   因此，1k只支持单证。  </p>    <p>  因为1k是存储卡，所以key和p11对象二者合一，天生对应。  </p>    </div>  <div><div></div></div>  <h2><a rel="nofollow"   >2k</a></h2>  <div>    <p>     因为2k有密码芯片，key是密码芯片负责管理的，与p11对象分开存放，所以它们之间必须要有对应关系。所以在2k的全系列卡上，文件系统里ID为1的  文件有特殊作用。这个文件通过写一个keyid和p11对象起始文件的fid的表，记录了keyid与对象的对应关系。  </p>    <p>  FT1/FT10: <br></p><table border="1"    ><tbody><tr><th>ey index</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th>   </tr>   <tr>    <th>key ID</th><td>0×84</td><td>0×85</td><td>0×86</td><td>0×87</td><td>0×88</td><td>0×89</td><td>0x8A</td><td>0x8B</td><td>0x8C</td>   </tr>   <tr>    <th>file ID</th><td>0</td><td>x</td><td>0</td><td>x</td><td>x</td><td>x</td><td>x</td><td>0</td><td>0</td>   </tr>    </table>    <p>     FT2:  </p>  <table border="1"    >   <tbody><tr>    <th>key index</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th>   </tr>   <tr>    <th>key ID</th><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td>   </tr>   <tr>    <th>file ID</th><td>0</td><td>x</td><td>0</td><td>x</td><td>x</td><td>x</td><td>x</td><td>0</td><td>0</td>   </tr>  </table>    <p>   2k的pkcs#11中没有单独的属性存储Container Name，而是在CSP中用CKD_ID属性存储Container Name。  </p>    </div>  <div><div></div></div>  <h2><a rel="nofollow"   >NG</a></h2>  <div>    <p>  NG和Shuttle里Container单独存储为一个文件，Container文件属性为3。   因为其他对象没有记录container名字，而只记录container的FID,所以读取时，container先于其他对象读取，写入时先于其它对  象写入,否则无法设置对象的CKA_CONTAINER_NAME属性。 在NG里，container有对应的文件。文件内容是：  </p>  <table border="1"    >   <tbody><tr>    <th>字段长</th><td>1</td><td>1</td><td>名字长度</td><td>1</td><td>1</td>   </tr>   <tr>    <th>字段名</th><td>（名字长度＋1）高字节</td><td>（名字长度＋1）低字节</td><td>名字</td><td>\0</td><td>引  用计数</td>   </tr>  </table>    <p>  秘钥和证书对象里有一个属性CKA_CONTAINER_NAME,记录了它所在container的名字。（实际往卡上存储时，没有在此字段里存储字符  串，只存储了一个container文件的file ID）  </p>    <p>  当使用CSP时，这时container先创建出来了，容器内的秘钥和证书的CKA_ID为:  </p>  <ul><li><div>containername+“1”   如果AT_KEYEXCHANGE</div>  </li><li><div>containername+“2”   如果AT_SIGNATURE</div>  </li><li><div>containername+“1”     如果AT_SIGNATURE|AT_KEYEXCHANGE。</div>  </li></ul>    <p>   所以NG支持双证.  </p>    <p>  类似于2k,NG里的每一个卡也记录了kid与p11对象的关系：  </p>  <ul><li><div>FT11/FT12/ePass3000/ePass3000nd:</div>  </li></ul>  <table border="1"    >   <tbody><tr>    <th>key index</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th>   </tr>   <tr>    <th>key ID</th><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td>   </tr>   <tr>    <th>file ID</th><td>0</td><td>x</td><td>0</td><td>x</td><td>x</td><td>x</td><td>x</td><td>0</td><td>0</td>   </tr>  </table>    <p>  但是，虽然卡上存储的是以上内容，tsp获取keyid时动态的把index+1作为keyID，所以与FT2的相同。   </p>  <ul><li><div>FT1/FT10:</div>  </li></ul>  <table border="1"    >   <tbody><tr>    <th>key index</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th>   </tr>   <tr>    <th>key ID</th><td>0×84</td><td>0×85</td><td>0×86</td><td>0×87</td><td>0×88</td><td>0×89</td><td>0x8A</td><td>0x8B</td><td>0x8C</td>   </tr>   <tr>    <th>file ID</th><td>0</td><td>x</td><td>0</td><td>x</td><td>x</td><td>x</td><td>x</td><td>0</td><td>0</td>   </tr>  </table>  <ul><li><div>FT2:</div>  </li></ul>  <table border="1"    >   <tbody><tr>    <th>key index</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th>   </tr>   <tr>    <th>key ID</th><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td>   </tr>   <tr>    <th>file ID</th><td>0</td><td>x</td><td>0</td><td>x</td><td>x</td><td>x</td><td>x</td><td>0</td><td>0</td>   </tr>  </table>  <ul><li><div>特别的，1knd也是存储卡，其kid和对象天生对应，故没有kid文件。</div>  </li></ul>    <p>  公钥存储时比1k中间件多出一个CKA_CONTAINER_NAME属性。  </p>    </div>  <div><div></div></div>  <h2><a rel="nofollow"   >Shuttle</a></h2>  <div>    <p>   Shuttle里，p11对象扩展了一个属性，记录了p11对象的对应keyID,所以没有keyid文件. 分配时以这种策略分配：   </p>  <ul><li><div>FT1卡片,从0×84到0x8C</div>  </li><li><div>其它卡片,从1到9</div>  </li></ul>    </div>
</body></html>