<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：Android 初探</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>Android 初探</h2>
<p align="right">发布时间：2011-6-18 22:48
<br>分类名称：Android</p><br>
<p><span style="font-family:宋体; font-size:14pt;"><strong>开发分类</strong></span><span style="font-family: 宋体; font-size: 12pt;"><br></span></p><p><span style="font-family:宋体; font-size:12pt;"><b>1. 移植开发。</b> </span></p><p><span style="font-family:宋体; font-size:12pt;">备驱动，硬件抽象层，硬件系统<br><br></span><span style="font-family: 宋体; font-size: 12pt;"></span></p><p><b><span style="font-family:宋体; font-size:12pt;">2. Android系统开发。 </span></b></p><p><span style="font-family:宋体; font-size:12pt;">使用语言：C、C++、java </span></p><p><span style="font-family:宋体; font-size:12pt;">基于源码的开发（平台：Linux） </span></p><span style="font-family:宋体; font-size:12pt;">需要掌握：Linux操作系统知识、内核知识、驱动程序知识、Android底层库、Android的Java运行环境、Android GUI系统，音频、视频、多媒体、电话、蓝牙、Wi-Fi、定位、传感器等。</span><span style="font-family: 宋体; font-size: 12pt;"></span><span style="font-family:宋体; font-size:12pt;"><br><br><b>3. Android应用程序开发。 </b></span><p><span style="font-family:宋体; font-size:12pt;">使用语言：Java </span></p><p><span style="font-family:宋体; font-size:12pt;">基于Android的SDK（平台：windows，Linux） </span></p><span style="font-family:宋体; font-size:12pt;">需要掌握：Java语言知识，Android应用程序架构、GUI设计基础知识、各种视图的使用、2D\3D图形API等 </span><p></p><p> &nbsp;</p><p><span style="font-family:宋体; font-size:14pt;"><strong>架构 </strong></span></p><p><span style="font-family:宋体; font-size:12pt;">4个层次：<strong>    </strong></span></p><p><span style="font-family:宋体; font-size:12pt;">============================================================= </span></p><p><span style="font-family:宋体; font-size:12pt;"><strong>[内核空间] </strong></span></p><ol><li><div style="text-align: justify;"><span style="font-family:宋体; font-size:12pt;">Linux操作系统及其驱动（C语言实现）&nbsp;&nbsp;&nbsp;&nbsp; </span></div></li></ol><p><span style="font-family:宋体; font-size:12pt;">============================================================= </span></p><p><span style="font-family:宋体; font-size:12pt;"><strong>[用户空间] </strong></span></p><ol><li><div style="text-align: justify;"><span style="font-family:宋体; font-size:12pt;">本地代码框架（C、C++实现） </span></div></li><li><div style="text-align: justify;"><span style="font-family:宋体; font-size:12pt;">Java框架（主要由Java实现） </span></div></li><li><div style="text-align: justify;"><span style="font-family:宋体; font-size:12pt;">Java应用程序（主要由Java实现） </span></div></li></ol><p><span style="font-family:宋体; font-size:12pt;">============================================================= </span></p><p><img title="Android 初探 - Dsliu - Dspace" src="pic/img.ph.126.net_gDI0CqZjh-vLodxGgLbJww==_3387269869737369115.jpg" alt="">  </p><p><span style="font-family: 宋体; font-size: 12pt;"><strong><br></strong></span></p><p><span style="font-family:宋体; font-size:12pt;"><strong>Linux Kernel </strong></span></p><p><span style="font-family:宋体; font-size:12pt;">Android基于Linux 2.6提供核心系统服务，例如：安全、内存管理、进程管理、网络堆栈、驱动模型。Linux Kernel也作为硬件和软件之间的抽象层，它隐藏具体硬件细节而为上层提供统一的服务。 </span></p><p><span style="font-family:宋体; font-size:12pt;">除了内核，还需要增加驱动程序，如上图列举出来的一些Driver， </span></p><p><span style="font-family:宋体; font-size:12pt;">如果你学过计算机网络知道OSI/RM，就会知道分层的好处就是使用下层提供的服务而为上层提供统一的服务，屏蔽本层及以下层的差异，当本层及以下层发生了变化不会影响到上层。也就是说<strong>各层各司其职，各层提供固定的SAP（Service Access Point）</strong>，专业点可以说是<strong>高内聚、低耦合。</strong>   </span></p><p><span style="font-family: 宋体; font-size: 12pt;">如果你只是做应用开发，就不需要深入了解Linux Kernel层。 <br></span></p><p><span style="font-family:宋体; font-size:12pt;"><br></span></p><p><span style="font-family:宋体; font-size:12pt;"><strong>Libraries </strong></span></p><p><span style="font-family:宋体; font-size:12pt;">Android包含一个C/C++库的集合，供Android系统的各个组件使用。这些功能通过Android的应用程序框架（application framework）暴露给开发者。下面列出一些核心库： </span></p><ul><li><span style="font-family:宋体; font-size:12pt;"><strong>系统C库</strong>——标准C系统库（libc）的BSD衍生，调整为基于嵌入式Linux设备  </span></li><li><span style="font-family:宋体; font-size:12pt;"><strong>媒体库</strong>——基于PacketVideo的OpenCORE。这些库支持播放和录制许多流行的音频和视频格式，以及静态图像文件，包括MPEG4、 H.264、 MP3、 AAC、 AMR、JPG、 PNG  </span></li><li><span style="font-family:宋体; font-size:12pt;"><strong>界面管理</strong>——管理访问显示子系统和无缝组合多个应用程序的二维和三维图形层  </span></li><li><span style="font-family:宋体; font-size:12pt;"><strong>LibWebCore</strong>——新式的Web浏览器引擎,驱动Android 浏览器和内嵌的web视图  </span></li><li><span style="font-family:宋体; font-size:12pt;"><strong>SGL</strong>——基本的2D图形引擎  </span></li><li><span style="font-family:宋体; font-size:12pt;"><strong>3D库</strong>——基于OpenGL ES 1.0 APIs的实现。库使用硬件3D加速或包含高度优化的3D软件光栅  </span></li><li><span style="font-family:宋体; font-size:12pt;"><strong>FreeType</strong> ——位图和矢量字体渲染  </span></li><li><span style="font-family: 宋体; font-size: 12pt;"><strong>SQLite</strong> ——所有应用程序都可以使用的强大而轻量级的关系数据库引擎  </span></li></ul><br><p><span style="font-family:宋体; font-size:12pt;"><strong>Android Runtime </strong></span></p><p><span style="font-family:宋体; font-size:12pt;">由Dalvik虚拟机和Java类库组成。Android 包含一个核心库的集合，提供大部分在Java编程语言核心类库中可用的功能。每一个Android应用程序是Dalvik虚拟机中的实例，运行在他们自己的进程中。Dalvik虚拟机设计成，在一个设备可以高效地运行多个虚拟机。Dalvik虚拟机可执行文件格式是.dex，dex格式是专为Dalvik 设计的一种压缩格式，适合内存和处理器速度有限的系统。 </span></p><p><span style="font-family:宋体; font-size:12pt;">大多数虚拟机包括JVM都是基于栈的，而Dalvik虚拟机则是基于寄存器的。 两种架构各有优劣，一般而言，基于栈的机器需要更多指令，而基于寄存器的机器指令更大。dx 是一套工具，可以將 Java .class 转换成 .dex 格式。一个dex文件通常会有多个.class。由于dex有時必须进行最佳化，会使文件大小增加1-4倍，以ODEX结尾。 </span></p><p><span style="font-family: 宋体; font-size: 12pt;">Dalvik虚拟机依赖于Linux 内核提供基本功能，如线程和底层内存管理。 <br></span></p><p><span style="font-family:宋体; font-size:12pt;"><br></span></p><p><span style="font-family:宋体; font-size:12pt;"><strong>Application Framework </strong></span></p><p><span style="font-family:宋体; font-size:12pt;">通过提供开放的开发平台，Android使开发者能够编制极其丰富和新颖的应用程序。开发者可以自由地利用设备硬件优势、访问位置信息、运行后台服务、设置闹钟、向状态栏添加通知等等，很多很多。 </span></p><p><span style="font-family:宋体; font-size:12pt;">开发者可以完全使用核心应用程序所使用的框架APIs。应用程序的体系结构旨在简化组件的重用，任何应用程序都能发布他的功能且任何其他应用程序可以使用这些功能（需要服从框架执行的安全限制）。这一机制允许用户替换组件。 </span></p><p><span style="font-family:宋体; font-size:12pt;">所有的应用程序其实是一组服务和系统，包括： </span></p><ul><li><span style="font-family:宋体; font-size:12pt;"><strong>视图（View）</strong>——丰富的、可扩展的视图集合，可用于构建一个应用程序。包括包括列表、网格、文本框、按钮，甚至是内嵌的网页浏览器  </span></li><li><span style="font-family:宋体; font-size:12pt;"><strong>内容提供者（Content Providers）</strong>——使应用程序能访问其他应用程序（如通讯录）的数据，或共享自己的数据  </span></li><li><span style="font-family:宋体; font-size:12pt;"><strong>资源管理器（Resource Manager）</strong>——提供访问非代码资源，如本地化字符串、图形和布局文件  </span></li><li><span style="font-size:12pt;"><strong><span style="font-family:宋体;">通知管理器（</span><span style="font-family:Georgia;">Notification</span><span style="font-family:宋体;">      </span><span style="font-family:Georgia;">Manager</span></strong><span style="font-family:宋体;"><strong>）</strong>——使所有的应用程序能够在状态栏显示自定义警告  </span></span></li><li><span style="font-size: 12pt;"><strong><span style="font-family:宋体;">活动管理器（</span><span style="font-family:Georgia;">Activity</span><span style="font-family:宋体;">      </span><span style="font-family:Georgia;">Manager</span></strong><span style="font-family: 宋体;"><strong>）</strong>——管理应用程序生命周期,提供通用的导航回退功能  </span></span></li></ul><br><p><span style="font-family:宋体; font-size:12pt;"><strong>Applications </strong></span></p><p><span style="font-family:宋体; font-size:12pt;">Android装配一个核心应用程序集合，包括电子邮件客户端、SMS程序、日历、地图、浏览器、联系人和其他设置。所有应用程序都是用Java编程语言写的。更加丰富的应用程序有待我们去开发！</span></p>
</body></html>