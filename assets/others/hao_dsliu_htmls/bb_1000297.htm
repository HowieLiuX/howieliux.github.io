<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf8"><title>163 blogs的博客：[转] vector.resize 与 vector.reserve的区别</title>
<style type="text/css">
a{color: #000000;text-decoration : none;font-size: 10pt;}
a:hover {color: red;text-decoration : underline;}
.replyBox{padding:4px;border:1px solid #D8D8D8;}
</style></head><body><h2>[转] vector.resize 与 vector.reserve的区别</h2>
<p align="right">发布时间：2010-4-23 10:34
<br>分类名称：STL</p><br>
<span style="font-family: Arial, Helvetica, sans-serif; font-size: 12px; line-height: normal; color: rgb(68, 84, 6);"  ><h3 style="overflow-x: hidden; overflow-y: hidden; text-align: left; white-space: pre-wrap; word-wrap: break-word; word-break: break-all; font-size: 20px; margin-top: 30px; margin-right: 0px; margin-bottom: 20px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 24px; font-family: 微软雅黑, 黑体, Arial, Helvetica, sans-serif;"  ><span style="font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-weight: normal; line-height: 22px; white-space: normal;"  ><p style="line-height: 22px; margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;"  ><font color="#0000ff"  style="line-height: 22px;"  >vector 的reverse只是增加了vector的capacity，但是size没有改变！<br style="line-height: 22px;"  >resize同时改变了vector的capacity和size！</font><br style="line-height: 22px;"  ></p><p style="line-height: 22px; margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;"  >reserve是容器预留空间，但并不真正创建元素对象，在创建对象之前，不能引用容器内的元素，因此当加入新的元素时，需要用push_back()/insert()函数。</p><p style="line-height: 22px; margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;"  >resize是改变容器的大小，并且创建对象，因此，调用这个函数之后，就可以引用容器内的对象了，因此当加入新的元素时，用operator[]操作符，或者用迭代器来引用元素对象。</p><p style="line-height: 22px; margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;"  >再者，两个函数的形式是有区别的，reserve函数之后一个参数，即需要预留的容器的空间；resize函数可以有两个参数，第一个参数是容器新的大小，第二个参数是要加入容器中的新元素，如果这个参数被省略，那么就调用元素对象的默认构造函数。下面是这两个函数使用例子：</p><p style="line-height: 22px; margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;"  ><br style="line-height: 22px;"  >vector&lt;int&gt; myVec;&nbsp;<br style="line-height: 22px;"  >myVec.reserve( 100 );&nbsp;&nbsp;&nbsp;&nbsp; // 新元素还没有构造,&nbsp;<br style="line-height: 22px;"  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 此时不能用[]访问元素&nbsp;<br style="line-height: 22px;"  >for (int i = 0; i &lt; 100; i++ )&nbsp;<br style="line-height: 22px;"  >...{&nbsp;<br style="line-height: 22px;"  >&nbsp;&nbsp;&nbsp;&nbsp; myVec.push_back( i ); //新元素这时才构造&nbsp;<br style="line-height: 22px;"  >}&nbsp;<br style="line-height: 22px;"  >myVec.resize( 102 );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 用元素的默认构造函数构造了两个新的元素&nbsp;<br style="line-height: 22px;"  >myVec[100] = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //直接操作新元素&nbsp;<br style="line-height: 22px;"  >myVec[101] = 2;&nbsp;&nbsp;</p><p style="line-height: 22px; margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;"  >&nbsp;初次接触这两个接口也许会混淆，其实接口的命名就是对功能的绝佳描述，resize就是重新分配大小，reserve就是预留一定的空间。这两个接口即存在差别，也有共同点。下面就它们的细节进行分析。<br style="line-height: 22px;"  >&nbsp;&nbsp;&nbsp;&nbsp; 为实现resize的语义，resize接口做了两个保证：<br style="line-height: 22px;"  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一是保证区间[0, new_size)范围内数据有效，如果下标index在此区间内，vector[indext]是合法的。<br style="line-height: 22px;"  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 二是保证区间[0, new_size)范围以外数据无效，如果下标index在区间外，vector[indext]是非法的。<br style="line-height: 22px;"  >&nbsp;&nbsp;&nbsp;&nbsp; reserve只是保证vector的空间大小(capacity)最少达到它的参数所指定的大小n。在区间[0, n)范围内，如果下标是index，vector[index]这种访问有可能是合法的，也有可能是非法的，视具体情况而定。<br style="line-height: 22px;"  >&nbsp;&nbsp;&nbsp;&nbsp; resize和reserve接口的共同点是它们都保证了vector的空间大小(capacity)最少达到它的参数所指定的大小。<br style="line-height: 22px;"  >因两接口的源代码相当精简，以至于可以在这里贴上它们：<br style="line-height: 22px;"  >&nbsp; void resize(size_type new_size) { resize(new_size, T()); }<br style="line-height: 22px;"  >&nbsp; void resize(size_type new_size, const T&amp; x) {<br style="line-height: 22px;"  >&nbsp;&nbsp;&nbsp; if (new_size &lt; size())&nbsp;<br style="line-height: 22px;"  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; erase(begin() + new_size, end()); // erase区间范围以外的数据，确保区间以外的数据无效<br style="line-height: 22px;"  >&nbsp;&nbsp;&nbsp; else<br style="line-height: 22px;"  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; insert(end(), new_size - size(), x); // 填补区间范围内空缺的数据，确保区间内的数据有效</p></span></h3></span>
</body></html>